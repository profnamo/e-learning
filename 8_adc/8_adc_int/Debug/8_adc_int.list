
8_adc_int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000394c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b58  08003b58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b58  08003b58  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b60  08003b60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000070  08003bd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003bd8  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a323  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c53  00000000  00000000  0002a3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000930  00000000  00000000  0002c018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000838  00000000  00000000  0002c948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000234f4  00000000  00000000  0002d180  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000896c  00000000  00000000  00050674  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db385  00000000  00000000  00058fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002778  00000000  00000000  001343e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ae4 	.word	0x08003ae4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003ae4 	.word	0x08003ae4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 fdd9 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f002 fcc0 	bl	8002f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fdf1 	bl	80011da <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 fdb9 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	20000098 	.word	0x20000098

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000098 	.word	0x20000098

08000674 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800067c:	2300      	movs	r3, #0
 800067e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d101      	bne.n	800068a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000686:	2301      	movs	r3, #1
 8000688:	e033      	b.n	80006f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	2b00      	cmp	r3, #0
 8000690:	d109      	bne.n	80006a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f002 fc80 	bl	8002f98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2200      	movs	r2, #0
 800069c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	f003 0310 	and.w	r3, r3, #16
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d118      	bne.n	80006e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ba:	f023 0302 	bic.w	r3, r3, #2
 80006be:	f043 0202 	orr.w	r2, r3, #2
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 fb7c 	bl	8000dc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	f023 0303 	bic.w	r3, r3, #3
 80006da:	f043 0201 	orr.w	r2, r3, #1
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	641a      	str	r2, [r3, #64]	; 0x40
 80006e2:	e001      	b.n	80006e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006e4:	2301      	movs	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
	...

080006fc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800070e:	2b01      	cmp	r3, #1
 8000710:	d101      	bne.n	8000716 <HAL_ADC_Start_IT+0x1a>
 8000712:	2302      	movs	r3, #2
 8000714:	e0b0      	b.n	8000878 <HAL_ADC_Start_IT+0x17c>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2201      	movs	r2, #1
 800071a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	2b01      	cmp	r3, #1
 800072a:	d018      	beq.n	800075e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	689a      	ldr	r2, [r3, #8]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f042 0201 	orr.w	r2, r2, #1
 800073a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800073c:	4b51      	ldr	r3, [pc, #324]	; (8000884 <HAL_ADC_Start_IT+0x188>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a51      	ldr	r2, [pc, #324]	; (8000888 <HAL_ADC_Start_IT+0x18c>)
 8000742:	fba2 2303 	umull	r2, r3, r2, r3
 8000746:	0c9a      	lsrs	r2, r3, #18
 8000748:	4613      	mov	r3, r2
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	4413      	add	r3, r2
 800074e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000750:	e002      	b.n	8000758 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	3b01      	subs	r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1f9      	bne.n	8000752 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	2b01      	cmp	r3, #1
 800076a:	f040 8084 	bne.w	8000876 <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000776:	f023 0301 	bic.w	r3, r3, #1
 800077a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800078c:	2b00      	cmp	r3, #0
 800078e:	d007      	beq.n	80007a0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000798:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007ac:	d106      	bne.n	80007bc <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b2:	f023 0206 	bic.w	r2, r3, #6
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	645a      	str	r2, [r3, #68]	; 0x44
 80007ba:	e002      	b.n	80007c2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2200      	movs	r2, #0
 80007c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007ca:	4b30      	ldr	r3, [pc, #192]	; (800088c <HAL_ADC_Start_IT+0x190>)
 80007cc:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80007d6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007e6:	f043 0320 	orr.w	r3, r3, #32
 80007ea:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	f003 031f 	and.w	r3, r3, #31
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d12a      	bne.n	800084e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a24      	ldr	r2, [pc, #144]	; (8000890 <HAL_ADC_Start_IT+0x194>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d015      	beq.n	800082e <HAL_ADC_Start_IT+0x132>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a23      	ldr	r2, [pc, #140]	; (8000894 <HAL_ADC_Start_IT+0x198>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d105      	bne.n	8000818 <HAL_ADC_Start_IT+0x11c>
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <HAL_ADC_Start_IT+0x190>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f003 031f 	and.w	r3, r3, #31
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00a      	beq.n	800082e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <HAL_ADC_Start_IT+0x19c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d129      	bne.n	8000876 <HAL_ADC_Start_IT+0x17a>
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <HAL_ADC_Start_IT+0x190>)
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 031f 	and.w	r3, r3, #31
 800082a:	2b0f      	cmp	r3, #15
 800082c:	d823      	bhi.n	8000876 <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000838:	2b00      	cmp	r3, #0
 800083a:	d11c      	bne.n	8000876 <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	e013      	b.n	8000876 <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <HAL_ADC_Start_IT+0x194>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d10e      	bne.n	8000876 <HAL_ADC_Start_IT+0x17a>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000862:	2b00      	cmp	r3, #0
 8000864:	d107      	bne.n	8000876 <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	689a      	ldr	r2, [r3, #8]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000874:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
}
 8000878:	4618      	mov	r0, r3
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	20000008 	.word	0x20000008
 8000888:	431bde83 	.word	0x431bde83
 800088c:	40012300 	.word	0x40012300
 8000890:	40012000 	.word	0x40012000
 8000894:	40012100 	.word	0x40012100
 8000898:	40012200 	.word	0x40012200

0800089c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	bf0c      	ite	eq
 80008ba:	2301      	moveq	r3, #1
 80008bc:	2300      	movne	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	2b20      	cmp	r3, #32
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d049      	beq.n	8000972 <HAL_ADC_IRQHandler+0xd6>
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d046      	beq.n	8000972 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	f003 0310 	and.w	r3, r3, #16
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d105      	bne.n	80008fc <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d12b      	bne.n	8000962 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800090e:	2b00      	cmp	r3, #0
 8000910:	d127      	bne.n	8000962 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000918:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800091c:	2b00      	cmp	r3, #0
 800091e:	d006      	beq.n	800092e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800092a:	2b00      	cmp	r3, #0
 800092c:	d119      	bne.n	8000962 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f022 0220 	bic.w	r2, r2, #32
 800093c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d105      	bne.n	8000962 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f043 0201 	orr.w	r2, r3, #1
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f002 f84e 	bl	8002a04 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f06f 0212 	mvn.w	r2, #18
 8000970:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	2b04      	cmp	r3, #4
 800097e:	bf0c      	ite	eq
 8000980:	2301      	moveq	r3, #1
 8000982:	2300      	movne	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000992:	2b80      	cmp	r3, #128	; 0x80
 8000994:	bf0c      	ite	eq
 8000996:	2301      	moveq	r3, #1
 8000998:	2300      	movne	r3, #0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d057      	beq.n	8000a54 <HAL_ADC_IRQHandler+0x1b8>
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d054      	beq.n	8000a54 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 0310 	and.w	r3, r3, #16
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d105      	bne.n	80009c2 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d139      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d006      	beq.n	80009ec <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d12b      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d124      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d11d      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d119      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	685a      	ldr	r2, [r3, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d105      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f043 0201 	orr.w	r2, r3, #1
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f000 fab9 	bl	8000fbc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f06f 020c 	mvn.w	r2, #12
 8000a52:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	bf0c      	ite	eq
 8000a62:	2301      	moveq	r3, #1
 8000a64:	2300      	movne	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a74:	2b40      	cmp	r3, #64	; 0x40
 8000a76:	bf0c      	ite	eq
 8000a78:	2301      	moveq	r3, #1
 8000a7a:	2300      	movne	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d017      	beq.n	8000ab6 <HAL_ADC_IRQHandler+0x21a>
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d014      	beq.n	8000ab6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d10d      	bne.n	8000ab6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 f846 	bl	8000b38 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f06f 0201 	mvn.w	r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 0320 	and.w	r3, r3, #32
 8000ac0:	2b20      	cmp	r3, #32
 8000ac2:	bf0c      	ite	eq
 8000ac4:	2301      	moveq	r3, #1
 8000ac6:	2300      	movne	r3, #0
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000ada:	bf0c      	ite	eq
 8000adc:	2301      	moveq	r3, #1
 8000ade:	2300      	movne	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d015      	beq.n	8000b16 <HAL_ADC_IRQHandler+0x27a>
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d012      	beq.n	8000b16 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af4:	f043 0202 	orr.w	r2, r3, #2
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f06f 0220 	mvn.w	r2, #32
 8000b04:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 f820 	bl	8000b4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f06f 0220 	mvn.w	r2, #32
 8000b14:	601a      	str	r2, [r3, #0]
  }
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d101      	bne.n	8000b7c <HAL_ADC_ConfigChannel+0x1c>
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e113      	b.n	8000da4 <HAL_ADC_ConfigChannel+0x244>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b09      	cmp	r3, #9
 8000b8a:	d925      	bls.n	8000bd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68d9      	ldr	r1, [r3, #12]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	3b1e      	subs	r3, #30
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43da      	mvns	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	400a      	ands	r2, r1
 8000bb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68d9      	ldr	r1, [r3, #12]
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	689a      	ldr	r2, [r3, #8]
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4403      	add	r3, r0
 8000bca:	3b1e      	subs	r3, #30
 8000bcc:	409a      	lsls	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	e022      	b.n	8000c1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6919      	ldr	r1, [r3, #16]
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	2207      	movs	r2, #7
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	400a      	ands	r2, r1
 8000bfa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6919      	ldr	r1, [r3, #16]
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	4603      	mov	r3, r0
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4403      	add	r3, r0
 8000c14:	409a      	lsls	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d824      	bhi.n	8000c70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4613      	mov	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	3b05      	subs	r3, #5
 8000c38:	221f      	movs	r2, #31
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	400a      	ands	r2, r1
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	3b05      	subs	r3, #5
 8000c62:	fa00 f203 	lsl.w	r2, r0, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6e:	e04c      	b.n	8000d0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b0c      	cmp	r3, #12
 8000c76:	d824      	bhi.n	8000cc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	3b23      	subs	r3, #35	; 0x23
 8000c8a:	221f      	movs	r2, #31
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	43da      	mvns	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	400a      	ands	r2, r1
 8000c98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685a      	ldr	r2, [r3, #4]
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	3b23      	subs	r3, #35	; 0x23
 8000cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8000cc0:	e023      	b.n	8000d0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3b41      	subs	r3, #65	; 0x41
 8000cd4:	221f      	movs	r2, #31
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	400a      	ands	r2, r1
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3b41      	subs	r3, #65	; 0x41
 8000cfe:	fa00 f203 	lsl.w	r2, r0, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	430a      	orrs	r2, r1
 8000d08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d0a:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <HAL_ADC_ConfigChannel+0x250>)
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a28      	ldr	r2, [pc, #160]	; (8000db4 <HAL_ADC_ConfigChannel+0x254>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d10f      	bne.n	8000d38 <HAL_ADC_ConfigChannel+0x1d8>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b12      	cmp	r3, #18
 8000d1e:	d10b      	bne.n	8000d38 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a1d      	ldr	r2, [pc, #116]	; (8000db4 <HAL_ADC_ConfigChannel+0x254>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12b      	bne.n	8000d9a <HAL_ADC_ConfigChannel+0x23a>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a1c      	ldr	r2, [pc, #112]	; (8000db8 <HAL_ADC_ConfigChannel+0x258>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d003      	beq.n	8000d54 <HAL_ADC_ConfigChannel+0x1f4>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b11      	cmp	r3, #17
 8000d52:	d122      	bne.n	8000d9a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <HAL_ADC_ConfigChannel+0x258>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d111      	bne.n	8000d9a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_ADC_ConfigChannel+0x25c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <HAL_ADC_ConfigChannel+0x260>)
 8000d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d80:	0c9a      	lsrs	r2, r3, #18
 8000d82:	4613      	mov	r3, r2
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	4413      	add	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d8c:	e002      	b.n	8000d94 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f9      	bne.n	8000d8e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40012300 	.word	0x40012300
 8000db4:	40012000 	.word	0x40012000
 8000db8:	10000012 	.word	0x10000012
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	431bde83 	.word	0x431bde83

08000dc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dcc:	4b79      	ldr	r3, [pc, #484]	; (8000fb4 <ADC_Init+0x1f0>)
 8000dce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	685a      	ldr	r2, [r3, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	431a      	orrs	r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6859      	ldr	r1, [r3, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	021a      	lsls	r2, r3, #8
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6859      	ldr	r1, [r3, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6899      	ldr	r1, [r3, #8]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68da      	ldr	r2, [r3, #12]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e56:	4a58      	ldr	r2, [pc, #352]	; (8000fb8 <ADC_Init+0x1f4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d022      	beq.n	8000ea2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6899      	ldr	r1, [r3, #8]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6899      	ldr	r1, [r3, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	e00f      	b.n	8000ec2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689a      	ldr	r2, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ec0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0202 	bic.w	r2, r2, #2
 8000ed0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6899      	ldr	r1, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7e1b      	ldrb	r3, [r3, #24]
 8000edc:	005a      	lsls	r2, r3, #1
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d01b      	beq.n	8000f28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000efe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6859      	ldr	r1, [r3, #4]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	035a      	lsls	r2, r3, #13
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	430a      	orrs	r2, r1
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	e007      	b.n	8000f38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	051a      	lsls	r2, r3, #20
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6899      	ldr	r1, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f7a:	025a      	lsls	r2, r3, #9
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6899      	ldr	r1, [r3, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	029a      	lsls	r2, r3, #10
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	609a      	str	r2, [r3, #8]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	40012300 	.word	0x40012300
 8000fb8:	0f000001 	.word	0x0f000001

08000fbc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4907      	ldr	r1, [pc, #28]	; (800106c <__NVIC_EnableIRQ+0x38>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	; (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	; (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	; 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff ff8e 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	; (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff29 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff3e 	bl	8001018 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff8e 	bl	80010c4 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5d 	bl	8001070 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff31 	bl	8001034 <__NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffa2 	bl	800112c <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	e177      	b.n	8001500 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001210:	2201      	movs	r2, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 8166 	bne.w	80014fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x4a>
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b12      	cmp	r3, #18
 800123c:	d123      	bne.n	8001286 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	08da      	lsrs	r2, r3, #3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3208      	adds	r2, #8
 8001246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	691a      	ldr	r2, [r3, #16]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	69b9      	ldr	r1, [r7, #24]
 8001282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	2203      	movs	r2, #3
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 0203 	and.w	r2, r3, #3
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d00b      	beq.n	80012da <HAL_GPIO_Init+0xe6>
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ce:	2b11      	cmp	r3, #17
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b12      	cmp	r3, #18
 80012d8:	d130      	bne.n	800133c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 0201 	and.w	r2, r3, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	f000 80c0 	beq.w	80014fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b65      	ldr	r3, [pc, #404]	; (8001514 <HAL_GPIO_Init+0x320>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a64      	ldr	r2, [pc, #400]	; (8001514 <HAL_GPIO_Init+0x320>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b62      	ldr	r3, [pc, #392]	; (8001514 <HAL_GPIO_Init+0x320>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001396:	4a60      	ldr	r2, [pc, #384]	; (8001518 <HAL_GPIO_Init+0x324>)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3302      	adds	r3, #2
 800139e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	220f      	movs	r2, #15
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a57      	ldr	r2, [pc, #348]	; (800151c <HAL_GPIO_Init+0x328>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d037      	beq.n	8001432 <HAL_GPIO_Init+0x23e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a56      	ldr	r2, [pc, #344]	; (8001520 <HAL_GPIO_Init+0x32c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d031      	beq.n	800142e <HAL_GPIO_Init+0x23a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a55      	ldr	r2, [pc, #340]	; (8001524 <HAL_GPIO_Init+0x330>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d02b      	beq.n	800142a <HAL_GPIO_Init+0x236>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a54      	ldr	r2, [pc, #336]	; (8001528 <HAL_GPIO_Init+0x334>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d025      	beq.n	8001426 <HAL_GPIO_Init+0x232>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a53      	ldr	r2, [pc, #332]	; (800152c <HAL_GPIO_Init+0x338>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01f      	beq.n	8001422 <HAL_GPIO_Init+0x22e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a52      	ldr	r2, [pc, #328]	; (8001530 <HAL_GPIO_Init+0x33c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x22a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a51      	ldr	r2, [pc, #324]	; (8001534 <HAL_GPIO_Init+0x340>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x226>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a50      	ldr	r2, [pc, #320]	; (8001538 <HAL_GPIO_Init+0x344>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x222>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4f      	ldr	r2, [pc, #316]	; (800153c <HAL_GPIO_Init+0x348>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x21e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4e      	ldr	r2, [pc, #312]	; (8001540 <HAL_GPIO_Init+0x34c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x21a>
 800140a:	2309      	movs	r3, #9
 800140c:	e012      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800140e:	230a      	movs	r3, #10
 8001410:	e010      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001412:	2308      	movs	r3, #8
 8001414:	e00e      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001416:	2307      	movs	r3, #7
 8001418:	e00c      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800141a:	2306      	movs	r3, #6
 800141c:	e00a      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800141e:	2305      	movs	r3, #5
 8001420:	e008      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001422:	2304      	movs	r3, #4
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x240>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x240>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001444:	4934      	ldr	r1, [pc, #208]	; (8001518 <HAL_GPIO_Init+0x324>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001452:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <HAL_GPIO_Init+0x350>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001476:	4a33      	ldr	r2, [pc, #204]	; (8001544 <HAL_GPIO_Init+0x350>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_GPIO_Init+0x350>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a0:	4a28      	ldr	r2, [pc, #160]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a6:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ca:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_GPIO_Init+0x350>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f ae84 	bls.w	8001210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	3724      	adds	r7, #36	; 0x24
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40023800 	.word	0x40023800
 8001518:	40013800 	.word	0x40013800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400
 8001524:	40020800 	.word	0x40020800
 8001528:	40020c00 	.word	0x40020c00
 800152c:	40021000 	.word	0x40021000
 8001530:	40021400 	.word	0x40021400
 8001534:	40021800 	.word	0x40021800
 8001538:	40021c00 	.word	0x40021c00
 800153c:	40022000 	.word	0x40022000
 8001540:	40022400 	.word	0x40022400
 8001544:	40013c00 	.word	0x40013c00

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_PWREx_EnableOverDrive+0x90>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a1f      	ldr	r2, [pc, #124]	; (800160c <HAL_PWREx_EnableOverDrive+0x90>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_PWREx_EnableOverDrive+0x90>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_PWREx_EnableOverDrive+0x94>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a8:	f7ff f858 	bl	800065c <HAL_GetTick>
 80015ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015ae:	e009      	b.n	80015c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015b0:	f7ff f854 	bl	800065c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015be:	d901      	bls.n	80015c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e01f      	b.n	8001604 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_PWREx_EnableOverDrive+0x98>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d0:	d1ee      	bne.n	80015b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d8:	f7ff f840 	bl	800065c <HAL_GetTick>
 80015dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015de:	e009      	b.n	80015f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015e0:	f7ff f83c 	bl	800065c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ee:	d901      	bls.n	80015f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e007      	b.n	8001604 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_PWREx_EnableOverDrive+0x98>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001600:	d1ee      	bne.n	80015e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800
 8001610:	420e0040 	.word	0x420e0040
 8001614:	40007000 	.word	0x40007000
 8001618:	420e0044 	.word	0x420e0044

0800161c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e22d      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d075      	beq.n	8001726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800163a:	4ba3      	ldr	r3, [pc, #652]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b04      	cmp	r3, #4
 8001644:	d00c      	beq.n	8001660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001646:	4ba0      	ldr	r3, [pc, #640]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800164e:	2b08      	cmp	r3, #8
 8001650:	d112      	bne.n	8001678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001652:	4b9d      	ldr	r3, [pc, #628]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800165e:	d10b      	bne.n	8001678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	4b99      	ldr	r3, [pc, #612]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d05b      	beq.n	8001724 <HAL_RCC_OscConfig+0x108>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d157      	bne.n	8001724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e208      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001680:	d106      	bne.n	8001690 <HAL_RCC_OscConfig+0x74>
 8001682:	4b91      	ldr	r3, [pc, #580]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a90      	ldr	r2, [pc, #576]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e01d      	b.n	80016cc <HAL_RCC_OscConfig+0xb0>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x98>
 800169a:	4b8b      	ldr	r3, [pc, #556]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a8a      	ldr	r2, [pc, #552]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b88      	ldr	r3, [pc, #544]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a87      	ldr	r2, [pc, #540]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0xb0>
 80016b4:	4b84      	ldr	r3, [pc, #528]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a83      	ldr	r2, [pc, #524]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 80016ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a80      	ldr	r2, [pc, #512]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7fe ffc2 	bl	800065c <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016dc:	f7fe ffbe 	bl	800065c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1cd      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	4b76      	ldr	r3, [pc, #472]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0xc0>
 80016fa:	e014      	b.n	8001726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7fe ffae 	bl	800065c <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001704:	f7fe ffaa 	bl	800065c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e1b9      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	4b6c      	ldr	r3, [pc, #432]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0xe8>
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d063      	beq.n	80017fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001732:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173e:	4b62      	ldr	r3, [pc, #392]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001746:	2b08      	cmp	r3, #8
 8001748:	d11c      	bne.n	8001784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174a:	4b5f      	ldr	r3, [pc, #380]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d116      	bne.n	8001784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	4b5c      	ldr	r3, [pc, #368]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <HAL_RCC_OscConfig+0x152>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d001      	beq.n	800176e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e18d      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4952      	ldr	r1, [pc, #328]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	e03a      	b.n	80017fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800178c:	4b4f      	ldr	r3, [pc, #316]	; (80018cc <HAL_RCC_OscConfig+0x2b0>)
 800178e:	2201      	movs	r2, #1
 8001790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001792:	f7fe ff63 	bl	800065c <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179a:	f7fe ff5f 	bl	800065c <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e16e      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	4b46      	ldr	r3, [pc, #280]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4940      	ldr	r1, [pc, #256]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
 80017cc:	e015      	b.n	80017fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_RCC_OscConfig+0x2b0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7fe ff42 	bl	800065c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017dc:	f7fe ff3e 	bl	800065c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e14d      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d030      	beq.n	8001868 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d016      	beq.n	800183c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180e:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_RCC_OscConfig+0x2b4>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001814:	f7fe ff22 	bl	800065c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181c:	f7fe ff1e 	bl	800065c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e12d      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x200>
 800183a:	e015      	b.n	8001868 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_RCC_OscConfig+0x2b4>)
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001842:	f7fe ff0b 	bl	800065c <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184a:	f7fe ff07 	bl	800065c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e116      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 800185e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f0      	bne.n	800184a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80a0 	beq.w	80019b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10f      	bne.n	80018a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018a2:	2301      	movs	r3, #1
 80018a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_OscConfig+0x2b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d121      	bne.n	80018f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_RCC_OscConfig+0x2b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_RCC_OscConfig+0x2b8>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018be:	f7fe fecd 	bl	800065c <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	e011      	b.n	80018ea <HAL_RCC_OscConfig+0x2ce>
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	42470000 	.word	0x42470000
 80018d0:	42470e80 	.word	0x42470e80
 80018d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d8:	f7fe fec0 	bl	800065c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e0cf      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <HAL_RCC_OscConfig+0x478>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d106      	bne.n	800190c <HAL_RCC_OscConfig+0x2f0>
 80018fe:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 8001900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001902:	4a65      	ldr	r2, [pc, #404]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6713      	str	r3, [r2, #112]	; 0x70
 800190a:	e01c      	b.n	8001946 <HAL_RCC_OscConfig+0x32a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b05      	cmp	r3, #5
 8001912:	d10c      	bne.n	800192e <HAL_RCC_OscConfig+0x312>
 8001914:	4b60      	ldr	r3, [pc, #384]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001918:	4a5f      	ldr	r2, [pc, #380]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	6713      	str	r3, [r2, #112]	; 0x70
 8001920:	4b5d      	ldr	r3, [pc, #372]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001924:	4a5c      	ldr	r2, [pc, #368]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6713      	str	r3, [r2, #112]	; 0x70
 800192c:	e00b      	b.n	8001946 <HAL_RCC_OscConfig+0x32a>
 800192e:	4b5a      	ldr	r3, [pc, #360]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	4a59      	ldr	r2, [pc, #356]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	6713      	str	r3, [r2, #112]	; 0x70
 800193a:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	4a56      	ldr	r2, [pc, #344]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 8001940:	f023 0304 	bic.w	r3, r3, #4
 8001944:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d015      	beq.n	800197a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7fe fe85 	bl	800065c <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	e00a      	b.n	800196c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7fe fe81 	bl	800065c <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e08e      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196c:	4b4a      	ldr	r3, [pc, #296]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0ee      	beq.n	8001956 <HAL_RCC_OscConfig+0x33a>
 8001978:	e014      	b.n	80019a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7fe fe6f 	bl	800065c <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001980:	e00a      	b.n	8001998 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001982:	f7fe fe6b 	bl	800065c <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e078      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	4b3f      	ldr	r3, [pc, #252]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1ee      	bne.n	8001982 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d105      	bne.n	80019b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a3a      	ldr	r2, [pc, #232]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 80019b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d064      	beq.n	8001a88 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019be:	4b36      	ldr	r3, [pc, #216]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d05c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d141      	bne.n	8001a56 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	4b32      	ldr	r3, [pc, #200]	; (8001a9c <HAL_RCC_OscConfig+0x480>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7fe fe40 	bl	800065c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e0:	f7fe fe3c 	bl	800065c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e04b      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	019b      	lsls	r3, r3, #6
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	3b01      	subs	r3, #1
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	491d      	ldr	r1, [pc, #116]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_RCC_OscConfig+0x480>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7fe fe15 	bl	800065c <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a36:	f7fe fe11 	bl	800065c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e020      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x41a>
 8001a54:	e018      	b.n	8001a88 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_RCC_OscConfig+0x480>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7fe fdfe 	bl	800065c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a64:	f7fe fdfa 	bl	800065c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e009      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_RCC_OscConfig+0x47c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x448>
 8001a82:	e001      	b.n	8001a88 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40007000 	.word	0x40007000
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	42470060 	.word	0x42470060

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0ca      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b67      	ldr	r3, [pc, #412]	; (8001c54 <HAL_RCC_ClockConfig+0x1b4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 030f 	and.w	r3, r3, #15
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d90c      	bls.n	8001adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b64      	ldr	r3, [pc, #400]	; (8001c54 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <HAL_RCC_ClockConfig+0x1b4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b6      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af4:	4b58      	ldr	r3, [pc, #352]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a57      	ldr	r2, [pc, #348]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b0c:	4b52      	ldr	r3, [pc, #328]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b4f      	ldr	r3, [pc, #316]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	494c      	ldr	r1, [pc, #304]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d044      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d119      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e07d      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06d      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e065      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f023 0203 	bic.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4933      	ldr	r1, [pc, #204]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b90:	f7fe fd64 	bl	800065c <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7fe fd60 	bl	800065c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e04d      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 020c 	and.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1eb      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d20c      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <HAL_RCC_ClockConfig+0x1b4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e030      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf4:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4915      	ldr	r1, [pc, #84]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	490d      	ldr	r1, [pc, #52]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c26:	f000 f81d 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	5cd3      	ldrb	r3, [r2, r3]
 8001c3a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c42:	2000      	movs	r0, #0
 8001c44:	f7fe fcc6 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	08003b0c 	.word	0x08003b0c
 8001c60:	20000008 	.word	0x20000008

08001c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d007      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x32>
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d008      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x38>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f040 80b4 	bne.w	8001df8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c90:	4b5e      	ldr	r3, [pc, #376]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c92:	60bb      	str	r3, [r7, #8]
       break;
 8001c94:	e0b3      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c96:	4b5e      	ldr	r3, [pc, #376]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001c98:	60bb      	str	r3, [r7, #8]
      break;
 8001c9a:	e0b0      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c9c:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca6:	4b58      	ldr	r3, [pc, #352]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d04a      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb2:	4b55      	ldr	r3, [pc, #340]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	099b      	lsrs	r3, r3, #6
 8001cb8:	f04f 0400 	mov.w	r4, #0
 8001cbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	ea03 0501 	and.w	r5, r3, r1
 8001cc8:	ea04 0602 	and.w	r6, r4, r2
 8001ccc:	4629      	mov	r1, r5
 8001cce:	4632      	mov	r2, r6
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	f04f 0400 	mov.w	r4, #0
 8001cd8:	0154      	lsls	r4, r2, #5
 8001cda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cde:	014b      	lsls	r3, r1, #5
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	1b49      	subs	r1, r1, r5
 8001ce6:	eb62 0206 	sbc.w	r2, r2, r6
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	f04f 0400 	mov.w	r4, #0
 8001cf2:	0194      	lsls	r4, r2, #6
 8001cf4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cf8:	018b      	lsls	r3, r1, #6
 8001cfa:	1a5b      	subs	r3, r3, r1
 8001cfc:	eb64 0402 	sbc.w	r4, r4, r2
 8001d00:	f04f 0100 	mov.w	r1, #0
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	00e2      	lsls	r2, r4, #3
 8001d0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d0e:	00d9      	lsls	r1, r3, #3
 8001d10:	460b      	mov	r3, r1
 8001d12:	4614      	mov	r4, r2
 8001d14:	195b      	adds	r3, r3, r5
 8001d16:	eb44 0406 	adc.w	r4, r4, r6
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	0262      	lsls	r2, r4, #9
 8001d24:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001d28:	0259      	lsls	r1, r3, #9
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4614      	mov	r4, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4621      	mov	r1, r4
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f04f 0400 	mov.w	r4, #0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	f7fe faa8 	bl	8000290 <__aeabi_uldivmod>
 8001d40:	4603      	mov	r3, r0
 8001d42:	460c      	mov	r4, r1
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	e049      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d48:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	f04f 0400 	mov.w	r4, #0
 8001d52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	ea03 0501 	and.w	r5, r3, r1
 8001d5e:	ea04 0602 	and.w	r6, r4, r2
 8001d62:	4629      	mov	r1, r5
 8001d64:	4632      	mov	r2, r6
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	f04f 0400 	mov.w	r4, #0
 8001d6e:	0154      	lsls	r4, r2, #5
 8001d70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d74:	014b      	lsls	r3, r1, #5
 8001d76:	4619      	mov	r1, r3
 8001d78:	4622      	mov	r2, r4
 8001d7a:	1b49      	subs	r1, r1, r5
 8001d7c:	eb62 0206 	sbc.w	r2, r2, r6
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	f04f 0400 	mov.w	r4, #0
 8001d88:	0194      	lsls	r4, r2, #6
 8001d8a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d8e:	018b      	lsls	r3, r1, #6
 8001d90:	1a5b      	subs	r3, r3, r1
 8001d92:	eb64 0402 	sbc.w	r4, r4, r2
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	00e2      	lsls	r2, r4, #3
 8001da0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001da4:	00d9      	lsls	r1, r3, #3
 8001da6:	460b      	mov	r3, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	195b      	adds	r3, r3, r5
 8001dac:	eb44 0406 	adc.w	r4, r4, r6
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	02a2      	lsls	r2, r4, #10
 8001dba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001dbe:	0299      	lsls	r1, r3, #10
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4614      	mov	r4, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f04f 0400 	mov.w	r4, #0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4623      	mov	r3, r4
 8001dd2:	f7fe fa5d 	bl	8000290 <__aeabi_uldivmod>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	460c      	mov	r4, r1
 8001dda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	0c1b      	lsrs	r3, r3, #16
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	3301      	adds	r3, #1
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	60bb      	str	r3, [r7, #8]
      break;
 8001df6:	e002      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001dfa:	60bb      	str	r3, [r7, #8]
      break;
 8001dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	00f42400 	.word	0x00f42400
 8001e10:	007a1200 	.word	0x007a1200

08001e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e18:	4b03      	ldr	r3, [pc, #12]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e34:	4601      	mov	r1, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0a9b      	lsrs	r3, r3, #10
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4a03      	ldr	r2, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	08003b1c 	.word	0x08003b1c

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffdc 	bl	8001e14 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4601      	mov	r1, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0b5b      	lsrs	r3, r3, #13
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08003b1c 	.word	0x08003b1c

08001e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d105      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d061      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ea4:	4ba3      	ldr	r3, [pc, #652]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001eaa:	f7fe fbd7 	bl	800065c <HAL_GetTick>
 8001eae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001eb2:	f7fe fbd3 	bl	800065c <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e177      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ec4:	4b9c      	ldr	r3, [pc, #624]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d009      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	019a      	lsls	r2, r3, #6
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	071b      	lsls	r3, r3, #28
 8001ee8:	4993      	ldr	r1, [pc, #588]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01f      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001efc:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f02:	0f1b      	lsrs	r3, r3, #28
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	019a      	lsls	r2, r3, #6
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	061b      	lsls	r3, r3, #24
 8001f16:	431a      	orrs	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	071b      	lsls	r3, r3, #28
 8001f1c:	4986      	ldr	r1, [pc, #536]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f24:	4b84      	ldr	r3, [pc, #528]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f2a:	f023 021f 	bic.w	r2, r3, #31
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	4980      	ldr	r1, [pc, #512]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f3c:	4b7d      	ldr	r3, [pc, #500]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f42:	f7fe fb8b 	bl	800065c <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f4a:	f7fe fb87 	bl	800065c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e12b      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f5c:	4b76      	ldr	r3, [pc, #472]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d079      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001f80:	4b6e      	ldr	r3, [pc, #440]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f86:	f7fe fb69 	bl	800065c <HAL_GetTick>
 8001f8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f8e:	f7fe fb65 	bl	800065c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e109      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fa0:	4b65      	ldr	r3, [pc, #404]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fac:	d0ef      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d020      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001fba:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc0:	0f1b      	lsrs	r3, r3, #28
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	019a      	lsls	r2, r3, #6
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	061b      	lsls	r3, r3, #24
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	071b      	lsls	r3, r3, #28
 8001fda:	4957      	ldr	r1, [pc, #348]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001fe2:	4b55      	ldr	r3, [pc, #340]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	4950      	ldr	r1, [pc, #320]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01e      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002008:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	0e1b      	lsrs	r3, r3, #24
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	019a      	lsls	r2, r3, #6
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	071b      	lsls	r3, r3, #28
 8002028:	4943      	ldr	r1, [pc, #268]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002036:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	493e      	ldr	r1, [pc, #248]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002046:	4b3d      	ldr	r3, [pc, #244]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800204c:	f7fe fb06 	bl	800065c <HAL_GetTick>
 8002050:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002054:	f7fe fb02 	bl	800065c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0a6      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002066:	4b34      	ldr	r3, [pc, #208]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800206e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002072:	d1ef      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 808d 	beq.w	800219c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b2c      	ldr	r3, [pc, #176]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	4a2b      	ldr	r2, [pc, #172]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	; 0x40
 8002092:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800209e:	4b28      	ldr	r3, [pc, #160]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a27      	ldr	r2, [pc, #156]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020aa:	f7fe fad7 	bl	800065c <HAL_GetTick>
 80020ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7fe fad3 	bl	800065c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e077      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80020c4:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d039      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d032      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002104:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d11e      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002116:	f7fe faa1 	bl	800065c <HAL_GetTick>
 800211a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800211c:	e014      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211e:	f7fe fa9d 	bl	800065c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f241 3288 	movw	r2, #5000	; 0x1388
 800212c:	4293      	cmp	r3, r2
 800212e:	d90b      	bls.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e03f      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8002134:	42470068 	.word	0x42470068
 8002138:	40023800 	.word	0x40023800
 800213c:	42470070 	.word	0x42470070
 8002140:	40007000 	.word	0x40007000
 8002144:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800214a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0e4      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800215c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002160:	d10d      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x302>
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002176:	4911      	ldr	r1, [pc, #68]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]
 800217c:	e005      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002184:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002188:	6093      	str	r3, [r2, #8]
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800218c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002196:	4909      	ldr	r1, [pc, #36]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002198:	4313      	orrs	r3, r2
 800219a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80021b0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40023800 	.word	0x40023800
 80021c0:	424711e0 	.word	0x424711e0

080021c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e083      	b.n	80022de <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7f5b      	ldrb	r3, [r3, #29]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 ff22 	bl	8003030 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	22ca      	movs	r2, #202	; 0xca
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2253      	movs	r2, #83	; 0x53
 8002200:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f897 	bl	8002336 <RTC_EnterInitMode>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	22ff      	movs	r2, #255	; 0xff
 8002214:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2204      	movs	r2, #4
 800221a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e05e      	b.n	80022de <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800222e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002232:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68d2      	ldr	r2, [r2, #12]
 800225a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6919      	ldr	r1, [r3, #16]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	041a      	lsls	r2, r3, #16
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10e      	bne.n	80022ac <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f829 	bl	80022e6 <HAL_RTC_WaitForSynchro>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	22ff      	movs	r2, #255	; 0xff
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e018      	b.n	80022de <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	22ff      	movs	r2, #255	; 0xff
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80022dc:	2300      	movs	r3, #0
  }
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002300:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002302:	f7fe f9ab 	bl	800065c <HAL_GetTick>
 8002306:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002308:	e009      	b.n	800231e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800230a:	f7fe f9a7 	bl	800065c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002318:	d901      	bls.n	800231e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e007      	b.n	800232e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ee      	beq.n	800230a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	d119      	bne.n	8002384 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f04f 32ff 	mov.w	r2, #4294967295
 8002358:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800235a:	f7fe f97f 	bl	800065c <HAL_GetTick>
 800235e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002360:	e009      	b.n	8002376 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002362:	f7fe f97b 	bl	800065c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002370:	d901      	bls.n	8002376 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e007      	b.n	8002386 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ee      	beq.n	8002362 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e03f      	b.n	8002420 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d106      	bne.n	80023ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fe51 	bl	800305c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2224      	movs	r2, #36	; 0x24
 80023be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 f90c 	bl	80025f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002406:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	603b      	str	r3, [r7, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b20      	cmp	r3, #32
 8002446:	f040 8083 	bne.w	8002550 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_UART_Transmit+0x2e>
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e07b      	b.n	8002552 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_UART_Transmit+0x40>
 8002464:	2302      	movs	r3, #2
 8002466:	e074      	b.n	8002552 <HAL_UART_Transmit+0x12a>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2221      	movs	r2, #33	; 0x21
 800247a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800247e:	f7fe f8ed 	bl	800065c <HAL_GetTick>
 8002482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	88fa      	ldrh	r2, [r7, #6]
 8002488:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	88fa      	ldrh	r2, [r7, #6]
 800248e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002490:	e042      	b.n	8002518 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a8:	d122      	bne.n	80024f0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f850 	bl	800255a <UART_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e046      	b.n	8002552 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	3302      	adds	r3, #2
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	e017      	b.n	8002518 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	3301      	adds	r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	e013      	b.n	8002518 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2200      	movs	r2, #0
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f82d 	bl	800255a <UART_WaitOnFlagUntilTimeout>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e023      	b.n	8002552 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	60ba      	str	r2, [r7, #8]
 8002510:	781a      	ldrb	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1b7      	bne.n	8002492 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2200      	movs	r2, #0
 800252a:	2140      	movs	r1, #64	; 0x40
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f814 	bl	800255a <UART_WaitOnFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e00a      	b.n	8002552 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	e000      	b.n	8002552 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002550:	2302      	movs	r3, #2
  }
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800256a:	e02c      	b.n	80025c6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002572:	d028      	beq.n	80025c6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <UART_WaitOnFlagUntilTimeout+0x30>
 800257a:	f7fe f86f 	bl	800065c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	429a      	cmp	r2, r3
 8002588:	d21d      	bcs.n	80025c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002598:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0201 	bic.w	r2, r2, #1
 80025a8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e00f      	b.n	80025e6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4013      	ands	r3, r2
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d0c3      	beq.n	800256c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002630:	f023 030c 	bic.w	r3, r3, #12
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	430b      	orrs	r3, r1
 800263c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699a      	ldr	r2, [r3, #24]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800265c:	f040 80e4 	bne.w	8002828 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4aab      	ldr	r2, [pc, #684]	; (8002914 <UART_SetConfig+0x324>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d004      	beq.n	8002674 <UART_SetConfig+0x84>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4aaa      	ldr	r2, [pc, #680]	; (8002918 <UART_SetConfig+0x328>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d16c      	bne.n	800274e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002674:	f7ff fbee 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8002678:	4602      	mov	r2, r0
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	009a      	lsls	r2, r3, #2
 8002682:	441a      	add	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	4aa3      	ldr	r2, [pc, #652]	; (800291c <UART_SetConfig+0x32c>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	011c      	lsls	r4, r3, #4
 8002698:	f7ff fbdc 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 800269c:	4602      	mov	r2, r0
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	009a      	lsls	r2, r3, #2
 80026a6:	441a      	add	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80026b2:	f7ff fbcf 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 80026b6:	4602      	mov	r2, r0
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	009a      	lsls	r2, r3, #2
 80026c0:	441a      	add	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	4a93      	ldr	r2, [pc, #588]	; (800291c <UART_SetConfig+0x32c>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2264      	movs	r2, #100	; 0x64
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	1aeb      	subs	r3, r5, r3
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	3332      	adds	r3, #50	; 0x32
 80026e0:	4a8e      	ldr	r2, [pc, #568]	; (800291c <UART_SetConfig+0x32c>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026ee:	441c      	add	r4, r3
 80026f0:	f7ff fbb0 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	009a      	lsls	r2, r3, #2
 80026fe:	441a      	add	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fbb2 f5f3 	udiv	r5, r2, r3
 800270a:	f7ff fba3 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 800270e:	4602      	mov	r2, r0
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	009a      	lsls	r2, r3, #2
 8002718:	441a      	add	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	4a7d      	ldr	r2, [pc, #500]	; (800291c <UART_SetConfig+0x32c>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2264      	movs	r2, #100	; 0x64
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	1aeb      	subs	r3, r5, r3
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	3332      	adds	r3, #50	; 0x32
 8002738:	4a78      	ldr	r2, [pc, #480]	; (800291c <UART_SetConfig+0x32c>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	f003 0207 	and.w	r2, r3, #7
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4422      	add	r2, r4
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	e154      	b.n	80029f8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800274e:	f7ff fb6d 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002752:	4602      	mov	r2, r0
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	009a      	lsls	r2, r3, #2
 800275c:	441a      	add	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	4a6c      	ldr	r2, [pc, #432]	; (800291c <UART_SetConfig+0x32c>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	011c      	lsls	r4, r3, #4
 8002772:	f7ff fb5b 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002776:	4602      	mov	r2, r0
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	009a      	lsls	r2, r3, #2
 8002780:	441a      	add	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fbb2 f5f3 	udiv	r5, r2, r3
 800278c:	f7ff fb4e 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002790:	4602      	mov	r2, r0
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	009a      	lsls	r2, r3, #2
 800279a:	441a      	add	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a6:	4a5d      	ldr	r2, [pc, #372]	; (800291c <UART_SetConfig+0x32c>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	2264      	movs	r2, #100	; 0x64
 80027b0:	fb02 f303 	mul.w	r3, r2, r3
 80027b4:	1aeb      	subs	r3, r5, r3
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	3332      	adds	r3, #50	; 0x32
 80027ba:	4a58      	ldr	r2, [pc, #352]	; (800291c <UART_SetConfig+0x32c>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	095b      	lsrs	r3, r3, #5
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027c8:	441c      	add	r4, r3
 80027ca:	f7ff fb2f 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 80027ce:	4602      	mov	r2, r0
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	009a      	lsls	r2, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80027e4:	f7ff fb22 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 80027e8:	4602      	mov	r2, r0
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	009a      	lsls	r2, r3, #2
 80027f2:	441a      	add	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	4a47      	ldr	r2, [pc, #284]	; (800291c <UART_SetConfig+0x32c>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	095b      	lsrs	r3, r3, #5
 8002806:	2264      	movs	r2, #100	; 0x64
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	1aeb      	subs	r3, r5, r3
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	3332      	adds	r3, #50	; 0x32
 8002812:	4a42      	ldr	r2, [pc, #264]	; (800291c <UART_SetConfig+0x32c>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	095b      	lsrs	r3, r3, #5
 800281a:	f003 0207 	and.w	r2, r3, #7
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4422      	add	r2, r4
 8002824:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002826:	e0e7      	b.n	80029f8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a39      	ldr	r2, [pc, #228]	; (8002914 <UART_SetConfig+0x324>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <UART_SetConfig+0x24c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a38      	ldr	r2, [pc, #224]	; (8002918 <UART_SetConfig+0x328>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d171      	bne.n	8002920 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800283c:	f7ff fb0a 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8002840:	4602      	mov	r2, r0
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	009a      	lsls	r2, r3, #2
 800284a:	441a      	add	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	4a31      	ldr	r2, [pc, #196]	; (800291c <UART_SetConfig+0x32c>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	011c      	lsls	r4, r3, #4
 8002860:	f7ff faf8 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8002864:	4602      	mov	r2, r0
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	009a      	lsls	r2, r3, #2
 800286e:	441a      	add	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	fbb2 f5f3 	udiv	r5, r2, r3
 800287a:	f7ff faeb 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 800287e:	4602      	mov	r2, r0
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	009a      	lsls	r2, r3, #2
 8002888:	441a      	add	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	4a21      	ldr	r2, [pc, #132]	; (800291c <UART_SetConfig+0x32c>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2264      	movs	r2, #100	; 0x64
 800289e:	fb02 f303 	mul.w	r3, r2, r3
 80028a2:	1aeb      	subs	r3, r5, r3
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	3332      	adds	r3, #50	; 0x32
 80028a8:	4a1c      	ldr	r2, [pc, #112]	; (800291c <UART_SetConfig+0x32c>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b4:	441c      	add	r4, r3
 80028b6:	f7ff facd 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	009a      	lsls	r2, r3, #2
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80028d0:	f7ff fac0 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	009a      	lsls	r2, r3, #2
 80028de:	441a      	add	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	4a0c      	ldr	r2, [pc, #48]	; (800291c <UART_SetConfig+0x32c>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	2264      	movs	r2, #100	; 0x64
 80028f4:	fb02 f303 	mul.w	r3, r2, r3
 80028f8:	1aeb      	subs	r3, r5, r3
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	3332      	adds	r3, #50	; 0x32
 80028fe:	4a07      	ldr	r2, [pc, #28]	; (800291c <UART_SetConfig+0x32c>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	095b      	lsrs	r3, r3, #5
 8002906:	f003 020f 	and.w	r2, r3, #15
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4422      	add	r2, r4
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	e071      	b.n	80029f8 <UART_SetConfig+0x408>
 8002914:	40011000 	.word	0x40011000
 8002918:	40011400 	.word	0x40011400
 800291c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002920:	f7ff fa84 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002924:	4602      	mov	r2, r0
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009a      	lsls	r2, r3, #2
 800292e:	441a      	add	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	4a31      	ldr	r2, [pc, #196]	; (8002a00 <UART_SetConfig+0x410>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	011c      	lsls	r4, r3, #4
 8002944:	f7ff fa72 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002948:	4602      	mov	r2, r0
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	009a      	lsls	r2, r3, #2
 8002952:	441a      	add	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	fbb2 f5f3 	udiv	r5, r2, r3
 800295e:	f7ff fa65 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002962:	4602      	mov	r2, r0
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	009a      	lsls	r2, r3, #2
 800296c:	441a      	add	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	4a21      	ldr	r2, [pc, #132]	; (8002a00 <UART_SetConfig+0x410>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	2264      	movs	r2, #100	; 0x64
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	1aeb      	subs	r3, r5, r3
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	3332      	adds	r3, #50	; 0x32
 800298c:	4a1c      	ldr	r2, [pc, #112]	; (8002a00 <UART_SetConfig+0x410>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002998:	441c      	add	r4, r3
 800299a:	f7ff fa47 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 800299e:	4602      	mov	r2, r0
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009a      	lsls	r2, r3, #2
 80029a8:	441a      	add	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80029b4:	f7ff fa3a 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	009a      	lsls	r2, r3, #2
 80029c2:	441a      	add	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <UART_SetConfig+0x410>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	2264      	movs	r2, #100	; 0x64
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	1aeb      	subs	r3, r5, r3
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	3332      	adds	r3, #50	; 0x32
 80029e2:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <UART_SetConfig+0x410>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	f003 020f 	and.w	r2, r3, #15
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4422      	add	r2, r4
 80029f4:	609a      	str	r2, [r3, #8]
}
 80029f6:	e7ff      	b.n	80029f8 <UART_SetConfig+0x408>
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002a00:	51eb851f 	.word	0x51eb851f

08002a04 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */
uint32_t adc_value;
uint8_t uart_buf[30];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	  if(hadc->Instance==ADC1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a11      	ldr	r2, [pc, #68]	; (8002a58 <HAL_ADC_ConvCpltCallback+0x54>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d11b      	bne.n	8002a4e <HAL_ADC_ConvCpltCallback+0x4a>
	  {
		    memset(uart_buf,0,sizeof(uart_buf));
 8002a16:	221e      	movs	r2, #30
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4810      	ldr	r0, [pc, #64]	; (8002a5c <HAL_ADC_ConvCpltCallback+0x58>)
 8002a1c:	f000 fc54 	bl	80032c8 <memset>
		    adc_value = HAL_ADC_GetValue(&hadc1);
 8002a20:	480f      	ldr	r0, [pc, #60]	; (8002a60 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002a22:	f7fe f87c 	bl	8000b1e <HAL_ADC_GetValue>
 8002a26:	4602      	mov	r2, r0
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <HAL_ADC_ConvCpltCallback+0x60>)
 8002a2a:	601a      	str	r2, [r3, #0]
		    sprintf(uart_buf,"-------> %d\r\n",adc_value);
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <HAL_ADC_ConvCpltCallback+0x60>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	490d      	ldr	r1, [pc, #52]	; (8002a68 <HAL_ADC_ConvCpltCallback+0x64>)
 8002a34:	4809      	ldr	r0, [pc, #36]	; (8002a5c <HAL_ADC_ConvCpltCallback+0x58>)
 8002a36:	f000 fc4f 	bl	80032d8 <siprintf>
		    HAL_UART_Transmit(&huart3,uart_buf,sizeof(uart_buf),10000);
 8002a3a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002a3e:	221e      	movs	r2, #30
 8002a40:	4906      	ldr	r1, [pc, #24]	; (8002a5c <HAL_ADC_ConvCpltCallback+0x58>)
 8002a42:	480a      	ldr	r0, [pc, #40]	; (8002a6c <HAL_ADC_ConvCpltCallback+0x68>)
 8002a44:	f7ff fcf0 	bl	8002428 <HAL_UART_Transmit>
		    HAL_ADC_Start_IT(&hadc1);
 8002a48:	4805      	ldr	r0, [pc, #20]	; (8002a60 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002a4a:	f7fd fe57 	bl	80006fc <HAL_ADC_Start_IT>
	  }

}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40012000 	.word	0x40012000
 8002a5c:	200000dc 	.word	0x200000dc
 8002a60:	20000100 	.word	0x20000100
 8002a64:	200000fc 	.word	0x200000fc
 8002a68:	08003afc 	.word	0x08003afc
 8002a6c:	2000009c 	.word	0x2000009c

08002a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a74:	f7fd fd8c 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a78:	f000 f80e 	bl	8002a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a7c:	f000 f936 	bl	8002cec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002a80:	f000 f90a 	bl	8002c98 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002a84:	f000 f890 	bl	8002ba8 <MX_ADC1_Init>
  MX_RTC_Init();
 8002a88:	f000 f8e0 	bl	8002c4c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8002a8c:	4801      	ldr	r0, [pc, #4]	; (8002a94 <main+0x24>)
 8002a8e:	f7fd fe35 	bl	80006fc <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a92:	e7fe      	b.n	8002a92 <main+0x22>
 8002a94:	20000100 	.word	0x20000100

08002a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b0a0      	sub	sp, #128	; 0x80
 8002a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002aa2:	2230      	movs	r2, #48	; 0x30
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fc0e 	bl	80032c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	2230      	movs	r2, #48	; 0x30
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fbff 	bl	80032c8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	4b34      	ldr	r3, [pc, #208]	; (8002ba0 <SystemClock_Config+0x108>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	4a33      	ldr	r2, [pc, #204]	; (8002ba0 <SystemClock_Config+0x108>)
 8002ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ada:	4b31      	ldr	r3, [pc, #196]	; (8002ba0 <SystemClock_Config+0x108>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	4b2e      	ldr	r3, [pc, #184]	; (8002ba4 <SystemClock_Config+0x10c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a2d      	ldr	r2, [pc, #180]	; (8002ba4 <SystemClock_Config+0x10c>)
 8002af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <SystemClock_Config+0x10c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002b02:	2306      	movs	r3, #6
 8002b04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b06:	2301      	movs	r3, #1
 8002b08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b0e:	2310      	movs	r3, #16
 8002b10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b12:	2302      	movs	r3, #2
 8002b14:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b16:	2300      	movs	r3, #0
 8002b18:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002b1e:	23b4      	movs	r3, #180	; 0xb4
 8002b20:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b22:	2302      	movs	r3, #2
 8002b24:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002b26:	2307      	movs	r3, #7
 8002b28:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fd74 	bl	800161c <HAL_RCC_OscConfig>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002b3a:	f000 f9fd 	bl	8002f38 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b3e:	f7fe fd1d 	bl	800157c <HAL_PWREx_EnableOverDrive>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002b48:	f000 f9f6 	bl	8002f38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b50:	2302      	movs	r3, #2
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b54:	2300      	movs	r3, #0
 8002b56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b68:	2105      	movs	r1, #5
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe ff98 	bl	8001aa0 <HAL_RCC_ClockConfig>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002b76:	f000 f9df 	bl	8002f38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b82:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff f977 	bl	8001e7c <HAL_RCCEx_PeriphCLKConfig>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8002b94:	f000 f9d0 	bl	8002f38 <Error_Handler>
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3780      	adds	r7, #128	; 0x80
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40007000 	.word	0x40007000

08002ba8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bae:	463b      	mov	r3, r7
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002bba:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002bbc:	4a21      	ldr	r2, [pc, #132]	; (8002c44 <MX_ADC1_Init+0x9c>)
 8002bbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002bc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002bea:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <MX_ADC1_Init+0xa0>)
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c02:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c08:	480d      	ldr	r0, [pc, #52]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002c0a:	f7fd fd33 	bl	8000674 <HAL_ADC_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c14:	f000 f990 	bl	8002f38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c24:	463b      	mov	r3, r7
 8002c26:	4619      	mov	r1, r3
 8002c28:	4805      	ldr	r0, [pc, #20]	; (8002c40 <MX_ADC1_Init+0x98>)
 8002c2a:	f7fd ff99 	bl	8000b60 <HAL_ADC_ConfigChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c34:	f000 f980 	bl	8002f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000100 	.word	0x20000100
 8002c44:	40012000 	.word	0x40012000
 8002c48:	0f000001 	.word	0x0f000001

08002c4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <MX_RTC_Init+0x44>)
 8002c52:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <MX_RTC_Init+0x48>)
 8002c54:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <MX_RTC_Init+0x44>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <MX_RTC_Init+0x44>)
 8002c5e:	227f      	movs	r2, #127	; 0x7f
 8002c60:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <MX_RTC_Init+0x44>)
 8002c64:	22ff      	movs	r2, #255	; 0xff
 8002c66:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c68:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <MX_RTC_Init+0x44>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <MX_RTC_Init+0x44>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <MX_RTC_Init+0x44>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c7a:	4805      	ldr	r0, [pc, #20]	; (8002c90 <MX_RTC_Init+0x44>)
 8002c7c:	f7ff faa2 	bl	80021c4 <HAL_RTC_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002c86:	f000 f957 	bl	8002f38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000148 	.word	0x20000148
 8002c94:	40002800 	.word	0x40002800

08002c98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <MX_USART3_UART_Init+0x50>)
 8002ca0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ca8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cce:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <MX_USART3_UART_Init+0x4c>)
 8002cd0:	f7ff fb5d 	bl	800238e <HAL_UART_Init>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002cda:	f000 f92d 	bl	8002f38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	2000009c 	.word	0x2000009c
 8002ce8:	40004800 	.word	0x40004800

08002cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08c      	sub	sp, #48	; 0x30
 8002cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf2:	f107 031c 	add.w	r3, r7, #28
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
 8002d00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	4b86      	ldr	r3, [pc, #536]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a85      	ldr	r2, [pc, #532]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d0c:	f043 0304 	orr.w	r3, r3, #4
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b83      	ldr	r3, [pc, #524]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	4b7f      	ldr	r3, [pc, #508]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a7e      	ldr	r2, [pc, #504]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b7c      	ldr	r3, [pc, #496]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	4b78      	ldr	r3, [pc, #480]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	4a77      	ldr	r2, [pc, #476]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	4b75      	ldr	r3, [pc, #468]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	4b71      	ldr	r3, [pc, #452]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	4a70      	ldr	r2, [pc, #448]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	6313      	str	r3, [r2, #48]	; 0x30
 8002d66:	4b6e      	ldr	r3, [pc, #440]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a69      	ldr	r2, [pc, #420]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d7c:	f043 0308 	orr.w	r3, r3, #8
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a62      	ldr	r2, [pc, #392]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b60      	ldr	r3, [pc, #384]	; (8002f20 <MX_GPIO_Init+0x234>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002daa:	2200      	movs	r2, #0
 8002dac:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002db0:	485c      	ldr	r0, [pc, #368]	; (8002f24 <MX_GPIO_Init+0x238>)
 8002db2:	f7fe fbc9 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2140      	movs	r1, #64	; 0x40
 8002dba:	485b      	ldr	r0, [pc, #364]	; (8002f28 <MX_GPIO_Init+0x23c>)
 8002dbc:	f7fe fbc4 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dc6:	4859      	ldr	r0, [pc, #356]	; (8002f2c <MX_GPIO_Init+0x240>)
 8002dc8:	f7fe fbbe 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dd2:	4b57      	ldr	r3, [pc, #348]	; (8002f30 <MX_GPIO_Init+0x244>)
 8002dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002dda:	f107 031c 	add.w	r3, r7, #28
 8002dde:	4619      	mov	r1, r3
 8002de0:	4852      	ldr	r0, [pc, #328]	; (8002f2c <MX_GPIO_Init+0x240>)
 8002de2:	f7fe fa07 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002de6:	2332      	movs	r3, #50	; 0x32
 8002de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df2:	2303      	movs	r3, #3
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002df6:	230b      	movs	r3, #11
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfa:	f107 031c 	add.w	r3, r7, #28
 8002dfe:	4619      	mov	r1, r3
 8002e00:	484a      	ldr	r0, [pc, #296]	; (8002f2c <MX_GPIO_Init+0x240>)
 8002e02:	f7fe f9f7 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002e06:	2386      	movs	r3, #134	; 0x86
 8002e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e16:	230b      	movs	r3, #11
 8002e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4844      	ldr	r0, [pc, #272]	; (8002f34 <MX_GPIO_Init+0x248>)
 8002e22:	f7fe f9e7 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e38:	230b      	movs	r3, #11
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	f107 031c 	add.w	r3, r7, #28
 8002e40:	4619      	mov	r1, r3
 8002e42:	4838      	ldr	r0, [pc, #224]	; (8002f24 <MX_GPIO_Init+0x238>)
 8002e44:	f7fe f9d6 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002e48:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5a:	f107 031c 	add.w	r3, r7, #28
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4830      	ldr	r0, [pc, #192]	; (8002f24 <MX_GPIO_Init+0x238>)
 8002e62:	f7fe f9c7 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002e66:	2340      	movs	r3, #64	; 0x40
 8002e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002e76:	f107 031c 	add.w	r3, r7, #28
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	482a      	ldr	r0, [pc, #168]	; (8002f28 <MX_GPIO_Init+0x23c>)
 8002e7e:	f7fe f9b9 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e86:	2300      	movs	r3, #0
 8002e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002e8e:	f107 031c 	add.w	r3, r7, #28
 8002e92:	4619      	mov	r1, r3
 8002e94:	4824      	ldr	r0, [pc, #144]	; (8002f28 <MX_GPIO_Init+0x23c>)
 8002e96:	f7fe f9ad 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8002e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8002eac:	f107 031c 	add.w	r3, r7, #28
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	481e      	ldr	r0, [pc, #120]	; (8002f2c <MX_GPIO_Init+0x240>)
 8002eb4:	f7fe f99e 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002eb8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002eca:	230a      	movs	r3, #10
 8002ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ece:	f107 031c 	add.w	r3, r7, #28
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4817      	ldr	r0, [pc, #92]	; (8002f34 <MX_GPIO_Init+0x248>)
 8002ed6:	f7fe f98d 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002ee8:	f107 031c 	add.w	r3, r7, #28
 8002eec:	4619      	mov	r1, r3
 8002eee:	4811      	ldr	r0, [pc, #68]	; (8002f34 <MX_GPIO_Init+0x248>)
 8002ef0:	f7fe f980 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002ef4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efa:	2302      	movs	r3, #2
 8002efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f02:	2303      	movs	r3, #3
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f06:	230b      	movs	r3, #11
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f0a:	f107 031c 	add.w	r3, r7, #28
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4805      	ldr	r0, [pc, #20]	; (8002f28 <MX_GPIO_Init+0x23c>)
 8002f12:	f7fe f96f 	bl	80011f4 <HAL_GPIO_Init>

}
 8002f16:	bf00      	nop
 8002f18:	3730      	adds	r7, #48	; 0x30
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40021800 	.word	0x40021800
 8002f2c:	40020800 	.word	0x40020800
 8002f30:	10110000 	.word	0x10110000
 8002f34:	40020000 	.word	0x40020000

08002f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_MspInit+0x4c>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800

08002f98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08a      	sub	sp, #40	; 0x28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 0314 	add.w	r3, r7, #20
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1b      	ldr	r2, [pc, #108]	; (8003024 <HAL_ADC_MspInit+0x8c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d12f      	bne.n	800301a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <HAL_ADC_MspInit+0x90>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	4a19      	ldr	r2, [pc, #100]	; (8003028 <HAL_ADC_MspInit+0x90>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fca:	4b17      	ldr	r3, [pc, #92]	; (8003028 <HAL_ADC_MspInit+0x90>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <HAL_ADC_MspInit+0x90>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a12      	ldr	r2, [pc, #72]	; (8003028 <HAL_ADC_MspInit+0x90>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_ADC_MspInit+0x90>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ff2:	2308      	movs	r3, #8
 8002ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffe:	f107 0314 	add.w	r3, r7, #20
 8003002:	4619      	mov	r1, r3
 8003004:	4809      	ldr	r0, [pc, #36]	; (800302c <HAL_ADC_MspInit+0x94>)
 8003006:	f7fe f8f5 	bl	80011f4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800300a:	2200      	movs	r2, #0
 800300c:	2100      	movs	r1, #0
 800300e:	2012      	movs	r0, #18
 8003010:	f7fe f8b9 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003014:	2012      	movs	r0, #18
 8003016:	f7fe f8d2 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800301a:	bf00      	nop
 800301c:	3728      	adds	r7, #40	; 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40012000 	.word	0x40012000
 8003028:	40023800 	.word	0x40023800
 800302c:	40020000 	.word	0x40020000

08003030 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a05      	ldr	r2, [pc, #20]	; (8003054 <HAL_RTC_MspInit+0x24>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d102      	bne.n	8003048 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RTC_MspInit+0x28>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40002800 	.word	0x40002800
 8003058:	42470e3c 	.word	0x42470e3c

0800305c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <HAL_UART_MspInit+0x84>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d12c      	bne.n	80030d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <HAL_UART_MspInit+0x88>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <HAL_UART_MspInit+0x88>)
 8003088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <HAL_UART_MspInit+0x88>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_UART_MspInit+0x88>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a10      	ldr	r2, [pc, #64]	; (80030e4 <HAL_UART_MspInit+0x88>)
 80030a4:	f043 0308 	orr.w	r3, r3, #8
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_UART_MspInit+0x88>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80030b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030c0:	2301      	movs	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c4:	2303      	movs	r3, #3
 80030c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030c8:	2307      	movs	r3, #7
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4619      	mov	r1, r3
 80030d2:	4805      	ldr	r0, [pc, #20]	; (80030e8 <HAL_UART_MspInit+0x8c>)
 80030d4:	f7fe f88e 	bl	80011f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030d8:	bf00      	nop
 80030da:	3728      	adds	r7, #40	; 0x28
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40004800 	.word	0x40004800
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40020c00 	.word	0x40020c00

080030ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030fa:	b480      	push	{r7}
 80030fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030fe:	e7fe      	b.n	80030fe <HardFault_Handler+0x4>

08003100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003104:	e7fe      	b.n	8003104 <MemManage_Handler+0x4>

08003106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800310a:	e7fe      	b.n	800310a <BusFault_Handler+0x4>

0800310c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003110:	e7fe      	b.n	8003110 <UsageFault_Handler+0x4>

08003112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003140:	f7fd fa78 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}

08003148 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800314c:	4802      	ldr	r0, [pc, #8]	; (8003158 <ADC_IRQHandler+0x10>)
 800314e:	f7fd fba5 	bl	800089c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000100 	.word	0x20000100

0800315c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <_sbrk+0x50>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <_sbrk+0x16>
		heap_end = &end;
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <_sbrk+0x50>)
 800316e:	4a10      	ldr	r2, [pc, #64]	; (80031b0 <_sbrk+0x54>)
 8003170:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <_sbrk+0x50>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <_sbrk+0x50>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	466a      	mov	r2, sp
 8003182:	4293      	cmp	r3, r2
 8003184:	d907      	bls.n	8003196 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003186:	f000 f875 	bl	8003274 <__errno>
 800318a:	4602      	mov	r2, r0
 800318c:	230c      	movs	r3, #12
 800318e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
 8003194:	e006      	b.n	80031a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <_sbrk+0x50>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	4a03      	ldr	r2, [pc, #12]	; (80031ac <_sbrk+0x50>)
 80031a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80031a2:	68fb      	ldr	r3, [r7, #12]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	2000008c 	.word	0x2000008c
 80031b0:	20000170 	.word	0x20000170

080031b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031b8:	4b16      	ldr	r3, [pc, #88]	; (8003214 <SystemInit+0x60>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031be:	4a15      	ldr	r2, [pc, #84]	; (8003214 <SystemInit+0x60>)
 80031c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80031c8:	4b13      	ldr	r3, [pc, #76]	; (8003218 <SystemInit+0x64>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a12      	ldr	r2, [pc, #72]	; (8003218 <SystemInit+0x64>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80031d4:	4b10      	ldr	r3, [pc, #64]	; (8003218 <SystemInit+0x64>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80031da:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <SystemInit+0x64>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <SystemInit+0x64>)
 80031e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <SystemInit+0x64>)
 80031ec:	4a0b      	ldr	r2, [pc, #44]	; (800321c <SystemInit+0x68>)
 80031ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <SystemInit+0x64>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a08      	ldr	r2, [pc, #32]	; (8003218 <SystemInit+0x64>)
 80031f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <SystemInit+0x64>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003202:	4b04      	ldr	r3, [pc, #16]	; (8003214 <SystemInit+0x60>)
 8003204:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003208:	609a      	str	r2, [r3, #8]
#endif
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000ed00 	.word	0xe000ed00
 8003218:	40023800 	.word	0x40023800
 800321c:	24003010 	.word	0x24003010

08003220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003258 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003224:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003226:	e003      	b.n	8003230 <LoopCopyDataInit>

08003228 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800322a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800322c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800322e:	3104      	adds	r1, #4

08003230 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003230:	480b      	ldr	r0, [pc, #44]	; (8003260 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003232:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003234:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003236:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003238:	d3f6      	bcc.n	8003228 <CopyDataInit>
  ldr  r2, =_sbss
 800323a:	4a0b      	ldr	r2, [pc, #44]	; (8003268 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800323c:	e002      	b.n	8003244 <LoopFillZerobss>

0800323e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800323e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003240:	f842 3b04 	str.w	r3, [r2], #4

08003244 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003246:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003248:	d3f9      	bcc.n	800323e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800324a:	f7ff ffb3 	bl	80031b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800324e:	f000 f817 	bl	8003280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003252:	f7ff fc0d 	bl	8002a70 <main>
  bx  lr    
 8003256:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003258:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800325c:	08003b68 	.word	0x08003b68
  ldr  r0, =_sdata
 8003260:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003264:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003268:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 800326c:	2000016c 	.word	0x2000016c

08003270 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003270:	e7fe      	b.n	8003270 <CAN1_RX0_IRQHandler>
	...

08003274 <__errno>:
 8003274:	4b01      	ldr	r3, [pc, #4]	; (800327c <__errno+0x8>)
 8003276:	6818      	ldr	r0, [r3, #0]
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	2000000c 	.word	0x2000000c

08003280 <__libc_init_array>:
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	4e0d      	ldr	r6, [pc, #52]	; (80032b8 <__libc_init_array+0x38>)
 8003284:	4c0d      	ldr	r4, [pc, #52]	; (80032bc <__libc_init_array+0x3c>)
 8003286:	1ba4      	subs	r4, r4, r6
 8003288:	10a4      	asrs	r4, r4, #2
 800328a:	2500      	movs	r5, #0
 800328c:	42a5      	cmp	r5, r4
 800328e:	d109      	bne.n	80032a4 <__libc_init_array+0x24>
 8003290:	4e0b      	ldr	r6, [pc, #44]	; (80032c0 <__libc_init_array+0x40>)
 8003292:	4c0c      	ldr	r4, [pc, #48]	; (80032c4 <__libc_init_array+0x44>)
 8003294:	f000 fc26 	bl	8003ae4 <_init>
 8003298:	1ba4      	subs	r4, r4, r6
 800329a:	10a4      	asrs	r4, r4, #2
 800329c:	2500      	movs	r5, #0
 800329e:	42a5      	cmp	r5, r4
 80032a0:	d105      	bne.n	80032ae <__libc_init_array+0x2e>
 80032a2:	bd70      	pop	{r4, r5, r6, pc}
 80032a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032a8:	4798      	blx	r3
 80032aa:	3501      	adds	r5, #1
 80032ac:	e7ee      	b.n	800328c <__libc_init_array+0xc>
 80032ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032b2:	4798      	blx	r3
 80032b4:	3501      	adds	r5, #1
 80032b6:	e7f2      	b.n	800329e <__libc_init_array+0x1e>
 80032b8:	08003b60 	.word	0x08003b60
 80032bc:	08003b60 	.word	0x08003b60
 80032c0:	08003b60 	.word	0x08003b60
 80032c4:	08003b64 	.word	0x08003b64

080032c8 <memset>:
 80032c8:	4402      	add	r2, r0
 80032ca:	4603      	mov	r3, r0
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d100      	bne.n	80032d2 <memset+0xa>
 80032d0:	4770      	bx	lr
 80032d2:	f803 1b01 	strb.w	r1, [r3], #1
 80032d6:	e7f9      	b.n	80032cc <memset+0x4>

080032d8 <siprintf>:
 80032d8:	b40e      	push	{r1, r2, r3}
 80032da:	b500      	push	{lr}
 80032dc:	b09c      	sub	sp, #112	; 0x70
 80032de:	ab1d      	add	r3, sp, #116	; 0x74
 80032e0:	9002      	str	r0, [sp, #8]
 80032e2:	9006      	str	r0, [sp, #24]
 80032e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032e8:	4809      	ldr	r0, [pc, #36]	; (8003310 <siprintf+0x38>)
 80032ea:	9107      	str	r1, [sp, #28]
 80032ec:	9104      	str	r1, [sp, #16]
 80032ee:	4909      	ldr	r1, [pc, #36]	; (8003314 <siprintf+0x3c>)
 80032f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80032f4:	9105      	str	r1, [sp, #20]
 80032f6:	6800      	ldr	r0, [r0, #0]
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	a902      	add	r1, sp, #8
 80032fc:	f000 f866 	bl	80033cc <_svfiprintf_r>
 8003300:	9b02      	ldr	r3, [sp, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	b01c      	add	sp, #112	; 0x70
 8003308:	f85d eb04 	ldr.w	lr, [sp], #4
 800330c:	b003      	add	sp, #12
 800330e:	4770      	bx	lr
 8003310:	2000000c 	.word	0x2000000c
 8003314:	ffff0208 	.word	0xffff0208

08003318 <__ssputs_r>:
 8003318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800331c:	688e      	ldr	r6, [r1, #8]
 800331e:	429e      	cmp	r6, r3
 8003320:	4682      	mov	sl, r0
 8003322:	460c      	mov	r4, r1
 8003324:	4690      	mov	r8, r2
 8003326:	4699      	mov	r9, r3
 8003328:	d837      	bhi.n	800339a <__ssputs_r+0x82>
 800332a:	898a      	ldrh	r2, [r1, #12]
 800332c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003330:	d031      	beq.n	8003396 <__ssputs_r+0x7e>
 8003332:	6825      	ldr	r5, [r4, #0]
 8003334:	6909      	ldr	r1, [r1, #16]
 8003336:	1a6f      	subs	r7, r5, r1
 8003338:	6965      	ldr	r5, [r4, #20]
 800333a:	2302      	movs	r3, #2
 800333c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003340:	fb95 f5f3 	sdiv	r5, r5, r3
 8003344:	f109 0301 	add.w	r3, r9, #1
 8003348:	443b      	add	r3, r7
 800334a:	429d      	cmp	r5, r3
 800334c:	bf38      	it	cc
 800334e:	461d      	movcc	r5, r3
 8003350:	0553      	lsls	r3, r2, #21
 8003352:	d530      	bpl.n	80033b6 <__ssputs_r+0x9e>
 8003354:	4629      	mov	r1, r5
 8003356:	f000 fb2b 	bl	80039b0 <_malloc_r>
 800335a:	4606      	mov	r6, r0
 800335c:	b950      	cbnz	r0, 8003374 <__ssputs_r+0x5c>
 800335e:	230c      	movs	r3, #12
 8003360:	f8ca 3000 	str.w	r3, [sl]
 8003364:	89a3      	ldrh	r3, [r4, #12]
 8003366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336a:	81a3      	strh	r3, [r4, #12]
 800336c:	f04f 30ff 	mov.w	r0, #4294967295
 8003370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003374:	463a      	mov	r2, r7
 8003376:	6921      	ldr	r1, [r4, #16]
 8003378:	f000 faa8 	bl	80038cc <memcpy>
 800337c:	89a3      	ldrh	r3, [r4, #12]
 800337e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003386:	81a3      	strh	r3, [r4, #12]
 8003388:	6126      	str	r6, [r4, #16]
 800338a:	6165      	str	r5, [r4, #20]
 800338c:	443e      	add	r6, r7
 800338e:	1bed      	subs	r5, r5, r7
 8003390:	6026      	str	r6, [r4, #0]
 8003392:	60a5      	str	r5, [r4, #8]
 8003394:	464e      	mov	r6, r9
 8003396:	454e      	cmp	r6, r9
 8003398:	d900      	bls.n	800339c <__ssputs_r+0x84>
 800339a:	464e      	mov	r6, r9
 800339c:	4632      	mov	r2, r6
 800339e:	4641      	mov	r1, r8
 80033a0:	6820      	ldr	r0, [r4, #0]
 80033a2:	f000 fa9e 	bl	80038e2 <memmove>
 80033a6:	68a3      	ldr	r3, [r4, #8]
 80033a8:	1b9b      	subs	r3, r3, r6
 80033aa:	60a3      	str	r3, [r4, #8]
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	441e      	add	r6, r3
 80033b0:	6026      	str	r6, [r4, #0]
 80033b2:	2000      	movs	r0, #0
 80033b4:	e7dc      	b.n	8003370 <__ssputs_r+0x58>
 80033b6:	462a      	mov	r2, r5
 80033b8:	f000 fb54 	bl	8003a64 <_realloc_r>
 80033bc:	4606      	mov	r6, r0
 80033be:	2800      	cmp	r0, #0
 80033c0:	d1e2      	bne.n	8003388 <__ssputs_r+0x70>
 80033c2:	6921      	ldr	r1, [r4, #16]
 80033c4:	4650      	mov	r0, sl
 80033c6:	f000 faa5 	bl	8003914 <_free_r>
 80033ca:	e7c8      	b.n	800335e <__ssputs_r+0x46>

080033cc <_svfiprintf_r>:
 80033cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033d0:	461d      	mov	r5, r3
 80033d2:	898b      	ldrh	r3, [r1, #12]
 80033d4:	061f      	lsls	r7, r3, #24
 80033d6:	b09d      	sub	sp, #116	; 0x74
 80033d8:	4680      	mov	r8, r0
 80033da:	460c      	mov	r4, r1
 80033dc:	4616      	mov	r6, r2
 80033de:	d50f      	bpl.n	8003400 <_svfiprintf_r+0x34>
 80033e0:	690b      	ldr	r3, [r1, #16]
 80033e2:	b96b      	cbnz	r3, 8003400 <_svfiprintf_r+0x34>
 80033e4:	2140      	movs	r1, #64	; 0x40
 80033e6:	f000 fae3 	bl	80039b0 <_malloc_r>
 80033ea:	6020      	str	r0, [r4, #0]
 80033ec:	6120      	str	r0, [r4, #16]
 80033ee:	b928      	cbnz	r0, 80033fc <_svfiprintf_r+0x30>
 80033f0:	230c      	movs	r3, #12
 80033f2:	f8c8 3000 	str.w	r3, [r8]
 80033f6:	f04f 30ff 	mov.w	r0, #4294967295
 80033fa:	e0c8      	b.n	800358e <_svfiprintf_r+0x1c2>
 80033fc:	2340      	movs	r3, #64	; 0x40
 80033fe:	6163      	str	r3, [r4, #20]
 8003400:	2300      	movs	r3, #0
 8003402:	9309      	str	r3, [sp, #36]	; 0x24
 8003404:	2320      	movs	r3, #32
 8003406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800340a:	2330      	movs	r3, #48	; 0x30
 800340c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003410:	9503      	str	r5, [sp, #12]
 8003412:	f04f 0b01 	mov.w	fp, #1
 8003416:	4637      	mov	r7, r6
 8003418:	463d      	mov	r5, r7
 800341a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800341e:	b10b      	cbz	r3, 8003424 <_svfiprintf_r+0x58>
 8003420:	2b25      	cmp	r3, #37	; 0x25
 8003422:	d13e      	bne.n	80034a2 <_svfiprintf_r+0xd6>
 8003424:	ebb7 0a06 	subs.w	sl, r7, r6
 8003428:	d00b      	beq.n	8003442 <_svfiprintf_r+0x76>
 800342a:	4653      	mov	r3, sl
 800342c:	4632      	mov	r2, r6
 800342e:	4621      	mov	r1, r4
 8003430:	4640      	mov	r0, r8
 8003432:	f7ff ff71 	bl	8003318 <__ssputs_r>
 8003436:	3001      	adds	r0, #1
 8003438:	f000 80a4 	beq.w	8003584 <_svfiprintf_r+0x1b8>
 800343c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800343e:	4453      	add	r3, sl
 8003440:	9309      	str	r3, [sp, #36]	; 0x24
 8003442:	783b      	ldrb	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 809d 	beq.w	8003584 <_svfiprintf_r+0x1b8>
 800344a:	2300      	movs	r3, #0
 800344c:	f04f 32ff 	mov.w	r2, #4294967295
 8003450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003454:	9304      	str	r3, [sp, #16]
 8003456:	9307      	str	r3, [sp, #28]
 8003458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800345c:	931a      	str	r3, [sp, #104]	; 0x68
 800345e:	462f      	mov	r7, r5
 8003460:	2205      	movs	r2, #5
 8003462:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003466:	4850      	ldr	r0, [pc, #320]	; (80035a8 <_svfiprintf_r+0x1dc>)
 8003468:	f7fc fec2 	bl	80001f0 <memchr>
 800346c:	9b04      	ldr	r3, [sp, #16]
 800346e:	b9d0      	cbnz	r0, 80034a6 <_svfiprintf_r+0xda>
 8003470:	06d9      	lsls	r1, r3, #27
 8003472:	bf44      	itt	mi
 8003474:	2220      	movmi	r2, #32
 8003476:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800347a:	071a      	lsls	r2, r3, #28
 800347c:	bf44      	itt	mi
 800347e:	222b      	movmi	r2, #43	; 0x2b
 8003480:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003484:	782a      	ldrb	r2, [r5, #0]
 8003486:	2a2a      	cmp	r2, #42	; 0x2a
 8003488:	d015      	beq.n	80034b6 <_svfiprintf_r+0xea>
 800348a:	9a07      	ldr	r2, [sp, #28]
 800348c:	462f      	mov	r7, r5
 800348e:	2000      	movs	r0, #0
 8003490:	250a      	movs	r5, #10
 8003492:	4639      	mov	r1, r7
 8003494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003498:	3b30      	subs	r3, #48	; 0x30
 800349a:	2b09      	cmp	r3, #9
 800349c:	d94d      	bls.n	800353a <_svfiprintf_r+0x16e>
 800349e:	b1b8      	cbz	r0, 80034d0 <_svfiprintf_r+0x104>
 80034a0:	e00f      	b.n	80034c2 <_svfiprintf_r+0xf6>
 80034a2:	462f      	mov	r7, r5
 80034a4:	e7b8      	b.n	8003418 <_svfiprintf_r+0x4c>
 80034a6:	4a40      	ldr	r2, [pc, #256]	; (80035a8 <_svfiprintf_r+0x1dc>)
 80034a8:	1a80      	subs	r0, r0, r2
 80034aa:	fa0b f000 	lsl.w	r0, fp, r0
 80034ae:	4318      	orrs	r0, r3
 80034b0:	9004      	str	r0, [sp, #16]
 80034b2:	463d      	mov	r5, r7
 80034b4:	e7d3      	b.n	800345e <_svfiprintf_r+0x92>
 80034b6:	9a03      	ldr	r2, [sp, #12]
 80034b8:	1d11      	adds	r1, r2, #4
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	9103      	str	r1, [sp, #12]
 80034be:	2a00      	cmp	r2, #0
 80034c0:	db01      	blt.n	80034c6 <_svfiprintf_r+0xfa>
 80034c2:	9207      	str	r2, [sp, #28]
 80034c4:	e004      	b.n	80034d0 <_svfiprintf_r+0x104>
 80034c6:	4252      	negs	r2, r2
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	9207      	str	r2, [sp, #28]
 80034ce:	9304      	str	r3, [sp, #16]
 80034d0:	783b      	ldrb	r3, [r7, #0]
 80034d2:	2b2e      	cmp	r3, #46	; 0x2e
 80034d4:	d10c      	bne.n	80034f0 <_svfiprintf_r+0x124>
 80034d6:	787b      	ldrb	r3, [r7, #1]
 80034d8:	2b2a      	cmp	r3, #42	; 0x2a
 80034da:	d133      	bne.n	8003544 <_svfiprintf_r+0x178>
 80034dc:	9b03      	ldr	r3, [sp, #12]
 80034de:	1d1a      	adds	r2, r3, #4
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	9203      	str	r2, [sp, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bfb8      	it	lt
 80034e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80034ec:	3702      	adds	r7, #2
 80034ee:	9305      	str	r3, [sp, #20]
 80034f0:	4d2e      	ldr	r5, [pc, #184]	; (80035ac <_svfiprintf_r+0x1e0>)
 80034f2:	7839      	ldrb	r1, [r7, #0]
 80034f4:	2203      	movs	r2, #3
 80034f6:	4628      	mov	r0, r5
 80034f8:	f7fc fe7a 	bl	80001f0 <memchr>
 80034fc:	b138      	cbz	r0, 800350e <_svfiprintf_r+0x142>
 80034fe:	2340      	movs	r3, #64	; 0x40
 8003500:	1b40      	subs	r0, r0, r5
 8003502:	fa03 f000 	lsl.w	r0, r3, r0
 8003506:	9b04      	ldr	r3, [sp, #16]
 8003508:	4303      	orrs	r3, r0
 800350a:	3701      	adds	r7, #1
 800350c:	9304      	str	r3, [sp, #16]
 800350e:	7839      	ldrb	r1, [r7, #0]
 8003510:	4827      	ldr	r0, [pc, #156]	; (80035b0 <_svfiprintf_r+0x1e4>)
 8003512:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003516:	2206      	movs	r2, #6
 8003518:	1c7e      	adds	r6, r7, #1
 800351a:	f7fc fe69 	bl	80001f0 <memchr>
 800351e:	2800      	cmp	r0, #0
 8003520:	d038      	beq.n	8003594 <_svfiprintf_r+0x1c8>
 8003522:	4b24      	ldr	r3, [pc, #144]	; (80035b4 <_svfiprintf_r+0x1e8>)
 8003524:	bb13      	cbnz	r3, 800356c <_svfiprintf_r+0x1a0>
 8003526:	9b03      	ldr	r3, [sp, #12]
 8003528:	3307      	adds	r3, #7
 800352a:	f023 0307 	bic.w	r3, r3, #7
 800352e:	3308      	adds	r3, #8
 8003530:	9303      	str	r3, [sp, #12]
 8003532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003534:	444b      	add	r3, r9
 8003536:	9309      	str	r3, [sp, #36]	; 0x24
 8003538:	e76d      	b.n	8003416 <_svfiprintf_r+0x4a>
 800353a:	fb05 3202 	mla	r2, r5, r2, r3
 800353e:	2001      	movs	r0, #1
 8003540:	460f      	mov	r7, r1
 8003542:	e7a6      	b.n	8003492 <_svfiprintf_r+0xc6>
 8003544:	2300      	movs	r3, #0
 8003546:	3701      	adds	r7, #1
 8003548:	9305      	str	r3, [sp, #20]
 800354a:	4619      	mov	r1, r3
 800354c:	250a      	movs	r5, #10
 800354e:	4638      	mov	r0, r7
 8003550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003554:	3a30      	subs	r2, #48	; 0x30
 8003556:	2a09      	cmp	r2, #9
 8003558:	d903      	bls.n	8003562 <_svfiprintf_r+0x196>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0c8      	beq.n	80034f0 <_svfiprintf_r+0x124>
 800355e:	9105      	str	r1, [sp, #20]
 8003560:	e7c6      	b.n	80034f0 <_svfiprintf_r+0x124>
 8003562:	fb05 2101 	mla	r1, r5, r1, r2
 8003566:	2301      	movs	r3, #1
 8003568:	4607      	mov	r7, r0
 800356a:	e7f0      	b.n	800354e <_svfiprintf_r+0x182>
 800356c:	ab03      	add	r3, sp, #12
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4622      	mov	r2, r4
 8003572:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <_svfiprintf_r+0x1ec>)
 8003574:	a904      	add	r1, sp, #16
 8003576:	4640      	mov	r0, r8
 8003578:	f3af 8000 	nop.w
 800357c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003580:	4681      	mov	r9, r0
 8003582:	d1d6      	bne.n	8003532 <_svfiprintf_r+0x166>
 8003584:	89a3      	ldrh	r3, [r4, #12]
 8003586:	065b      	lsls	r3, r3, #25
 8003588:	f53f af35 	bmi.w	80033f6 <_svfiprintf_r+0x2a>
 800358c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800358e:	b01d      	add	sp, #116	; 0x74
 8003590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003594:	ab03      	add	r3, sp, #12
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	4622      	mov	r2, r4
 800359a:	4b07      	ldr	r3, [pc, #28]	; (80035b8 <_svfiprintf_r+0x1ec>)
 800359c:	a904      	add	r1, sp, #16
 800359e:	4640      	mov	r0, r8
 80035a0:	f000 f882 	bl	80036a8 <_printf_i>
 80035a4:	e7ea      	b.n	800357c <_svfiprintf_r+0x1b0>
 80035a6:	bf00      	nop
 80035a8:	08003b24 	.word	0x08003b24
 80035ac:	08003b2a 	.word	0x08003b2a
 80035b0:	08003b2e 	.word	0x08003b2e
 80035b4:	00000000 	.word	0x00000000
 80035b8:	08003319 	.word	0x08003319

080035bc <_printf_common>:
 80035bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c0:	4691      	mov	r9, r2
 80035c2:	461f      	mov	r7, r3
 80035c4:	688a      	ldr	r2, [r1, #8]
 80035c6:	690b      	ldr	r3, [r1, #16]
 80035c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035cc:	4293      	cmp	r3, r2
 80035ce:	bfb8      	it	lt
 80035d0:	4613      	movlt	r3, r2
 80035d2:	f8c9 3000 	str.w	r3, [r9]
 80035d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035da:	4606      	mov	r6, r0
 80035dc:	460c      	mov	r4, r1
 80035de:	b112      	cbz	r2, 80035e6 <_printf_common+0x2a>
 80035e0:	3301      	adds	r3, #1
 80035e2:	f8c9 3000 	str.w	r3, [r9]
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	0699      	lsls	r1, r3, #26
 80035ea:	bf42      	ittt	mi
 80035ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80035f0:	3302      	addmi	r3, #2
 80035f2:	f8c9 3000 	strmi.w	r3, [r9]
 80035f6:	6825      	ldr	r5, [r4, #0]
 80035f8:	f015 0506 	ands.w	r5, r5, #6
 80035fc:	d107      	bne.n	800360e <_printf_common+0x52>
 80035fe:	f104 0a19 	add.w	sl, r4, #25
 8003602:	68e3      	ldr	r3, [r4, #12]
 8003604:	f8d9 2000 	ldr.w	r2, [r9]
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	42ab      	cmp	r3, r5
 800360c:	dc28      	bgt.n	8003660 <_printf_common+0xa4>
 800360e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	3300      	adds	r3, #0
 8003616:	bf18      	it	ne
 8003618:	2301      	movne	r3, #1
 800361a:	0692      	lsls	r2, r2, #26
 800361c:	d42d      	bmi.n	800367a <_printf_common+0xbe>
 800361e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003622:	4639      	mov	r1, r7
 8003624:	4630      	mov	r0, r6
 8003626:	47c0      	blx	r8
 8003628:	3001      	adds	r0, #1
 800362a:	d020      	beq.n	800366e <_printf_common+0xb2>
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	68e5      	ldr	r5, [r4, #12]
 8003630:	f8d9 2000 	ldr.w	r2, [r9]
 8003634:	f003 0306 	and.w	r3, r3, #6
 8003638:	2b04      	cmp	r3, #4
 800363a:	bf08      	it	eq
 800363c:	1aad      	subeq	r5, r5, r2
 800363e:	68a3      	ldr	r3, [r4, #8]
 8003640:	6922      	ldr	r2, [r4, #16]
 8003642:	bf0c      	ite	eq
 8003644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003648:	2500      	movne	r5, #0
 800364a:	4293      	cmp	r3, r2
 800364c:	bfc4      	itt	gt
 800364e:	1a9b      	subgt	r3, r3, r2
 8003650:	18ed      	addgt	r5, r5, r3
 8003652:	f04f 0900 	mov.w	r9, #0
 8003656:	341a      	adds	r4, #26
 8003658:	454d      	cmp	r5, r9
 800365a:	d11a      	bne.n	8003692 <_printf_common+0xd6>
 800365c:	2000      	movs	r0, #0
 800365e:	e008      	b.n	8003672 <_printf_common+0xb6>
 8003660:	2301      	movs	r3, #1
 8003662:	4652      	mov	r2, sl
 8003664:	4639      	mov	r1, r7
 8003666:	4630      	mov	r0, r6
 8003668:	47c0      	blx	r8
 800366a:	3001      	adds	r0, #1
 800366c:	d103      	bne.n	8003676 <_printf_common+0xba>
 800366e:	f04f 30ff 	mov.w	r0, #4294967295
 8003672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003676:	3501      	adds	r5, #1
 8003678:	e7c3      	b.n	8003602 <_printf_common+0x46>
 800367a:	18e1      	adds	r1, r4, r3
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	2030      	movs	r0, #48	; 0x30
 8003680:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003684:	4422      	add	r2, r4
 8003686:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800368a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800368e:	3302      	adds	r3, #2
 8003690:	e7c5      	b.n	800361e <_printf_common+0x62>
 8003692:	2301      	movs	r3, #1
 8003694:	4622      	mov	r2, r4
 8003696:	4639      	mov	r1, r7
 8003698:	4630      	mov	r0, r6
 800369a:	47c0      	blx	r8
 800369c:	3001      	adds	r0, #1
 800369e:	d0e6      	beq.n	800366e <_printf_common+0xb2>
 80036a0:	f109 0901 	add.w	r9, r9, #1
 80036a4:	e7d8      	b.n	8003658 <_printf_common+0x9c>
	...

080036a8 <_printf_i>:
 80036a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80036b0:	460c      	mov	r4, r1
 80036b2:	7e09      	ldrb	r1, [r1, #24]
 80036b4:	b085      	sub	sp, #20
 80036b6:	296e      	cmp	r1, #110	; 0x6e
 80036b8:	4617      	mov	r7, r2
 80036ba:	4606      	mov	r6, r0
 80036bc:	4698      	mov	r8, r3
 80036be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036c0:	f000 80b3 	beq.w	800382a <_printf_i+0x182>
 80036c4:	d822      	bhi.n	800370c <_printf_i+0x64>
 80036c6:	2963      	cmp	r1, #99	; 0x63
 80036c8:	d036      	beq.n	8003738 <_printf_i+0x90>
 80036ca:	d80a      	bhi.n	80036e2 <_printf_i+0x3a>
 80036cc:	2900      	cmp	r1, #0
 80036ce:	f000 80b9 	beq.w	8003844 <_printf_i+0x19c>
 80036d2:	2958      	cmp	r1, #88	; 0x58
 80036d4:	f000 8083 	beq.w	80037de <_printf_i+0x136>
 80036d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80036e0:	e032      	b.n	8003748 <_printf_i+0xa0>
 80036e2:	2964      	cmp	r1, #100	; 0x64
 80036e4:	d001      	beq.n	80036ea <_printf_i+0x42>
 80036e6:	2969      	cmp	r1, #105	; 0x69
 80036e8:	d1f6      	bne.n	80036d8 <_printf_i+0x30>
 80036ea:	6820      	ldr	r0, [r4, #0]
 80036ec:	6813      	ldr	r3, [r2, #0]
 80036ee:	0605      	lsls	r5, r0, #24
 80036f0:	f103 0104 	add.w	r1, r3, #4
 80036f4:	d52a      	bpl.n	800374c <_printf_i+0xa4>
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6011      	str	r1, [r2, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	da03      	bge.n	8003706 <_printf_i+0x5e>
 80036fe:	222d      	movs	r2, #45	; 0x2d
 8003700:	425b      	negs	r3, r3
 8003702:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003706:	486f      	ldr	r0, [pc, #444]	; (80038c4 <_printf_i+0x21c>)
 8003708:	220a      	movs	r2, #10
 800370a:	e039      	b.n	8003780 <_printf_i+0xd8>
 800370c:	2973      	cmp	r1, #115	; 0x73
 800370e:	f000 809d 	beq.w	800384c <_printf_i+0x1a4>
 8003712:	d808      	bhi.n	8003726 <_printf_i+0x7e>
 8003714:	296f      	cmp	r1, #111	; 0x6f
 8003716:	d020      	beq.n	800375a <_printf_i+0xb2>
 8003718:	2970      	cmp	r1, #112	; 0x70
 800371a:	d1dd      	bne.n	80036d8 <_printf_i+0x30>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	f043 0320 	orr.w	r3, r3, #32
 8003722:	6023      	str	r3, [r4, #0]
 8003724:	e003      	b.n	800372e <_printf_i+0x86>
 8003726:	2975      	cmp	r1, #117	; 0x75
 8003728:	d017      	beq.n	800375a <_printf_i+0xb2>
 800372a:	2978      	cmp	r1, #120	; 0x78
 800372c:	d1d4      	bne.n	80036d8 <_printf_i+0x30>
 800372e:	2378      	movs	r3, #120	; 0x78
 8003730:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003734:	4864      	ldr	r0, [pc, #400]	; (80038c8 <_printf_i+0x220>)
 8003736:	e055      	b.n	80037e4 <_printf_i+0x13c>
 8003738:	6813      	ldr	r3, [r2, #0]
 800373a:	1d19      	adds	r1, r3, #4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6011      	str	r1, [r2, #0]
 8003740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003748:	2301      	movs	r3, #1
 800374a:	e08c      	b.n	8003866 <_printf_i+0x1be>
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6011      	str	r1, [r2, #0]
 8003750:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003754:	bf18      	it	ne
 8003756:	b21b      	sxthne	r3, r3
 8003758:	e7cf      	b.n	80036fa <_printf_i+0x52>
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	6825      	ldr	r5, [r4, #0]
 800375e:	1d18      	adds	r0, r3, #4
 8003760:	6010      	str	r0, [r2, #0]
 8003762:	0628      	lsls	r0, r5, #24
 8003764:	d501      	bpl.n	800376a <_printf_i+0xc2>
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	e002      	b.n	8003770 <_printf_i+0xc8>
 800376a:	0668      	lsls	r0, r5, #25
 800376c:	d5fb      	bpl.n	8003766 <_printf_i+0xbe>
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	4854      	ldr	r0, [pc, #336]	; (80038c4 <_printf_i+0x21c>)
 8003772:	296f      	cmp	r1, #111	; 0x6f
 8003774:	bf14      	ite	ne
 8003776:	220a      	movne	r2, #10
 8003778:	2208      	moveq	r2, #8
 800377a:	2100      	movs	r1, #0
 800377c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003780:	6865      	ldr	r5, [r4, #4]
 8003782:	60a5      	str	r5, [r4, #8]
 8003784:	2d00      	cmp	r5, #0
 8003786:	f2c0 8095 	blt.w	80038b4 <_printf_i+0x20c>
 800378a:	6821      	ldr	r1, [r4, #0]
 800378c:	f021 0104 	bic.w	r1, r1, #4
 8003790:	6021      	str	r1, [r4, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d13d      	bne.n	8003812 <_printf_i+0x16a>
 8003796:	2d00      	cmp	r5, #0
 8003798:	f040 808e 	bne.w	80038b8 <_printf_i+0x210>
 800379c:	4665      	mov	r5, ip
 800379e:	2a08      	cmp	r2, #8
 80037a0:	d10b      	bne.n	80037ba <_printf_i+0x112>
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	07db      	lsls	r3, r3, #31
 80037a6:	d508      	bpl.n	80037ba <_printf_i+0x112>
 80037a8:	6923      	ldr	r3, [r4, #16]
 80037aa:	6862      	ldr	r2, [r4, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	bfde      	ittt	le
 80037b0:	2330      	movle	r3, #48	; 0x30
 80037b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037ba:	ebac 0305 	sub.w	r3, ip, r5
 80037be:	6123      	str	r3, [r4, #16]
 80037c0:	f8cd 8000 	str.w	r8, [sp]
 80037c4:	463b      	mov	r3, r7
 80037c6:	aa03      	add	r2, sp, #12
 80037c8:	4621      	mov	r1, r4
 80037ca:	4630      	mov	r0, r6
 80037cc:	f7ff fef6 	bl	80035bc <_printf_common>
 80037d0:	3001      	adds	r0, #1
 80037d2:	d14d      	bne.n	8003870 <_printf_i+0x1c8>
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	b005      	add	sp, #20
 80037da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037de:	4839      	ldr	r0, [pc, #228]	; (80038c4 <_printf_i+0x21c>)
 80037e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80037e4:	6813      	ldr	r3, [r2, #0]
 80037e6:	6821      	ldr	r1, [r4, #0]
 80037e8:	1d1d      	adds	r5, r3, #4
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6015      	str	r5, [r2, #0]
 80037ee:	060a      	lsls	r2, r1, #24
 80037f0:	d50b      	bpl.n	800380a <_printf_i+0x162>
 80037f2:	07ca      	lsls	r2, r1, #31
 80037f4:	bf44      	itt	mi
 80037f6:	f041 0120 	orrmi.w	r1, r1, #32
 80037fa:	6021      	strmi	r1, [r4, #0]
 80037fc:	b91b      	cbnz	r3, 8003806 <_printf_i+0x15e>
 80037fe:	6822      	ldr	r2, [r4, #0]
 8003800:	f022 0220 	bic.w	r2, r2, #32
 8003804:	6022      	str	r2, [r4, #0]
 8003806:	2210      	movs	r2, #16
 8003808:	e7b7      	b.n	800377a <_printf_i+0xd2>
 800380a:	064d      	lsls	r5, r1, #25
 800380c:	bf48      	it	mi
 800380e:	b29b      	uxthmi	r3, r3
 8003810:	e7ef      	b.n	80037f2 <_printf_i+0x14a>
 8003812:	4665      	mov	r5, ip
 8003814:	fbb3 f1f2 	udiv	r1, r3, r2
 8003818:	fb02 3311 	mls	r3, r2, r1, r3
 800381c:	5cc3      	ldrb	r3, [r0, r3]
 800381e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003822:	460b      	mov	r3, r1
 8003824:	2900      	cmp	r1, #0
 8003826:	d1f5      	bne.n	8003814 <_printf_i+0x16c>
 8003828:	e7b9      	b.n	800379e <_printf_i+0xf6>
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	6825      	ldr	r5, [r4, #0]
 800382e:	6961      	ldr	r1, [r4, #20]
 8003830:	1d18      	adds	r0, r3, #4
 8003832:	6010      	str	r0, [r2, #0]
 8003834:	0628      	lsls	r0, r5, #24
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	d501      	bpl.n	800383e <_printf_i+0x196>
 800383a:	6019      	str	r1, [r3, #0]
 800383c:	e002      	b.n	8003844 <_printf_i+0x19c>
 800383e:	066a      	lsls	r2, r5, #25
 8003840:	d5fb      	bpl.n	800383a <_printf_i+0x192>
 8003842:	8019      	strh	r1, [r3, #0]
 8003844:	2300      	movs	r3, #0
 8003846:	6123      	str	r3, [r4, #16]
 8003848:	4665      	mov	r5, ip
 800384a:	e7b9      	b.n	80037c0 <_printf_i+0x118>
 800384c:	6813      	ldr	r3, [r2, #0]
 800384e:	1d19      	adds	r1, r3, #4
 8003850:	6011      	str	r1, [r2, #0]
 8003852:	681d      	ldr	r5, [r3, #0]
 8003854:	6862      	ldr	r2, [r4, #4]
 8003856:	2100      	movs	r1, #0
 8003858:	4628      	mov	r0, r5
 800385a:	f7fc fcc9 	bl	80001f0 <memchr>
 800385e:	b108      	cbz	r0, 8003864 <_printf_i+0x1bc>
 8003860:	1b40      	subs	r0, r0, r5
 8003862:	6060      	str	r0, [r4, #4]
 8003864:	6863      	ldr	r3, [r4, #4]
 8003866:	6123      	str	r3, [r4, #16]
 8003868:	2300      	movs	r3, #0
 800386a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800386e:	e7a7      	b.n	80037c0 <_printf_i+0x118>
 8003870:	6923      	ldr	r3, [r4, #16]
 8003872:	462a      	mov	r2, r5
 8003874:	4639      	mov	r1, r7
 8003876:	4630      	mov	r0, r6
 8003878:	47c0      	blx	r8
 800387a:	3001      	adds	r0, #1
 800387c:	d0aa      	beq.n	80037d4 <_printf_i+0x12c>
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	079b      	lsls	r3, r3, #30
 8003882:	d413      	bmi.n	80038ac <_printf_i+0x204>
 8003884:	68e0      	ldr	r0, [r4, #12]
 8003886:	9b03      	ldr	r3, [sp, #12]
 8003888:	4298      	cmp	r0, r3
 800388a:	bfb8      	it	lt
 800388c:	4618      	movlt	r0, r3
 800388e:	e7a3      	b.n	80037d8 <_printf_i+0x130>
 8003890:	2301      	movs	r3, #1
 8003892:	464a      	mov	r2, r9
 8003894:	4639      	mov	r1, r7
 8003896:	4630      	mov	r0, r6
 8003898:	47c0      	blx	r8
 800389a:	3001      	adds	r0, #1
 800389c:	d09a      	beq.n	80037d4 <_printf_i+0x12c>
 800389e:	3501      	adds	r5, #1
 80038a0:	68e3      	ldr	r3, [r4, #12]
 80038a2:	9a03      	ldr	r2, [sp, #12]
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	42ab      	cmp	r3, r5
 80038a8:	dcf2      	bgt.n	8003890 <_printf_i+0x1e8>
 80038aa:	e7eb      	b.n	8003884 <_printf_i+0x1dc>
 80038ac:	2500      	movs	r5, #0
 80038ae:	f104 0919 	add.w	r9, r4, #25
 80038b2:	e7f5      	b.n	80038a0 <_printf_i+0x1f8>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ac      	bne.n	8003812 <_printf_i+0x16a>
 80038b8:	7803      	ldrb	r3, [r0, #0]
 80038ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038c2:	e76c      	b.n	800379e <_printf_i+0xf6>
 80038c4:	08003b35 	.word	0x08003b35
 80038c8:	08003b46 	.word	0x08003b46

080038cc <memcpy>:
 80038cc:	b510      	push	{r4, lr}
 80038ce:	1e43      	subs	r3, r0, #1
 80038d0:	440a      	add	r2, r1
 80038d2:	4291      	cmp	r1, r2
 80038d4:	d100      	bne.n	80038d8 <memcpy+0xc>
 80038d6:	bd10      	pop	{r4, pc}
 80038d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038e0:	e7f7      	b.n	80038d2 <memcpy+0x6>

080038e2 <memmove>:
 80038e2:	4288      	cmp	r0, r1
 80038e4:	b510      	push	{r4, lr}
 80038e6:	eb01 0302 	add.w	r3, r1, r2
 80038ea:	d807      	bhi.n	80038fc <memmove+0x1a>
 80038ec:	1e42      	subs	r2, r0, #1
 80038ee:	4299      	cmp	r1, r3
 80038f0:	d00a      	beq.n	8003908 <memmove+0x26>
 80038f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80038fa:	e7f8      	b.n	80038ee <memmove+0xc>
 80038fc:	4283      	cmp	r3, r0
 80038fe:	d9f5      	bls.n	80038ec <memmove+0xa>
 8003900:	1881      	adds	r1, r0, r2
 8003902:	1ad2      	subs	r2, r2, r3
 8003904:	42d3      	cmn	r3, r2
 8003906:	d100      	bne.n	800390a <memmove+0x28>
 8003908:	bd10      	pop	{r4, pc}
 800390a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800390e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003912:	e7f7      	b.n	8003904 <memmove+0x22>

08003914 <_free_r>:
 8003914:	b538      	push	{r3, r4, r5, lr}
 8003916:	4605      	mov	r5, r0
 8003918:	2900      	cmp	r1, #0
 800391a:	d045      	beq.n	80039a8 <_free_r+0x94>
 800391c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003920:	1f0c      	subs	r4, r1, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	bfb8      	it	lt
 8003926:	18e4      	addlt	r4, r4, r3
 8003928:	f000 f8d2 	bl	8003ad0 <__malloc_lock>
 800392c:	4a1f      	ldr	r2, [pc, #124]	; (80039ac <_free_r+0x98>)
 800392e:	6813      	ldr	r3, [r2, #0]
 8003930:	4610      	mov	r0, r2
 8003932:	b933      	cbnz	r3, 8003942 <_free_r+0x2e>
 8003934:	6063      	str	r3, [r4, #4]
 8003936:	6014      	str	r4, [r2, #0]
 8003938:	4628      	mov	r0, r5
 800393a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800393e:	f000 b8c8 	b.w	8003ad2 <__malloc_unlock>
 8003942:	42a3      	cmp	r3, r4
 8003944:	d90c      	bls.n	8003960 <_free_r+0x4c>
 8003946:	6821      	ldr	r1, [r4, #0]
 8003948:	1862      	adds	r2, r4, r1
 800394a:	4293      	cmp	r3, r2
 800394c:	bf04      	itt	eq
 800394e:	681a      	ldreq	r2, [r3, #0]
 8003950:	685b      	ldreq	r3, [r3, #4]
 8003952:	6063      	str	r3, [r4, #4]
 8003954:	bf04      	itt	eq
 8003956:	1852      	addeq	r2, r2, r1
 8003958:	6022      	streq	r2, [r4, #0]
 800395a:	6004      	str	r4, [r0, #0]
 800395c:	e7ec      	b.n	8003938 <_free_r+0x24>
 800395e:	4613      	mov	r3, r2
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	b10a      	cbz	r2, 8003968 <_free_r+0x54>
 8003964:	42a2      	cmp	r2, r4
 8003966:	d9fa      	bls.n	800395e <_free_r+0x4a>
 8003968:	6819      	ldr	r1, [r3, #0]
 800396a:	1858      	adds	r0, r3, r1
 800396c:	42a0      	cmp	r0, r4
 800396e:	d10b      	bne.n	8003988 <_free_r+0x74>
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	4401      	add	r1, r0
 8003974:	1858      	adds	r0, r3, r1
 8003976:	4282      	cmp	r2, r0
 8003978:	6019      	str	r1, [r3, #0]
 800397a:	d1dd      	bne.n	8003938 <_free_r+0x24>
 800397c:	6810      	ldr	r0, [r2, #0]
 800397e:	6852      	ldr	r2, [r2, #4]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	4401      	add	r1, r0
 8003984:	6019      	str	r1, [r3, #0]
 8003986:	e7d7      	b.n	8003938 <_free_r+0x24>
 8003988:	d902      	bls.n	8003990 <_free_r+0x7c>
 800398a:	230c      	movs	r3, #12
 800398c:	602b      	str	r3, [r5, #0]
 800398e:	e7d3      	b.n	8003938 <_free_r+0x24>
 8003990:	6820      	ldr	r0, [r4, #0]
 8003992:	1821      	adds	r1, r4, r0
 8003994:	428a      	cmp	r2, r1
 8003996:	bf04      	itt	eq
 8003998:	6811      	ldreq	r1, [r2, #0]
 800399a:	6852      	ldreq	r2, [r2, #4]
 800399c:	6062      	str	r2, [r4, #4]
 800399e:	bf04      	itt	eq
 80039a0:	1809      	addeq	r1, r1, r0
 80039a2:	6021      	streq	r1, [r4, #0]
 80039a4:	605c      	str	r4, [r3, #4]
 80039a6:	e7c7      	b.n	8003938 <_free_r+0x24>
 80039a8:	bd38      	pop	{r3, r4, r5, pc}
 80039aa:	bf00      	nop
 80039ac:	20000090 	.word	0x20000090

080039b0 <_malloc_r>:
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	1ccd      	adds	r5, r1, #3
 80039b4:	f025 0503 	bic.w	r5, r5, #3
 80039b8:	3508      	adds	r5, #8
 80039ba:	2d0c      	cmp	r5, #12
 80039bc:	bf38      	it	cc
 80039be:	250c      	movcc	r5, #12
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	4606      	mov	r6, r0
 80039c4:	db01      	blt.n	80039ca <_malloc_r+0x1a>
 80039c6:	42a9      	cmp	r1, r5
 80039c8:	d903      	bls.n	80039d2 <_malloc_r+0x22>
 80039ca:	230c      	movs	r3, #12
 80039cc:	6033      	str	r3, [r6, #0]
 80039ce:	2000      	movs	r0, #0
 80039d0:	bd70      	pop	{r4, r5, r6, pc}
 80039d2:	f000 f87d 	bl	8003ad0 <__malloc_lock>
 80039d6:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <_malloc_r+0xac>)
 80039d8:	6814      	ldr	r4, [r2, #0]
 80039da:	4621      	mov	r1, r4
 80039dc:	b991      	cbnz	r1, 8003a04 <_malloc_r+0x54>
 80039de:	4c20      	ldr	r4, [pc, #128]	; (8003a60 <_malloc_r+0xb0>)
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	b91b      	cbnz	r3, 80039ec <_malloc_r+0x3c>
 80039e4:	4630      	mov	r0, r6
 80039e6:	f000 f863 	bl	8003ab0 <_sbrk_r>
 80039ea:	6020      	str	r0, [r4, #0]
 80039ec:	4629      	mov	r1, r5
 80039ee:	4630      	mov	r0, r6
 80039f0:	f000 f85e 	bl	8003ab0 <_sbrk_r>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d124      	bne.n	8003a42 <_malloc_r+0x92>
 80039f8:	230c      	movs	r3, #12
 80039fa:	6033      	str	r3, [r6, #0]
 80039fc:	4630      	mov	r0, r6
 80039fe:	f000 f868 	bl	8003ad2 <__malloc_unlock>
 8003a02:	e7e4      	b.n	80039ce <_malloc_r+0x1e>
 8003a04:	680b      	ldr	r3, [r1, #0]
 8003a06:	1b5b      	subs	r3, r3, r5
 8003a08:	d418      	bmi.n	8003a3c <_malloc_r+0x8c>
 8003a0a:	2b0b      	cmp	r3, #11
 8003a0c:	d90f      	bls.n	8003a2e <_malloc_r+0x7e>
 8003a0e:	600b      	str	r3, [r1, #0]
 8003a10:	50cd      	str	r5, [r1, r3]
 8003a12:	18cc      	adds	r4, r1, r3
 8003a14:	4630      	mov	r0, r6
 8003a16:	f000 f85c 	bl	8003ad2 <__malloc_unlock>
 8003a1a:	f104 000b 	add.w	r0, r4, #11
 8003a1e:	1d23      	adds	r3, r4, #4
 8003a20:	f020 0007 	bic.w	r0, r0, #7
 8003a24:	1ac3      	subs	r3, r0, r3
 8003a26:	d0d3      	beq.n	80039d0 <_malloc_r+0x20>
 8003a28:	425a      	negs	r2, r3
 8003a2a:	50e2      	str	r2, [r4, r3]
 8003a2c:	e7d0      	b.n	80039d0 <_malloc_r+0x20>
 8003a2e:	428c      	cmp	r4, r1
 8003a30:	684b      	ldr	r3, [r1, #4]
 8003a32:	bf16      	itet	ne
 8003a34:	6063      	strne	r3, [r4, #4]
 8003a36:	6013      	streq	r3, [r2, #0]
 8003a38:	460c      	movne	r4, r1
 8003a3a:	e7eb      	b.n	8003a14 <_malloc_r+0x64>
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	6849      	ldr	r1, [r1, #4]
 8003a40:	e7cc      	b.n	80039dc <_malloc_r+0x2c>
 8003a42:	1cc4      	adds	r4, r0, #3
 8003a44:	f024 0403 	bic.w	r4, r4, #3
 8003a48:	42a0      	cmp	r0, r4
 8003a4a:	d005      	beq.n	8003a58 <_malloc_r+0xa8>
 8003a4c:	1a21      	subs	r1, r4, r0
 8003a4e:	4630      	mov	r0, r6
 8003a50:	f000 f82e 	bl	8003ab0 <_sbrk_r>
 8003a54:	3001      	adds	r0, #1
 8003a56:	d0cf      	beq.n	80039f8 <_malloc_r+0x48>
 8003a58:	6025      	str	r5, [r4, #0]
 8003a5a:	e7db      	b.n	8003a14 <_malloc_r+0x64>
 8003a5c:	20000090 	.word	0x20000090
 8003a60:	20000094 	.word	0x20000094

08003a64 <_realloc_r>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	4607      	mov	r7, r0
 8003a68:	4614      	mov	r4, r2
 8003a6a:	460e      	mov	r6, r1
 8003a6c:	b921      	cbnz	r1, 8003a78 <_realloc_r+0x14>
 8003a6e:	4611      	mov	r1, r2
 8003a70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a74:	f7ff bf9c 	b.w	80039b0 <_malloc_r>
 8003a78:	b922      	cbnz	r2, 8003a84 <_realloc_r+0x20>
 8003a7a:	f7ff ff4b 	bl	8003914 <_free_r>
 8003a7e:	4625      	mov	r5, r4
 8003a80:	4628      	mov	r0, r5
 8003a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a84:	f000 f826 	bl	8003ad4 <_malloc_usable_size_r>
 8003a88:	42a0      	cmp	r0, r4
 8003a8a:	d20f      	bcs.n	8003aac <_realloc_r+0x48>
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	4638      	mov	r0, r7
 8003a90:	f7ff ff8e 	bl	80039b0 <_malloc_r>
 8003a94:	4605      	mov	r5, r0
 8003a96:	2800      	cmp	r0, #0
 8003a98:	d0f2      	beq.n	8003a80 <_realloc_r+0x1c>
 8003a9a:	4631      	mov	r1, r6
 8003a9c:	4622      	mov	r2, r4
 8003a9e:	f7ff ff15 	bl	80038cc <memcpy>
 8003aa2:	4631      	mov	r1, r6
 8003aa4:	4638      	mov	r0, r7
 8003aa6:	f7ff ff35 	bl	8003914 <_free_r>
 8003aaa:	e7e9      	b.n	8003a80 <_realloc_r+0x1c>
 8003aac:	4635      	mov	r5, r6
 8003aae:	e7e7      	b.n	8003a80 <_realloc_r+0x1c>

08003ab0 <_sbrk_r>:
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	4c06      	ldr	r4, [pc, #24]	; (8003acc <_sbrk_r+0x1c>)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	4608      	mov	r0, r1
 8003aba:	6023      	str	r3, [r4, #0]
 8003abc:	f7ff fb4e 	bl	800315c <_sbrk>
 8003ac0:	1c43      	adds	r3, r0, #1
 8003ac2:	d102      	bne.n	8003aca <_sbrk_r+0x1a>
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	b103      	cbz	r3, 8003aca <_sbrk_r+0x1a>
 8003ac8:	602b      	str	r3, [r5, #0]
 8003aca:	bd38      	pop	{r3, r4, r5, pc}
 8003acc:	20000168 	.word	0x20000168

08003ad0 <__malloc_lock>:
 8003ad0:	4770      	bx	lr

08003ad2 <__malloc_unlock>:
 8003ad2:	4770      	bx	lr

08003ad4 <_malloc_usable_size_r>:
 8003ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ad8:	1f18      	subs	r0, r3, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bfbc      	itt	lt
 8003ade:	580b      	ldrlt	r3, [r1, r0]
 8003ae0:	18c0      	addlt	r0, r0, r3
 8003ae2:	4770      	bx	lr

08003ae4 <_init>:
 8003ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae6:	bf00      	nop
 8003ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aea:	bc08      	pop	{r3}
 8003aec:	469e      	mov	lr, r3
 8003aee:	4770      	bx	lr

08003af0 <_fini>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	bf00      	nop
 8003af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af6:	bc08      	pop	{r3}
 8003af8:	469e      	mov	lr, r3
 8003afa:	4770      	bx	lr
