
11_flash_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e98  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004048  08004048  00014048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c0  080040c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040c8  080040c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  2000000c  080040dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  080040dc  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cace  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002014  00000000  00000000  0002cb0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  0002eb20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  0002f738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023542  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098f9  00000000  00000000  0005379a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7d67  00000000  00000000  0005d093  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134dfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003234  00000000  00000000  00134e78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004030 	.word	0x08004030

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08004030 	.word	0x08004030

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <HAL_Init+0x40>)
 80004fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <HAL_Init+0x40>)
 8000506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800050a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_Init+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <HAL_Init+0x40>)
 8000512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f94d 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	2000      	movs	r0, #0
 8000520:	f000 f808 	bl	8000534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000524:	f003 fb28 	bl	8003b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x54>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_InitTick+0x58>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	fbb3 f3f1 	udiv	r3, r3, r1
 800054e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f965 	bl	8000822 <HAL_SYSTICK_Config>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e00e      	b.n	8000580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80a      	bhi.n	800057e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	f04f 30ff 	mov.w	r0, #4294967295
 8000570:	f000 f92d 	bl	80007ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <HAL_InitTick+0x5c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000008 	.word	0x20000008
 800058c:	20000004 	.word	0x20000004
 8000590:	20000000 	.word	0x20000000

08000594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x20>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_IncTick+0x24>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_IncTick+0x24>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000004 	.word	0x20000004
 80005b8:	20000054 	.word	0x20000054

080005bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return uwTick;
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <HAL_GetTick+0x14>)
 80005c2:	681b      	ldr	r3, [r3, #0]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000054 	.word	0x20000054

080005d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005dc:	f7ff ffee 	bl	80005bc <HAL_GetTick>
 80005e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ec:	d005      	beq.n	80005fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_Delay+0x40>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	461a      	mov	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005fa:	bf00      	nop
 80005fc:	f7ff ffde 	bl	80005bc <HAL_GetTick>
 8000600:	4602      	mov	r2, r0
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	429a      	cmp	r2, r3
 800060a:	d8f7      	bhi.n	80005fc <HAL_Delay+0x28>
  {
  }
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000004 	.word	0x20000004

08000618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	60d3      	str	r3, [r2, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <__NVIC_GetPriorityGrouping+0x18>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	f003 0307 	and.w	r3, r3, #7
}
 800066e:	4618      	mov	r0, r3
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	2b00      	cmp	r3, #0
 800068c:	db0b      	blt.n	80006a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f003 021f 	and.w	r2, r3, #31
 8000694:	4907      	ldr	r1, [pc, #28]	; (80006b4 <__NVIC_EnableIRQ+0x38>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	095b      	lsrs	r3, r3, #5
 800069c:	2001      	movs	r0, #1
 800069e:	fa00 f202 	lsl.w	r2, r0, r2
 80006a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	; (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000784:	d301      	bcc.n	800078a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2301      	movs	r3, #1
 8000788:	e00f      	b.n	80007aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <SysTick_Config+0x40>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000792:	210f      	movs	r1, #15
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f7ff ff8e 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SysTick_Config+0x40>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SysTick_Config+0x40>)
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	e000e010 	.word	0xe000e010

080007b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff29 	bl	8000618 <__NVIC_SetPriorityGrouping>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff3e 	bl	8000660 <__NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff8e 	bl	800070c <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff5d 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff31 	bl	800067c <__NVIC_EnableIRQ>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff ffa2 	bl	8000774 <SysTick_Config>
 8000830:	4603      	mov	r3, r0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b02      	cmp	r3, #2
 800084c:	d004      	beq.n	8000858 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	e00c      	b.n	8000872 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2205      	movs	r2, #5
 800085c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f022 0201 	bic.w	r2, r2, #1
 800086e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000890:	4baa      	ldr	r3, [pc, #680]	; (8000b3c <HAL_ETH_Init+0x2bc>)
 8000892:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d101      	bne.n	80008a6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e185      	b.n	8000bb2 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d106      	bne.n	80008c0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f003 f984 	bl	8003bc8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	4b9e      	ldr	r3, [pc, #632]	; (8000b40 <HAL_ETH_Init+0x2c0>)
 80008c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c8:	4a9d      	ldr	r2, [pc, #628]	; (8000b40 <HAL_ETH_Init+0x2c0>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ce:	6453      	str	r3, [r2, #68]	; 0x44
 80008d0:	4b9b      	ldr	r3, [pc, #620]	; (8000b40 <HAL_ETH_Init+0x2c0>)
 80008d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80008dc:	4b99      	ldr	r3, [pc, #612]	; (8000b44 <HAL_ETH_Init+0x2c4>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	4a98      	ldr	r2, [pc, #608]	; (8000b44 <HAL_ETH_Init+0x2c4>)
 80008e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80008e6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80008e8:	4b96      	ldr	r3, [pc, #600]	; (8000b44 <HAL_ETH_Init+0x2c4>)
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6a1b      	ldr	r3, [r3, #32]
 80008f0:	4994      	ldr	r1, [pc, #592]	; (8000b44 <HAL_ETH_Init+0x2c4>)
 80008f2:	4313      	orrs	r3, r2
 80008f4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f042 0201 	orr.w	r2, r2, #1
 8000908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800090c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800090e:	f7ff fe55 	bl	80005bc <HAL_GetTick>
 8000912:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000914:	e011      	b.n	800093a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000916:	f7ff fe51 	bl	80005bc <HAL_GetTick>
 800091a:	4602      	mov	r2, r0
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000924:	d909      	bls.n	800093a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2203      	movs	r2, #3
 800092a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000936:	2303      	movs	r3, #3
 8000938:	e13b      	b.n	8000bb2 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	2b00      	cmp	r3, #0
 800094a:	d1e4      	bne.n	8000916 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f023 031c 	bic.w	r3, r3, #28
 800095a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800095c:	f001 fddc 	bl	8002518 <HAL_RCC_GetHCLKFreq>
 8000960:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	4a78      	ldr	r2, [pc, #480]	; (8000b48 <HAL_ETH_Init+0x2c8>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d908      	bls.n	800097c <HAL_ETH_Init+0xfc>
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	4a77      	ldr	r2, [pc, #476]	; (8000b4c <HAL_ETH_Init+0x2cc>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d804      	bhi.n	800097c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	61fb      	str	r3, [r7, #28]
 800097a:	e027      	b.n	80009cc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	4a73      	ldr	r2, [pc, #460]	; (8000b4c <HAL_ETH_Init+0x2cc>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d908      	bls.n	8000996 <HAL_ETH_Init+0x116>
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	4a72      	ldr	r2, [pc, #456]	; (8000b50 <HAL_ETH_Init+0x2d0>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d804      	bhi.n	8000996 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f043 030c 	orr.w	r3, r3, #12
 8000992:	61fb      	str	r3, [r7, #28]
 8000994:	e01a      	b.n	80009cc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	4a6d      	ldr	r2, [pc, #436]	; (8000b50 <HAL_ETH_Init+0x2d0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d903      	bls.n	80009a6 <HAL_ETH_Init+0x126>
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	4a6c      	ldr	r2, [pc, #432]	; (8000b54 <HAL_ETH_Init+0x2d4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d911      	bls.n	80009ca <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	4a6a      	ldr	r2, [pc, #424]	; (8000b54 <HAL_ETH_Init+0x2d4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d908      	bls.n	80009c0 <HAL_ETH_Init+0x140>
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	4a69      	ldr	r2, [pc, #420]	; (8000b58 <HAL_ETH_Init+0x2d8>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d804      	bhi.n	80009c0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	e005      	b.n	80009cc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f043 0310 	orr.w	r3, r3, #16
 80009c6:	61fb      	str	r3, [r7, #28]
 80009c8:	e000      	b.n	80009cc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80009ca:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	69fa      	ldr	r2, [r7, #28]
 80009d2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d8:	2100      	movs	r1, #0
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 f956 	bl	8000c8c <HAL_ETH_WritePHYRegister>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00b      	beq.n	80009fe <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80009ea:	6939      	ldr	r1, [r7, #16]
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 f9b3 	bl	8000d58 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2201      	movs	r2, #1
 80009f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e0d9      	b.n	8000bb2 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80009fe:	20ff      	movs	r0, #255	; 0xff
 8000a00:	f7ff fde8 	bl	80005d4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	f000 80a7 	beq.w	8000b5c <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a0e:	f7ff fdd5 	bl	80005bc <HAL_GetTick>
 8000a12:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	461a      	mov	r2, r3
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f8cd 	bl	8000bbc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a22:	f7ff fdcb 	bl	80005bc <HAL_GetTick>
 8000a26:	4602      	mov	r2, r0
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	1ad3      	subs	r3, r2, r3
 8000a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d90f      	bls.n	8000a54 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a38:	6939      	ldr	r1, [r7, #16]
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 f98c 	bl	8000d58 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2201      	movs	r2, #1
 8000a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a50:	2303      	movs	r3, #3
 8000a52:	e0ae      	b.n	8000bb2 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0da      	beq.n	8000a14 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a62:	2100      	movs	r1, #0
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f911 	bl	8000c8c <HAL_ETH_WritePHYRegister>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00b      	beq.n	8000a88 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a74:	6939      	ldr	r1, [r7, #16]
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f96e 	bl	8000d58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a84:	2301      	movs	r3, #1
 8000a86:	e094      	b.n	8000bb2 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a88:	f7ff fd98 	bl	80005bc <HAL_GetTick>
 8000a8c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	461a      	mov	r2, r3
 8000a94:	2101      	movs	r1, #1
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 f890 	bl	8000bbc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a9c:	f7ff fd8e 	bl	80005bc <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d90f      	bls.n	8000ace <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000ab2:	6939      	ldr	r1, [r7, #16]
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f000 f94f 	bl	8000d58 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2201      	movs	r2, #1
 8000abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000aca:	2303      	movs	r3, #3
 8000acc:	e071      	b.n	8000bb2 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f003 0320 	and.w	r3, r3, #32
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0da      	beq.n	8000a8e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	461a      	mov	r2, r3
 8000ade:	211f      	movs	r1, #31
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f000 f86b 	bl	8000bbc <HAL_ETH_ReadPHYRegister>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d00b      	beq.n	8000b04 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000af0:	6939      	ldr	r1, [r7, #16]
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f000 f930 	bl	8000d58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2201      	movs	r2, #1
 8000afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000b00:	2301      	movs	r3, #1
 8000b02:	e056      	b.n	8000bb2 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d004      	beq.n	8000b18 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	e002      	b.n	8000b1e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	e037      	b.n	8000ba0 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	e032      	b.n	8000ba0 <HAL_ETH_Init+0x320>
 8000b3a:	bf00      	nop
 8000b3c:	03938700 	.word	0x03938700
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40013800 	.word	0x40013800
 8000b48:	01312cff 	.word	0x01312cff
 8000b4c:	02160ebf 	.word	0x02160ebf
 8000b50:	039386ff 	.word	0x039386ff
 8000b54:	05f5e0ff 	.word	0x05f5e0ff
 8000b58:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	08db      	lsrs	r3, r3, #3
 8000b62:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	085b      	lsrs	r3, r3, #1
 8000b6a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	461a      	mov	r2, r3
 8000b72:	2100      	movs	r1, #0
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f889 	bl	8000c8c <HAL_ETH_WritePHYRegister>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d00b      	beq.n	8000b98 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b84:	6939      	ldr	r1, [r7, #16]
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 f8e6 	bl	8000d58 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e00c      	b.n	8000bb2 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b98:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b9c:	f7ff fd1a 	bl	80005d4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000ba0:	6939      	ldr	r1, [r7, #16]
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f000 f8d8 	bl	8000d58 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3720      	adds	r7, #32
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop

08000bbc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b82      	cmp	r3, #130	; 0x82
 8000bdc:	d101      	bne.n	8000be2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8000bde:	2302      	movs	r3, #2
 8000be0:	e050      	b.n	8000c84 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	2282      	movs	r2, #130	; 0x82
 8000be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	f003 031c 	and.w	r3, r3, #28
 8000bf8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	8a1b      	ldrh	r3, [r3, #16]
 8000bfe:	02db      	lsls	r3, r3, #11
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000c08:	897b      	ldrh	r3, [r7, #10]
 8000c0a:	019b      	lsls	r3, r3, #6
 8000c0c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f023 0302 	bic.w	r3, r3, #2
 8000c1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000c2e:	f7ff fcc5 	bl	80005bc <HAL_GetTick>
 8000c32:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c34:	e015      	b.n	8000c62 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000c36:	f7ff fcc1 	bl	80005bc <HAL_GetTick>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c44:	d309      	bcc.n	8000c5a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e014      	b.n	8000c84 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1e4      	bne.n	8000c36 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	461a      	mov	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	460b      	mov	r3, r1
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b42      	cmp	r3, #66	; 0x42
 8000cac:	d101      	bne.n	8000cb2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e04e      	b.n	8000d50 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	2242      	movs	r2, #66	; 0x42
 8000cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f003 031c 	and.w	r3, r3, #28
 8000cc8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	8a1b      	ldrh	r3, [r3, #16]
 8000cce:	02db      	lsls	r3, r3, #11
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000cd8:	897b      	ldrh	r3, [r7, #10]
 8000cda:	019b      	lsls	r3, r3, #6
 8000cdc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000d08:	f7ff fc58 	bl	80005bc <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d0e:	e015      	b.n	8000d3c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000d10:	f7ff fc54 	bl	80005bc <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d1e:	d309      	bcc.n	8000d34 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2201      	movs	r2, #1
 8000d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e00d      	b.n	8000d50 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1e4      	bne.n	8000d10 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0b0      	sub	sp, #192	; 0xc0
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d007      	beq.n	8000d7e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d74:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d103      	bne.n	8000da6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8000d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da2:	663b      	str	r3, [r7, #96]	; 0x60
 8000da4:	e001      	b.n	8000daa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8000daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dae:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8000db4:	2300      	movs	r3, #0
 8000db6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8000dc4:	2340      	movs	r3, #64	; 0x40
 8000dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000e2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e30:	4bac      	ldr	r3, [pc, #688]	; (80010e4 <ETH_MACDMAConfig+0x38c>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8000e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000e3c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8000e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8000e40:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8000e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8000e44:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8000e4a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8000e4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8000e4e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8000e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8000e52:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8000e58:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8000e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8000e5c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8000e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8000e60:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8000e62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8000e64:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8000e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8000e68:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8000e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8000e6c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8000e6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e72:	4313      	orrs	r3, r2
 8000e74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e80:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	f7ff fba1 	bl	80005d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000e9a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000e9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8000e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ea0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8000ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8000ea4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8000ea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8000eaa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8000eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8000eb0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8000eb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8000eb6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8000eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8000ebc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8000ec0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8000ec8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000eca:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff fb7c 	bl	80005d4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000ee4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000eee:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000ef8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8000f04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f08:	f64f 7341 	movw	r3, #65345	; 0xff41
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000f12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f16:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8000f18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000f1c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8000f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8000f22:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8000f24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8000f28:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8000f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8000f2e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8000f30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8000f34:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8000f36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f48:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff fb3d 	bl	80005d4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f62:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f64:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8000f68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff fb28 	bl	80005d4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f8c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8000f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f96:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8000f9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fa0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8000fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000fc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000fc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fe2:	3318      	adds	r3, #24
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8000fea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000fee:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <ETH_MACDMAConfig+0x390>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000ff6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000ffa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8000ffc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8000ffe:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001000:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001002:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001004:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001006:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001008:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800100a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800100c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800100e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001012:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001016:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001018:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800101c:	4313      	orrs	r3, r2
 800101e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800102a:	3318      	adds	r3, #24
 800102c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001030:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800103a:	3318      	adds	r3, #24
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff fac6 	bl	80005d4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001050:	3318      	adds	r3, #24
 8001052:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001056:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800105a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800105c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800105e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001060:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001064:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001068:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800106a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800106c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800106e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001072:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800107c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001080:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001090:	2001      	movs	r0, #1
 8001092:	f7ff fa9f 	bl	80005d4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800109e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80010a2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d10f      	bne.n	80010cc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010b4:	331c      	adds	r3, #28
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c8:	331c      	adds	r3, #28
 80010ca:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	461a      	mov	r2, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f809 	bl	80010ec <ETH_MACAddressConfig>
}
 80010da:	bf00      	nop
 80010dc:	37c0      	adds	r7, #192	; 0xc0
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	ff20810f 	.word	0xff20810f
 80010e8:	f8de3f23 	.word	0xf8de3f23

080010ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3305      	adds	r3, #5
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	3204      	adds	r2, #4
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	4313      	orrs	r3, r2
 8001108:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <ETH_MACAddressConfig+0x68>)
 800110e:	4413      	add	r3, r2
 8001110:	461a      	mov	r2, r3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3303      	adds	r3, #3
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	061a      	lsls	r2, r3, #24
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3302      	adds	r3, #2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	041b      	lsls	r3, r3, #16
 8001126:	431a      	orrs	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3301      	adds	r3, #1
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	4313      	orrs	r3, r2
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	4313      	orrs	r3, r2
 8001138:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <ETH_MACAddressConfig+0x6c>)
 800113e:	4413      	add	r3, r2
 8001140:	461a      	mov	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	6013      	str	r3, [r2, #0]
}
 8001146:	bf00      	nop
 8001148:	371c      	adds	r7, #28
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40028040 	.word	0x40028040
 8001158:	40028044 	.word	0x40028044

0800115c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <HAL_FLASH_Program+0xa0>)
 8001170:	7e1b      	ldrb	r3, [r3, #24]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_FLASH_Program+0x1e>
 8001176:	2302      	movs	r3, #2
 8001178:	e03b      	b.n	80011f2 <HAL_FLASH_Program+0x96>
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_FLASH_Program+0xa0>)
 800117c:	2201      	movs	r2, #1
 800117e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001180:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001184:	f000 f870 	bl	8001268 <FLASH_WaitForLastOperation>
 8001188:	4603      	mov	r3, r0
 800118a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800118c:	7dfb      	ldrb	r3, [r7, #23]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d12b      	bne.n	80011ea <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001198:	783b      	ldrb	r3, [r7, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	68b8      	ldr	r0, [r7, #8]
 800119e:	f000 f917 	bl	80013d0 <FLASH_Program_Byte>
 80011a2:	e016      	b.n	80011d2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d105      	bne.n	80011b6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80011aa:	883b      	ldrh	r3, [r7, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	68b8      	ldr	r0, [r7, #8]
 80011b0:	f000 f8ea 	bl	8001388 <FLASH_Program_HalfWord>
 80011b4:	e00d      	b.n	80011d2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d105      	bne.n	80011c8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	4619      	mov	r1, r3
 80011c0:	68b8      	ldr	r0, [r7, #8]
 80011c2:	f000 f8bf 	bl	8001344 <FLASH_Program_Word>
 80011c6:	e004      	b.n	80011d2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80011c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	f000 f88b 	bl	80012e8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011d6:	f000 f847 	bl	8001268 <FLASH_WaitForLastOperation>
 80011da:	4603      	mov	r3, r0
 80011dc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <HAL_FLASH_Program+0xa4>)
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	4a07      	ldr	r2, [pc, #28]	; (8001200 <HAL_FLASH_Program+0xa4>)
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_FLASH_Program+0xa0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	761a      	strb	r2, [r3, #24]
  
  return status;
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000058 	.word	0x20000058
 8001200:	40023c00 	.word	0x40023c00

08001204 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_FLASH_Unlock+0x38>)
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	da0b      	bge.n	800122e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_FLASH_Unlock+0x38>)
 8001218:	4a09      	ldr	r2, [pc, #36]	; (8001240 <HAL_FLASH_Unlock+0x3c>)
 800121a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <HAL_FLASH_Unlock+0x38>)
 800121e:	4a09      	ldr	r2, [pc, #36]	; (8001244 <HAL_FLASH_Unlock+0x40>)
 8001220:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_FLASH_Unlock+0x38>)
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b00      	cmp	r3, #0
 8001228:	da01      	bge.n	800122e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800122e:	79fb      	ldrb	r3, [r7, #7]
}
 8001230:	4618      	mov	r0, r3
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	40023c00 	.word	0x40023c00
 8001240:	45670123 	.word	0x45670123
 8001244:	cdef89ab 	.word	0xcdef89ab

08001248 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_FLASH_Lock+0x1c>)
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_FLASH_Lock+0x1c>)
 8001252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001256:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40023c00 	.word	0x40023c00

08001268 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <FLASH_WaitForLastOperation+0x78>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800127a:	f7ff f99f 	bl	80005bc <HAL_GetTick>
 800127e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001280:	e010      	b.n	80012a4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001288:	d00c      	beq.n	80012a4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <FLASH_WaitForLastOperation+0x38>
 8001290:	f7ff f994 	bl	80005bc <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	429a      	cmp	r2, r3
 800129e:	d201      	bcs.n	80012a4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e019      	b.n	80012d8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <FLASH_WaitForLastOperation+0x7c>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1e8      	bne.n	8001282 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <FLASH_WaitForLastOperation+0x7c>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <FLASH_WaitForLastOperation+0x7c>)
 80012be:	2201      	movs	r2, #1
 80012c0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <FLASH_WaitForLastOperation+0x7c>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012ce:	f000 f8a1 	bl	8001414 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
  
}  
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000058 	.word	0x20000058
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80012e8:	b490      	push	{r4, r7}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <FLASH_Program_DoubleWord+0x58>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	4a11      	ldr	r2, [pc, #68]	; (8001340 <FLASH_Program_DoubleWord+0x58>)
 80012fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <FLASH_Program_DoubleWord+0x58>)
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <FLASH_Program_DoubleWord+0x58>)
 8001306:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800130a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <FLASH_Program_DoubleWord+0x58>)
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <FLASH_Program_DoubleWord+0x58>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800131e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	f04f 0400 	mov.w	r4, #0
 800132a:	0013      	movs	r3, r2
 800132c:	2400      	movs	r4, #0
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	3204      	adds	r2, #4
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bc90      	pop	{r4, r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023c00 	.word	0x40023c00

08001344 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <FLASH_Program_Word+0x40>)
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <FLASH_Program_Word+0x40>)
 8001354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001358:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <FLASH_Program_Word+0x40>)
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <FLASH_Program_Word+0x40>)
 8001360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001364:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <FLASH_Program_Word+0x40>)
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <FLASH_Program_Word+0x40>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	601a      	str	r2, [r3, #0]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	40023c00 	.word	0x40023c00

08001388 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <FLASH_Program_HalfWord+0x44>)
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <FLASH_Program_HalfWord+0x44>)
 800139a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800139e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <FLASH_Program_HalfWord+0x44>)
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <FLASH_Program_HalfWord+0x44>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <FLASH_Program_HalfWord+0x44>)
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <FLASH_Program_HalfWord+0x44>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	801a      	strh	r2, [r3, #0]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023c00 	.word	0x40023c00

080013d0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <FLASH_Program_Byte+0x40>)
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <FLASH_Program_Byte+0x40>)
 80013e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <FLASH_Program_Byte+0x40>)
 80013ea:	4a09      	ldr	r2, [pc, #36]	; (8001410 <FLASH_Program_Byte+0x40>)
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <FLASH_Program_Byte+0x40>)
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	4a06      	ldr	r2, [pc, #24]	; (8001410 <FLASH_Program_Byte+0x40>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	78fa      	ldrb	r2, [r7, #3]
 8001400:	701a      	strb	r2, [r3, #0]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00

08001414 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <FLASH_SetErrorCode+0xc4>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	2b00      	cmp	r3, #0
 8001422:	d008      	beq.n	8001436 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <FLASH_SetErrorCode+0xc8>)
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	f043 0310 	orr.w	r3, r3, #16
 800142c:	4a2b      	ldr	r2, [pc, #172]	; (80014dc <FLASH_SetErrorCode+0xc8>)
 800142e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <FLASH_SetErrorCode+0xc4>)
 8001432:	2210      	movs	r2, #16
 8001434:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <FLASH_SetErrorCode+0xc4>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f003 0320 	and.w	r3, r3, #32
 800143e:	2b00      	cmp	r3, #0
 8001440:	d008      	beq.n	8001454 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <FLASH_SetErrorCode+0xc8>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	4a24      	ldr	r2, [pc, #144]	; (80014dc <FLASH_SetErrorCode+0xc8>)
 800144c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800144e:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <FLASH_SetErrorCode+0xc4>)
 8001450:	2220      	movs	r2, #32
 8001452:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <FLASH_SetErrorCode+0xc4>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <FLASH_SetErrorCode+0xc8>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	4a1c      	ldr	r2, [pc, #112]	; (80014dc <FLASH_SetErrorCode+0xc8>)
 800146a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <FLASH_SetErrorCode+0xc4>)
 800146e:	2240      	movs	r2, #64	; 0x40
 8001470:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <FLASH_SetErrorCode+0xc4>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	2b00      	cmp	r3, #0
 800147c:	d008      	beq.n	8001490 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <FLASH_SetErrorCode+0xc8>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <FLASH_SetErrorCode+0xc8>)
 8001488:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <FLASH_SetErrorCode+0xc4>)
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <FLASH_SetErrorCode+0xc4>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001498:	2b00      	cmp	r3, #0
 800149a:	d009      	beq.n	80014b0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <FLASH_SetErrorCode+0xc8>)
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <FLASH_SetErrorCode+0xc8>)
 80014a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <FLASH_SetErrorCode+0xc4>)
 80014aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ae:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <FLASH_SetErrorCode+0xc4>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <FLASH_SetErrorCode+0xc8>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	4a05      	ldr	r2, [pc, #20]	; (80014dc <FLASH_SetErrorCode+0xc8>)
 80014c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <FLASH_SetErrorCode+0xc4>)
 80014ca:	2202      	movs	r2, #2
 80014cc:	60da      	str	r2, [r3, #12]
  }
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40023c00 	.word	0x40023c00
 80014dc:	20000058 	.word	0x20000058

080014e0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014f2:	4b32      	ldr	r3, [pc, #200]	; (80015bc <HAL_FLASHEx_Erase+0xdc>)
 80014f4:	7e1b      	ldrb	r3, [r3, #24]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_FLASHEx_Erase+0x1e>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e05a      	b.n	80015b4 <HAL_FLASHEx_Erase+0xd4>
 80014fe:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_FLASHEx_Erase+0xdc>)
 8001500:	2201      	movs	r2, #1
 8001502:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001504:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001508:	f7ff feae 	bl	8001268 <FLASH_WaitForLastOperation>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d14a      	bne.n	80015ac <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d117      	bne.n	8001556 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4619      	mov	r1, r3
 8001532:	4610      	mov	r0, r2
 8001534:	f000 f846 	bl	80015c4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001538:	f24c 3050 	movw	r0, #50000	; 0xc350
 800153c:	f7ff fe94 	bl	8001268 <FLASH_WaitForLastOperation>
 8001540:	4603      	mov	r3, r0
 8001542:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_FLASHEx_Erase+0xe0>)
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_FLASHEx_Erase+0xe0>)
 800154a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800154e:	f023 0304 	bic.w	r3, r3, #4
 8001552:	6113      	str	r3, [r2, #16]
 8001554:	e028      	b.n	80015a8 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	e01c      	b.n	8001598 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4619      	mov	r1, r3
 8001566:	68b8      	ldr	r0, [r7, #8]
 8001568:	f000 f866 	bl	8001638 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800156c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001570:	f7ff fe7a 	bl	8001268 <FLASH_WaitForLastOperation>
 8001574:	4603      	mov	r3, r0
 8001576:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_FLASHEx_Erase+0xe0>)
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <HAL_FLASHEx_Erase+0xe0>)
 800157e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001582:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	601a      	str	r2, [r3, #0]
          break;
 8001590:	e00a      	b.n	80015a8 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	3301      	adds	r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4413      	add	r3, r2
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d3da      	bcc.n	800155e <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80015a8:	f000 f894 	bl	80016d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HAL_FLASHEx_Erase+0xdc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	761a      	strb	r2, [r3, #24]

  return status;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000058 	.word	0x20000058
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <FLASH_MassErase+0x70>)
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	4a17      	ldr	r2, [pc, #92]	; (8001634 <FLASH_MassErase+0x70>)
 80015d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015da:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d108      	bne.n	80015f4 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <FLASH_MassErase+0x70>)
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	4a13      	ldr	r2, [pc, #76]	; (8001634 <FLASH_MassErase+0x70>)
 80015e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ec:	f043 0304 	orr.w	r3, r3, #4
 80015f0:	6113      	str	r3, [r2, #16]
 80015f2:	e00f      	b.n	8001614 <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d106      	bne.n	8001608 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <FLASH_MassErase+0x70>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <FLASH_MassErase+0x70>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6113      	str	r3, [r2, #16]
 8001606:	e005      	b.n	8001614 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <FLASH_MassErase+0x70>)
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	4a09      	ldr	r2, [pc, #36]	; (8001634 <FLASH_MassErase+0x70>)
 800160e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001612:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <FLASH_MassErase+0x70>)
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	4313      	orrs	r3, r2
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <FLASH_MassErase+0x70>)
 8001620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001624:	6113      	str	r3, [r2, #16]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40023c00 	.word	0x40023c00

08001638 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	e010      	b.n	8001676 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d103      	bne.n	8001662 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800165a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	e009      	b.n	8001676 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d103      	bne.n	8001670 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	e002      	b.n	8001676 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001670:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001674:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0b      	cmp	r3, #11
 800167a:	d902      	bls.n	8001682 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3304      	adds	r3, #4
 8001680:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <FLASH_Erase_Sector+0x98>)
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <FLASH_Erase_Sector+0x98>)
 8001688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800168c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <FLASH_Erase_Sector+0x98>)
 8001690:	691a      	ldr	r2, [r3, #16]
 8001692:	490f      	ldr	r1, [pc, #60]	; (80016d0 <FLASH_Erase_Sector+0x98>)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <FLASH_Erase_Sector+0x98>)
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <FLASH_Erase_Sector+0x98>)
 80016a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <FLASH_Erase_Sector+0x98>)
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <FLASH_Erase_Sector+0x98>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <FLASH_Erase_Sector+0x98>)
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <FLASH_Erase_Sector+0x98>)
 80016be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c2:	6113      	str	r3, [r2, #16]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <FLASH_FlushCaches+0x88>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d017      	beq.n	8001714 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <FLASH_FlushCaches+0x88>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1c      	ldr	r2, [pc, #112]	; (800175c <FLASH_FlushCaches+0x88>)
 80016ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80016f0:	4b1a      	ldr	r3, [pc, #104]	; (800175c <FLASH_FlushCaches+0x88>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <FLASH_FlushCaches+0x88>)
 80016f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <FLASH_FlushCaches+0x88>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <FLASH_FlushCaches+0x88>)
 8001702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001706:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <FLASH_FlushCaches+0x88>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a13      	ldr	r2, [pc, #76]	; (800175c <FLASH_FlushCaches+0x88>)
 800170e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001712:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <FLASH_FlushCaches+0x88>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d017      	beq.n	8001750 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <FLASH_FlushCaches+0x88>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <FLASH_FlushCaches+0x88>)
 8001726:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800172a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <FLASH_FlushCaches+0x88>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0a      	ldr	r2, [pc, #40]	; (800175c <FLASH_FlushCaches+0x88>)
 8001732:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <FLASH_FlushCaches+0x88>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a07      	ldr	r2, [pc, #28]	; (800175c <FLASH_FlushCaches+0x88>)
 800173e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001742:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <FLASH_FlushCaches+0x88>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <FLASH_FlushCaches+0x88>)
 800174a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174e:	6013      	str	r3, [r2, #0]
  }
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023c00 	.word	0x40023c00

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e177      	b.n	8001a6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8166 	bne.w	8001a66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x4a>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b12      	cmp	r3, #18
 80017a8:	d123      	bne.n	80017f2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	69b9      	ldr	r1, [r7, #24]
 80017ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0203 	and.w	r2, r3, #3
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d00b      	beq.n	8001846 <HAL_GPIO_Init+0xe6>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800183a:	2b11      	cmp	r3, #17
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b12      	cmp	r3, #18
 8001844:	d130      	bne.n	80018a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 0201 	and.w	r2, r3, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80c0 	beq.w	8001a66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b65      	ldr	r3, [pc, #404]	; (8001a80 <HAL_GPIO_Init+0x320>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a64      	ldr	r2, [pc, #400]	; (8001a80 <HAL_GPIO_Init+0x320>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b62      	ldr	r3, [pc, #392]	; (8001a80 <HAL_GPIO_Init+0x320>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001902:	4a60      	ldr	r2, [pc, #384]	; (8001a84 <HAL_GPIO_Init+0x324>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a57      	ldr	r2, [pc, #348]	; (8001a88 <HAL_GPIO_Init+0x328>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d037      	beq.n	800199e <HAL_GPIO_Init+0x23e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a56      	ldr	r2, [pc, #344]	; (8001a8c <HAL_GPIO_Init+0x32c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d031      	beq.n	800199a <HAL_GPIO_Init+0x23a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a55      	ldr	r2, [pc, #340]	; (8001a90 <HAL_GPIO_Init+0x330>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d02b      	beq.n	8001996 <HAL_GPIO_Init+0x236>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a54      	ldr	r2, [pc, #336]	; (8001a94 <HAL_GPIO_Init+0x334>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d025      	beq.n	8001992 <HAL_GPIO_Init+0x232>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a53      	ldr	r2, [pc, #332]	; (8001a98 <HAL_GPIO_Init+0x338>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d01f      	beq.n	800198e <HAL_GPIO_Init+0x22e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <HAL_GPIO_Init+0x33c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d019      	beq.n	800198a <HAL_GPIO_Init+0x22a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_GPIO_Init+0x340>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0x226>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a50      	ldr	r2, [pc, #320]	; (8001aa4 <HAL_GPIO_Init+0x344>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00d      	beq.n	8001982 <HAL_GPIO_Init+0x222>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4f      	ldr	r2, [pc, #316]	; (8001aa8 <HAL_GPIO_Init+0x348>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d007      	beq.n	800197e <HAL_GPIO_Init+0x21e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4e      	ldr	r2, [pc, #312]	; (8001aac <HAL_GPIO_Init+0x34c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_GPIO_Init+0x21a>
 8001976:	2309      	movs	r3, #9
 8001978:	e012      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800197a:	230a      	movs	r3, #10
 800197c:	e010      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800197e:	2308      	movs	r3, #8
 8001980:	e00e      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001982:	2307      	movs	r3, #7
 8001984:	e00c      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001986:	2306      	movs	r3, #6
 8001988:	e00a      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800198a:	2305      	movs	r3, #5
 800198c:	e008      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800198e:	2304      	movs	r3, #4
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x240>
 800199e:	2300      	movs	r3, #0
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b0:	4934      	ldr	r1, [pc, #208]	; (8001a84 <HAL_GPIO_Init+0x324>)
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019be:	4b3c      	ldr	r3, [pc, #240]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e2:	4a33      	ldr	r2, [pc, #204]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019e8:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a0c:	4a28      	ldr	r2, [pc, #160]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a36:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a3c:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a60:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <HAL_GPIO_Init+0x350>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b0f      	cmp	r3, #15
 8001a70:	f67f ae84 	bls.w	800177c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a74:	bf00      	nop
 8001a76:	3724      	adds	r7, #36	; 0x24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40013800 	.word	0x40013800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40021400 	.word	0x40021400
 8001aa0:	40021800 	.word	0x40021800
 8001aa4:	40021c00 	.word	0x40021c00
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40022400 	.word	0x40022400
 8001ab0:	40013c00 	.word	0x40013c00

08001ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac4:	787b      	ldrb	r3, [r7, #1]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad0:	e003      	b.n	8001ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	041a      	lsls	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	619a      	str	r2, [r3, #24]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae8:	b08f      	sub	sp, #60	; 0x3c
 8001aea:	af0a      	add	r7, sp, #40	; 0x28
 8001aec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e10f      	b.n	8001d18 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f002 f96e 	bl	8003df4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d102      	bne.n	8001b32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 fa5b 	bl	8002ff2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	687e      	ldr	r6, [r7, #4]
 8001b44:	466d      	mov	r5, sp
 8001b46:	f106 0410 	add.w	r4, r6, #16
 8001b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b5a:	1d33      	adds	r3, r6, #4
 8001b5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b5e:	6838      	ldr	r0, [r7, #0]
 8001b60:	f001 f9e6 	bl	8002f30 <USB_CoreInit>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d005      	beq.n	8001b76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0d0      	b.n	8001d18 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 fa49 	bl	8003014 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	e04a      	b.n	8001c1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	333d      	adds	r3, #61	; 0x3d
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	6879      	ldr	r1, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	333c      	adds	r3, #60	; 0x3c
 8001bac:	7bfa      	ldrb	r2, [r7, #15]
 8001bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	b298      	uxth	r0, r3
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3342      	adds	r3, #66	; 0x42
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	333f      	adds	r3, #63	; 0x3f
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	3344      	adds	r3, #68	; 0x44
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3348      	adds	r3, #72	; 0x48
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	3350      	adds	r3, #80	; 0x50
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d3af      	bcc.n	8001b88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e044      	b.n	8001cb8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d3b5      	bcc.n	8001c2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	687e      	ldr	r6, [r7, #4]
 8001cca:	466d      	mov	r5, sp
 8001ccc:	f106 0410 	add.w	r4, r6, #16
 8001cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ce0:	1d33      	adds	r3, r6, #4
 8001ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce4:	6838      	ldr	r0, [r7, #0]
 8001ce6:	f001 f9bf 	bl	8003068 <USB_DevInit>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e00d      	b.n	8001d18 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f001 fb7c 	bl	800340e <USB_DevDisconnect>

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e22d      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d075      	beq.n	8001e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d3e:	4ba3      	ldr	r3, [pc, #652]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d00c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4a:	4ba0      	ldr	r3, [pc, #640]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d112      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d56:	4b9d      	ldr	r3, [pc, #628]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d62:	d10b      	bne.n	8001d7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	4b99      	ldr	r3, [pc, #612]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d05b      	beq.n	8001e28 <HAL_RCC_OscConfig+0x108>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d157      	bne.n	8001e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e208      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d84:	d106      	bne.n	8001d94 <HAL_RCC_OscConfig+0x74>
 8001d86:	4b91      	ldr	r3, [pc, #580]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a90      	ldr	r2, [pc, #576]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e01d      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x98>
 8001d9e:	4b8b      	ldr	r3, [pc, #556]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a8a      	ldr	r2, [pc, #552]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b88      	ldr	r3, [pc, #544]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a87      	ldr	r2, [pc, #540]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0xb0>
 8001db8:	4b84      	ldr	r3, [pc, #528]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a83      	ldr	r2, [pc, #524]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b81      	ldr	r3, [pc, #516]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a80      	ldr	r2, [pc, #512]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7fe fbf0 	bl	80005bc <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de0:	f7fe fbec 	bl	80005bc <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	; 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1cd      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0xc0>
 8001dfe:	e014      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7fe fbdc 	bl	80005bc <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e08:	f7fe fbd8 	bl	80005bc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	; 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e1b9      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0xe8>
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d063      	beq.n	8001efe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e36:	4b65      	ldr	r3, [pc, #404]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e42:	4b62      	ldr	r3, [pc, #392]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d11c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4e:	4b5f      	ldr	r3, [pc, #380]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d116      	bne.n	8001e88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	4b5c      	ldr	r3, [pc, #368]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_RCC_OscConfig+0x152>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e18d      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4952      	ldr	r1, [pc, #328]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	e03a      	b.n	8001efe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d020      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e90:	4b4f      	ldr	r3, [pc, #316]	; (8001fd0 <HAL_RCC_OscConfig+0x2b0>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7fe fb91 	bl	80005bc <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7fe fb8d 	bl	80005bc <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e16e      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4940      	ldr	r1, [pc, #256]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b3f      	ldr	r3, [pc, #252]	; (8001fd0 <HAL_RCC_OscConfig+0x2b0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7fe fb70 	bl	80005bc <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7fe fb6c 	bl	80005bc <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e14d      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	4b36      	ldr	r3, [pc, #216]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d030      	beq.n	8001f6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d016      	beq.n	8001f40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f12:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_RCC_OscConfig+0x2b4>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7fe fb50 	bl	80005bc <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f20:	f7fe fb4c 	bl	80005bc <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e12d      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x200>
 8001f3e:	e015      	b.n	8001f6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCC_OscConfig+0x2b4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7fe fb39 	bl	80005bc <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7fe fb35 	bl	80005bc <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e116      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80a0 	beq.w	80020ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10f      	bne.n	8001faa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_OscConfig+0x2b8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d121      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_RCC_OscConfig+0x2b8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_RCC_OscConfig+0x2b8>)
 8001fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fc2:	f7fe fafb 	bl	80005bc <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc8:	e011      	b.n	8001fee <HAL_RCC_OscConfig+0x2ce>
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	42470000 	.word	0x42470000
 8001fd4:	42470e80 	.word	0x42470e80
 8001fd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fdc:	f7fe faee 	bl	80005bc <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e0cf      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x478>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f0      	beq.n	8001fdc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d106      	bne.n	8002010 <HAL_RCC_OscConfig+0x2f0>
 8002002:	4b66      	ldr	r3, [pc, #408]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a65      	ldr	r2, [pc, #404]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6713      	str	r3, [r2, #112]	; 0x70
 800200e:	e01c      	b.n	800204a <HAL_RCC_OscConfig+0x32a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b05      	cmp	r3, #5
 8002016:	d10c      	bne.n	8002032 <HAL_RCC_OscConfig+0x312>
 8002018:	4b60      	ldr	r3, [pc, #384]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a5f      	ldr	r2, [pc, #380]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
 8002024:	4b5d      	ldr	r3, [pc, #372]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	4a5c      	ldr	r2, [pc, #368]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6713      	str	r3, [r2, #112]	; 0x70
 8002030:	e00b      	b.n	800204a <HAL_RCC_OscConfig+0x32a>
 8002032:	4b5a      	ldr	r3, [pc, #360]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002036:	4a59      	ldr	r2, [pc, #356]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6713      	str	r3, [r2, #112]	; 0x70
 800203e:	4b57      	ldr	r3, [pc, #348]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a56      	ldr	r2, [pc, #344]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d015      	beq.n	800207e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe fab3 	bl	80005bc <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe faaf 	bl	80005bc <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e08e      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002070:	4b4a      	ldr	r3, [pc, #296]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ee      	beq.n	800205a <HAL_RCC_OscConfig+0x33a>
 800207c:	e014      	b.n	80020a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7fe fa9d 	bl	80005bc <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7fe fa99 	bl	80005bc <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	; 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e078      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209c:	4b3f      	ldr	r3, [pc, #252]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1ee      	bne.n	8002086 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d105      	bne.n	80020ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a3a      	ldr	r2, [pc, #232]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 80020b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d064      	beq.n	800218c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d05c      	beq.n	8002188 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d141      	bne.n	800215a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d6:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <HAL_RCC_OscConfig+0x480>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7fe fa6e 	bl	80005bc <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e4:	f7fe fa6a 	bl	80005bc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e04b      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f6:	4b29      	ldr	r3, [pc, #164]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69da      	ldr	r2, [r3, #28]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	019b      	lsls	r3, r3, #6
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	085b      	lsrs	r3, r3, #1
 800211a:	3b01      	subs	r3, #1
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	061b      	lsls	r3, r3, #24
 8002126:	491d      	ldr	r1, [pc, #116]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_RCC_OscConfig+0x480>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7fe fa43 	bl	80005bc <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213a:	f7fe fa3f 	bl	80005bc <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e020      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x41a>
 8002158:	e018      	b.n	800218c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_RCC_OscConfig+0x480>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7fe fa2c 	bl	80005bc <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002168:	f7fe fa28 	bl	80005bc <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e009      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_RCC_OscConfig+0x47c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x448>
 8002186:	e001      	b.n	800218c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40007000 	.word	0x40007000
 800219c:	40023800 	.word	0x40023800
 80021a0:	42470060 	.word	0x42470060

080021a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0ca      	b.n	800234e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021b8:	4b67      	ldr	r3, [pc, #412]	; (8002358 <HAL_RCC_ClockConfig+0x1b4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d90c      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b64      	ldr	r3, [pc, #400]	; (8002358 <HAL_RCC_ClockConfig+0x1b4>)
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b62      	ldr	r3, [pc, #392]	; (8002358 <HAL_RCC_ClockConfig+0x1b4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0b6      	b.n	800234e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d020      	beq.n	800222e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f8:	4b58      	ldr	r3, [pc, #352]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a57      	ldr	r2, [pc, #348]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80021fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002210:	4b52      	ldr	r3, [pc, #328]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a51      	ldr	r2, [pc, #324]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 8002216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800221a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221c:	4b4f      	ldr	r3, [pc, #316]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	494c      	ldr	r1, [pc, #304]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d044      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d119      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e07d      	b.n	800234e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d003      	beq.n	8002262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800225e:	2b03      	cmp	r3, #3
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	4b3e      	ldr	r3, [pc, #248]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e06d      	b.n	800234e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002272:	4b3a      	ldr	r3, [pc, #232]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e065      	b.n	800234e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4933      	ldr	r1, [pc, #204]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002294:	f7fe f992 	bl	80005bc <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7fe f98e 	bl	80005bc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e04d      	b.n	800234e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b2a      	ldr	r3, [pc, #168]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_RCC_ClockConfig+0x1b4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d20c      	bcs.n	80022ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_RCC_ClockConfig+0x1b4>)
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <HAL_RCC_ClockConfig+0x1b4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e030      	b.n	800234e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f8:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4915      	ldr	r1, [pc, #84]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	490d      	ldr	r1, [pc, #52]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800232a:	f000 f81d 	bl	8002368 <HAL_RCC_GetSysClockFreq>
 800232e:	4601      	mov	r1, r0
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <HAL_RCC_ClockConfig+0x1b8>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	5cd3      	ldrb	r3, [r2, r3]
 800233e:	fa21 f303 	lsr.w	r3, r1, r3
 8002342:	4a08      	ldr	r2, [pc, #32]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002346:	2000      	movs	r0, #0
 8002348:	f7fe f8f4 	bl	8000534 <HAL_InitTick>

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023c00 	.word	0x40023c00
 800235c:	40023800 	.word	0x40023800
 8002360:	080040a8 	.word	0x080040a8
 8002364:	20000008 	.word	0x20000008

08002368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	2300      	movs	r3, #0
 8002378:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800237e:	4b63      	ldr	r3, [pc, #396]	; (800250c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b04      	cmp	r3, #4
 8002388:	d007      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x32>
 800238a:	2b08      	cmp	r3, #8
 800238c:	d008      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x38>
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 80b4 	bne.w	80024fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002394:	4b5e      	ldr	r3, [pc, #376]	; (8002510 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002396:	60bb      	str	r3, [r7, #8]
       break;
 8002398:	e0b3      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800239a:	4b5e      	ldr	r3, [pc, #376]	; (8002514 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800239c:	60bb      	str	r3, [r7, #8]
      break;
 800239e:	e0b0      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a0:	4b5a      	ldr	r3, [pc, #360]	; (800250c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023aa:	4b58      	ldr	r3, [pc, #352]	; (800250c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d04a      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b6:	4b55      	ldr	r3, [pc, #340]	; (800250c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	f04f 0400 	mov.w	r4, #0
 80023c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	ea03 0501 	and.w	r5, r3, r1
 80023cc:	ea04 0602 	and.w	r6, r4, r2
 80023d0:	4629      	mov	r1, r5
 80023d2:	4632      	mov	r2, r6
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	f04f 0400 	mov.w	r4, #0
 80023dc:	0154      	lsls	r4, r2, #5
 80023de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023e2:	014b      	lsls	r3, r1, #5
 80023e4:	4619      	mov	r1, r3
 80023e6:	4622      	mov	r2, r4
 80023e8:	1b49      	subs	r1, r1, r5
 80023ea:	eb62 0206 	sbc.w	r2, r2, r6
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	f04f 0400 	mov.w	r4, #0
 80023f6:	0194      	lsls	r4, r2, #6
 80023f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023fc:	018b      	lsls	r3, r1, #6
 80023fe:	1a5b      	subs	r3, r3, r1
 8002400:	eb64 0402 	sbc.w	r4, r4, r2
 8002404:	f04f 0100 	mov.w	r1, #0
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	00e2      	lsls	r2, r4, #3
 800240e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002412:	00d9      	lsls	r1, r3, #3
 8002414:	460b      	mov	r3, r1
 8002416:	4614      	mov	r4, r2
 8002418:	195b      	adds	r3, r3, r5
 800241a:	eb44 0406 	adc.w	r4, r4, r6
 800241e:	f04f 0100 	mov.w	r1, #0
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	0262      	lsls	r2, r4, #9
 8002428:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800242c:	0259      	lsls	r1, r3, #9
 800242e:	460b      	mov	r3, r1
 8002430:	4614      	mov	r4, r2
 8002432:	4618      	mov	r0, r3
 8002434:	4621      	mov	r1, r4
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f04f 0400 	mov.w	r4, #0
 800243c:	461a      	mov	r2, r3
 800243e:	4623      	mov	r3, r4
 8002440:	f7fd fed6 	bl	80001f0 <__aeabi_uldivmod>
 8002444:	4603      	mov	r3, r0
 8002446:	460c      	mov	r4, r1
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	e049      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800244c:	4b2f      	ldr	r3, [pc, #188]	; (800250c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	f04f 0400 	mov.w	r4, #0
 8002456:	f240 11ff 	movw	r1, #511	; 0x1ff
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	ea03 0501 	and.w	r5, r3, r1
 8002462:	ea04 0602 	and.w	r6, r4, r2
 8002466:	4629      	mov	r1, r5
 8002468:	4632      	mov	r2, r6
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	f04f 0400 	mov.w	r4, #0
 8002472:	0154      	lsls	r4, r2, #5
 8002474:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002478:	014b      	lsls	r3, r1, #5
 800247a:	4619      	mov	r1, r3
 800247c:	4622      	mov	r2, r4
 800247e:	1b49      	subs	r1, r1, r5
 8002480:	eb62 0206 	sbc.w	r2, r2, r6
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	f04f 0400 	mov.w	r4, #0
 800248c:	0194      	lsls	r4, r2, #6
 800248e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002492:	018b      	lsls	r3, r1, #6
 8002494:	1a5b      	subs	r3, r3, r1
 8002496:	eb64 0402 	sbc.w	r4, r4, r2
 800249a:	f04f 0100 	mov.w	r1, #0
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	00e2      	lsls	r2, r4, #3
 80024a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024a8:	00d9      	lsls	r1, r3, #3
 80024aa:	460b      	mov	r3, r1
 80024ac:	4614      	mov	r4, r2
 80024ae:	195b      	adds	r3, r3, r5
 80024b0:	eb44 0406 	adc.w	r4, r4, r6
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	02a2      	lsls	r2, r4, #10
 80024be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024c2:	0299      	lsls	r1, r3, #10
 80024c4:	460b      	mov	r3, r1
 80024c6:	4614      	mov	r4, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	4621      	mov	r1, r4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f04f 0400 	mov.w	r4, #0
 80024d2:	461a      	mov	r2, r3
 80024d4:	4623      	mov	r3, r4
 80024d6:	f7fd fe8b 	bl	80001f0 <__aeabi_uldivmod>
 80024da:	4603      	mov	r3, r0
 80024dc:	460c      	mov	r4, r1
 80024de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	0c1b      	lsrs	r3, r3, #16
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	3301      	adds	r3, #1
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f8:	60bb      	str	r3, [r7, #8]
      break;
 80024fa:	e002      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024fe:	60bb      	str	r3, [r7, #8]
      break;
 8002500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002502:	68bb      	ldr	r3, [r7, #8]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	00f42400 	.word	0x00f42400
 8002514:	007a1200 	.word	0x007a1200

08002518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_RCC_GetHCLKFreq+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000008 	.word	0x20000008

08002530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002534:	f7ff fff0 	bl	8002518 <HAL_RCC_GetHCLKFreq>
 8002538:	4601      	mov	r1, r0
 800253a:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	0a9b      	lsrs	r3, r3, #10
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	4a03      	ldr	r2, [pc, #12]	; (8002554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	fa21 f303 	lsr.w	r3, r1, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	080040b8 	.word	0x080040b8

08002558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800255c:	f7ff ffdc 	bl	8002518 <HAL_RCC_GetHCLKFreq>
 8002560:	4601      	mov	r1, r0
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	0b5b      	lsrs	r3, r3, #13
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	4a03      	ldr	r2, [pc, #12]	; (800257c <HAL_RCC_GetPCLK2Freq+0x24>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40023800 	.word	0x40023800
 800257c:	080040b8 	.word	0x080040b8

08002580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e03f      	b.n	8002612 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f001 fbd4 	bl	8003d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2224      	movs	r2, #36	; 0x24
 80025b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 faa9 	bl	8002b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695a      	ldr	r2, [r3, #20]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2220      	movs	r2, #32
 800260c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	4613      	mov	r3, r2
 8002626:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b20      	cmp	r3, #32
 8002632:	d130      	bne.n	8002696 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_UART_Transmit_IT+0x26>
 800263a:	88fb      	ldrh	r3, [r7, #6]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e029      	b.n	8002698 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_UART_Transmit_IT+0x38>
 800264e:	2302      	movs	r3, #2
 8002650:	e022      	b.n	8002698 <HAL_UART_Transmit_IT+0x7e>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	88fa      	ldrh	r2, [r7, #6]
 8002664:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	88fa      	ldrh	r2, [r7, #6]
 800266a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2221      	movs	r2, #33	; 0x21
 8002676:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002690:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002696:	2302      	movs	r3, #2
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10d      	bne.n	80026f6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_UART_IRQHandler+0x52>
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f003 0320 	and.w	r3, r3, #32
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f992 	bl	8002a18 <UART_Receive_IT>
      return;
 80026f4:	e0cc      	b.n	8002890 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80ab 	beq.w	8002854 <HAL_UART_IRQHandler+0x1b0>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <HAL_UART_IRQHandler+0x70>
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80a0 	beq.w	8002854 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_UART_IRQHandler+0x90>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_UART_IRQHandler+0xb0>
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	f043 0202 	orr.w	r2, r3, #2
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_UART_IRQHandler+0xd0>
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_UART_IRQHandler+0xf0>
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278c:	f043 0208 	orr.w	r2, r3, #8
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d078      	beq.n	800288e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_UART_IRQHandler+0x112>
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f931 	bl	8002a18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c0:	2b40      	cmp	r3, #64	; 0x40
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <HAL_UART_IRQHandler+0x13a>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d031      	beq.n	8002842 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f87a 	bl	80028d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ee:	2b40      	cmp	r3, #64	; 0x40
 80027f0:	d123      	bne.n	800283a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002800:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	2b00      	cmp	r3, #0
 8002808:	d013      	beq.n	8002832 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	4a22      	ldr	r2, [pc, #136]	; (8002898 <HAL_UART_IRQHandler+0x1f4>)
 8002810:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe f80f 	bl	800083a <HAL_DMA_Abort_IT>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800282c:	4610      	mov	r0, r2
 800282e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002830:	e00e      	b.n	8002850 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f846 	bl	80028c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002838:	e00a      	b.n	8002850 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f842 	bl	80028c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002840:	e006      	b.n	8002850 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f83e 	bl	80028c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800284e:	e01e      	b.n	800288e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	bf00      	nop
    return;
 8002852:	e01c      	b.n	800288e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_UART_IRQHandler+0x1cc>
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f867 	bl	800293c <UART_Transmit_IT>
    return;
 800286e:	e00f      	b.n	8002890 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_UART_IRQHandler+0x1ec>
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f8af 	bl	80029e8 <UART_EndTransmit_IT>
    return;
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <HAL_UART_IRQHandler+0x1ec>
    return;
 800288e:	bf00      	nop
  }
}
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	08002915 	.word	0x08002915

0800289c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff ffc8 	bl	80028c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b21      	cmp	r3, #33	; 0x21
 800294e:	d144      	bne.n	80029da <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002958:	d11a      	bne.n	8002990 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800296e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	1c9a      	adds	r2, r3, #2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	621a      	str	r2, [r3, #32]
 8002982:	e00e      	b.n	80029a2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	621a      	str	r2, [r3, #32]
 800298e:	e008      	b.n	80029a2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	1c59      	adds	r1, r3, #1
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6211      	str	r1, [r2, #32]
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4619      	mov	r1, r3
 80029b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80029da:	2302      	movs	r3, #2
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff47 	bl	800289c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b22      	cmp	r3, #34	; 0x22
 8002a2a:	d171      	bne.n	8002b10 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a34:	d123      	bne.n	8002a7e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10e      	bne.n	8002a62 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	1c9a      	adds	r2, r3, #2
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a60:	e029      	b.n	8002ab6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a7c:	e01b      	b.n	8002ab6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10a      	bne.n	8002a9c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6858      	ldr	r0, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	1c59      	adds	r1, r3, #1
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6291      	str	r1, [r2, #40]	; 0x28
 8002a96:	b2c2      	uxtb	r2, r0
 8002a98:	701a      	strb	r2, [r3, #0]
 8002a9a:	e00c      	b.n	8002ab6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	1c58      	adds	r0, r3, #1
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	6288      	str	r0, [r1, #40]	; 0x28
 8002aae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d120      	bne.n	8002b0c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0220 	bic.w	r2, r2, #32
 8002ad8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ae8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695a      	ldr	r2, [r3, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0201 	bic.w	r2, r2, #1
 8002af8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff fed4 	bl	80028b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e002      	b.n	8002b12 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e000      	b.n	8002b12 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002b10:	2302      	movs	r3, #2
  }
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b1c:	b5b0      	push	{r4, r5, r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b5c:	f023 030c 	bic.w	r3, r3, #12
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	68f9      	ldr	r1, [r7, #12]
 8002b66:	430b      	orrs	r3, r1
 8002b68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699a      	ldr	r2, [r3, #24]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b88:	f040 80e4 	bne.w	8002d54 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4aab      	ldr	r2, [pc, #684]	; (8002e40 <UART_SetConfig+0x324>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d004      	beq.n	8002ba0 <UART_SetConfig+0x84>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4aaa      	ldr	r2, [pc, #680]	; (8002e44 <UART_SetConfig+0x328>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d16c      	bne.n	8002c7a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ba0:	f7ff fcda 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	009a      	lsls	r2, r3, #2
 8002bae:	441a      	add	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	4aa3      	ldr	r2, [pc, #652]	; (8002e48 <UART_SetConfig+0x32c>)
 8002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	011c      	lsls	r4, r3, #4
 8002bc4:	f7ff fcc8 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	009a      	lsls	r2, r3, #2
 8002bd2:	441a      	add	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	fbb2 f5f3 	udiv	r5, r2, r3
 8002bde:	f7ff fcbb 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8002be2:	4602      	mov	r2, r0
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	009a      	lsls	r2, r3, #2
 8002bec:	441a      	add	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	4a93      	ldr	r2, [pc, #588]	; (8002e48 <UART_SetConfig+0x32c>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2264      	movs	r2, #100	; 0x64
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	1aeb      	subs	r3, r5, r3
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	3332      	adds	r3, #50	; 0x32
 8002c0c:	4a8e      	ldr	r2, [pc, #568]	; (8002e48 <UART_SetConfig+0x32c>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c1a:	441c      	add	r4, r3
 8002c1c:	f7ff fc9c 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	009a      	lsls	r2, r3, #2
 8002c2a:	441a      	add	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c36:	f7ff fc8f 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	009a      	lsls	r2, r3, #2
 8002c44:	441a      	add	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	4a7d      	ldr	r2, [pc, #500]	; (8002e48 <UART_SetConfig+0x32c>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2264      	movs	r2, #100	; 0x64
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	1aeb      	subs	r3, r5, r3
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	3332      	adds	r3, #50	; 0x32
 8002c64:	4a78      	ldr	r2, [pc, #480]	; (8002e48 <UART_SetConfig+0x32c>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	f003 0207 	and.w	r2, r3, #7
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4422      	add	r2, r4
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	e154      	b.n	8002f24 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002c7a:	f7ff fc59 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	009a      	lsls	r2, r3, #2
 8002c88:	441a      	add	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	4a6c      	ldr	r2, [pc, #432]	; (8002e48 <UART_SetConfig+0x32c>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	011c      	lsls	r4, r3, #4
 8002c9e:	f7ff fc47 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009a      	lsls	r2, r3, #2
 8002cac:	441a      	add	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fbb2 f5f3 	udiv	r5, r2, r3
 8002cb8:	f7ff fc3a 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009a      	lsls	r2, r3, #2
 8002cc6:	441a      	add	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd2:	4a5d      	ldr	r2, [pc, #372]	; (8002e48 <UART_SetConfig+0x32c>)
 8002cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	2264      	movs	r2, #100	; 0x64
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	1aeb      	subs	r3, r5, r3
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	3332      	adds	r3, #50	; 0x32
 8002ce6:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <UART_SetConfig+0x32c>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	095b      	lsrs	r3, r3, #5
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cf4:	441c      	add	r4, r3
 8002cf6:	f7ff fc1b 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	009a      	lsls	r2, r3, #2
 8002d04:	441a      	add	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d10:	f7ff fc0e 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009a      	lsls	r2, r3, #2
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	4a47      	ldr	r2, [pc, #284]	; (8002e48 <UART_SetConfig+0x32c>)
 8002d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	2264      	movs	r2, #100	; 0x64
 8002d34:	fb02 f303 	mul.w	r3, r2, r3
 8002d38:	1aeb      	subs	r3, r5, r3
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	3332      	adds	r3, #50	; 0x32
 8002d3e:	4a42      	ldr	r2, [pc, #264]	; (8002e48 <UART_SetConfig+0x32c>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	f003 0207 	and.w	r2, r3, #7
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4422      	add	r2, r4
 8002d50:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002d52:	e0e7      	b.n	8002f24 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a39      	ldr	r2, [pc, #228]	; (8002e40 <UART_SetConfig+0x324>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d004      	beq.n	8002d68 <UART_SetConfig+0x24c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a38      	ldr	r2, [pc, #224]	; (8002e44 <UART_SetConfig+0x328>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d171      	bne.n	8002e4c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002d68:	f7ff fbf6 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	009a      	lsls	r2, r3, #2
 8002d76:	441a      	add	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d82:	4a31      	ldr	r2, [pc, #196]	; (8002e48 <UART_SetConfig+0x32c>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	095b      	lsrs	r3, r3, #5
 8002d8a:	011c      	lsls	r4, r3, #4
 8002d8c:	f7ff fbe4 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	009a      	lsls	r2, r3, #2
 8002d9a:	441a      	add	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	fbb2 f5f3 	udiv	r5, r2, r3
 8002da6:	f7ff fbd7 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8002daa:	4602      	mov	r2, r0
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009a      	lsls	r2, r3, #2
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	4a21      	ldr	r2, [pc, #132]	; (8002e48 <UART_SetConfig+0x32c>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2264      	movs	r2, #100	; 0x64
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	1aeb      	subs	r3, r5, r3
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	3332      	adds	r3, #50	; 0x32
 8002dd4:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <UART_SetConfig+0x32c>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de0:	441c      	add	r4, r3
 8002de2:	f7ff fbb9 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009a      	lsls	r2, r3, #2
 8002df0:	441a      	add	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	fbb2 f5f3 	udiv	r5, r2, r3
 8002dfc:	f7ff fbac 	bl	8002558 <HAL_RCC_GetPCLK2Freq>
 8002e00:	4602      	mov	r2, r0
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009a      	lsls	r2, r3, #2
 8002e0a:	441a      	add	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	4a0c      	ldr	r2, [pc, #48]	; (8002e48 <UART_SetConfig+0x32c>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	2264      	movs	r2, #100	; 0x64
 8002e20:	fb02 f303 	mul.w	r3, r2, r3
 8002e24:	1aeb      	subs	r3, r5, r3
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	3332      	adds	r3, #50	; 0x32
 8002e2a:	4a07      	ldr	r2, [pc, #28]	; (8002e48 <UART_SetConfig+0x32c>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4422      	add	r2, r4
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	e071      	b.n	8002f24 <UART_SetConfig+0x408>
 8002e40:	40011000 	.word	0x40011000
 8002e44:	40011400 	.word	0x40011400
 8002e48:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002e4c:	f7ff fb70 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	009a      	lsls	r2, r3, #2
 8002e5a:	441a      	add	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e66:	4a31      	ldr	r2, [pc, #196]	; (8002f2c <UART_SetConfig+0x410>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	011c      	lsls	r4, r3, #4
 8002e70:	f7ff fb5e 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009a      	lsls	r2, r3, #2
 8002e7e:	441a      	add	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e8a:	f7ff fb51 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009a      	lsls	r2, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	4a21      	ldr	r2, [pc, #132]	; (8002f2c <UART_SetConfig+0x410>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2264      	movs	r2, #100	; 0x64
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	1aeb      	subs	r3, r5, r3
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	3332      	adds	r3, #50	; 0x32
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <UART_SetConfig+0x410>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ec4:	441c      	add	r4, r3
 8002ec6:	f7ff fb33 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009a      	lsls	r2, r3, #2
 8002ed4:	441a      	add	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ee0:	f7ff fb26 	bl	8002530 <HAL_RCC_GetPCLK1Freq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	009a      	lsls	r2, r3, #2
 8002eee:	441a      	add	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efa:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <UART_SetConfig+0x410>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	2264      	movs	r2, #100	; 0x64
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	1aeb      	subs	r3, r5, r3
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	3332      	adds	r3, #50	; 0x32
 8002f0e:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <UART_SetConfig+0x410>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	f003 020f 	and.w	r2, r3, #15
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4422      	add	r2, r4
 8002f20:	609a      	str	r2, [r3, #8]
}
 8002f22:	e7ff      	b.n	8002f24 <UART_SetConfig+0x408>
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f2c:	51eb851f 	.word	0x51eb851f

08002f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f30:	b084      	sub	sp, #16
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	f107 001c 	add.w	r0, r7, #28
 8002f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d122      	bne.n	8002f8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d105      	bne.n	8002f82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fa5c 	bl	8003440 <USB_CoreReset>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	73fb      	strb	r3, [r7, #15]
 8002f8c:	e01a      	b.n	8002fc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fa50 	bl	8003440 <USB_CoreReset>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	639a      	str	r2, [r3, #56]	; 0x38
 8002fb6:	e005      	b.n	8002fc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d10b      	bne.n	8002fe2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f043 0206 	orr.w	r2, r3, #6
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f043 0220 	orr.w	r2, r3, #32
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fee:	b004      	add	sp, #16
 8002ff0:	4770      	bx	lr

08002ff2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 0201 	bic.w	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d106      	bne.n	8003040 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	e00b      	b.n	8003058 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	e001      	b.n	8003058 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e003      	b.n	8003060 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003058:	2032      	movs	r0, #50	; 0x32
 800305a:	f7fd fabb 	bl	80005d4 <HAL_Delay>

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003068:	b084      	sub	sp, #16
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	e009      	b.n	800309c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	3340      	adds	r3, #64	; 0x40
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	2200      	movs	r2, #0
 8003094:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3301      	adds	r3, #1
 800309a:	613b      	str	r3, [r7, #16]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b0e      	cmp	r3, #14
 80030a0:	d9f2      	bls.n	8003088 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80030a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d112      	bne.n	80030ce <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
 80030cc:	e00b      	b.n	80030e6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80030ec:	461a      	mov	r2, r3
 80030ee:	2300      	movs	r3, #0
 80030f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f8:	4619      	mov	r1, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003100:	461a      	mov	r2, r3
 8003102:	680b      	ldr	r3, [r1, #0]
 8003104:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003108:	2b01      	cmp	r3, #1
 800310a:	d10c      	bne.n	8003126 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800310c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310e:	2b00      	cmp	r3, #0
 8003110:	d104      	bne.n	800311c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003112:	2100      	movs	r1, #0
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f961 	bl	80033dc <USB_SetDevSpeed>
 800311a:	e008      	b.n	800312e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800311c:	2101      	movs	r1, #1
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f95c 	bl	80033dc <USB_SetDevSpeed>
 8003124:	e003      	b.n	800312e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003126:	2103      	movs	r1, #3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f957 	bl	80033dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800312e:	2110      	movs	r1, #16
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f90b 	bl	800334c <USB_FlushTxFifo>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f929 	bl	8003398 <USB_FlushRxFifo>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003156:	461a      	mov	r2, r3
 8003158:	2300      	movs	r3, #0
 800315a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003162:	461a      	mov	r2, r3
 8003164:	2300      	movs	r3, #0
 8003166:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316e:	461a      	mov	r2, r3
 8003170:	2300      	movs	r3, #0
 8003172:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	e043      	b.n	8003202 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800318c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003190:	d118      	bne.n	80031c4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10a      	bne.n	80031ae <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a4:	461a      	mov	r2, r3
 80031a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	e013      	b.n	80031d6 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ba:	461a      	mov	r2, r3
 80031bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e008      	b.n	80031d6 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d0:	461a      	mov	r2, r3
 80031d2:	2300      	movs	r3, #0
 80031d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e2:	461a      	mov	r2, r3
 80031e4:	2300      	movs	r3, #0
 80031e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f4:	461a      	mov	r2, r3
 80031f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	3301      	adds	r3, #1
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	429a      	cmp	r2, r3
 8003208:	d3b7      	bcc.n	800317a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	e043      	b.n	8003298 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003226:	d118      	bne.n	800325a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323a:	461a      	mov	r2, r3
 800323c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e013      	b.n	800326c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003250:	461a      	mov	r2, r3
 8003252:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	e008      	b.n	800326c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4413      	add	r3, r2
 8003262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003266:	461a      	mov	r2, r3
 8003268:	2300      	movs	r3, #0
 800326a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003278:	461a      	mov	r2, r3
 800327a:	2300      	movs	r3, #0
 800327c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328a:	461a      	mov	r2, r3
 800328c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003290:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	3301      	adds	r3, #1
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	429a      	cmp	r2, r3
 800329e:	d3b7      	bcc.n	8003210 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d111      	bne.n	80032de <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <USB_DevInit+0x2dc>)
 80032c4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	f043 0303 	orr.w	r3, r3, #3
 80032dc:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80032ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d105      	bne.n	80032fe <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	f043 0210 	orr.w	r2, r3, #16
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <USB_DevInit+0x2e0>)
 8003304:	4313      	orrs	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f043 0208 	orr.w	r2, r3, #8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800331c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800331e:	2b01      	cmp	r3, #1
 8003320:	d107      	bne.n	8003332 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800332a:	f043 0304 	orr.w	r3, r3, #4
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003332:	7dfb      	ldrb	r3, [r7, #23]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800333e:	b004      	add	sp, #16
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	00800100 	.word	0x00800100
 8003348:	803c3800 	.word	0x803c3800

0800334c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	019b      	lsls	r3, r3, #6
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3301      	adds	r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <USB_FlushTxFifo+0x48>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e006      	b.n	8003386 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b20      	cmp	r3, #32
 8003382:	d0f0      	beq.n	8003366 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	00030d40 	.word	0x00030d40

08003398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2210      	movs	r2, #16
 80033a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3301      	adds	r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a09      	ldr	r2, [pc, #36]	; (80033d8 <USB_FlushRxFifo+0x40>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d901      	bls.n	80033bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e006      	b.n	80033ca <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d0f0      	beq.n	80033aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	00030d40 	.word	0x00030d40

080033dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	68f9      	ldr	r1, [r7, #12]
 80033f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033fc:	4313      	orrs	r3, r2
 80033fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800342e:	2003      	movs	r0, #3
 8003430:	f7fd f8d0 	bl	80005d4 <HAL_Delay>

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a13      	ldr	r2, [pc, #76]	; (80034a4 <USB_CoreReset+0x64>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e01b      	b.n	8003496 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	daf2      	bge.n	800344c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3301      	adds	r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <USB_CoreReset+0x64>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d901      	bls.n	8003488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e006      	b.n	8003496 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d0f0      	beq.n	8003476 <USB_CoreReset+0x36>

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	00030d40 	.word	0x00030d40

080034a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034ac:	f7fd f820 	bl	80004f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034b0:	f000 f90c 	bl	80036cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034b4:	f000 fa94 	bl	80039e0 <MX_GPIO_Init>
  MX_ETH_Init();
 80034b8:	f000 fa04 	bl	80038c4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80034bc:	f000 fa38 	bl	8003930 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80034c0:	f000 fa60 	bl	8003984 <MX_USB_OTG_FS_PCD_Init>
    HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
    HAL_Delay(10);
    flash_addr++;
  }
#endif
  HAL_FLASH_Unlock();
 80034c4:	f7fd fe9e 	bl	8001204 <HAL_FLASH_Unlock>

  /* Get the 1st sector to erase */
  FirstSector = GetSector(FLASH_USER_START_ADDR);
 80034c8:	486f      	ldr	r0, [pc, #444]	; (8003688 <main+0x1e0>)
 80034ca:	f000 f969 	bl	80037a0 <GetSector>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b6e      	ldr	r3, [pc, #440]	; (800368c <main+0x1e4>)
 80034d2:	601a      	str	r2, [r3, #0]
  /* Get the number of sector to erase from 1st sector*/
  NbOfSectors = GetSector(FLASH_USER_END_ADDR) - FirstSector + 1;
 80034d4:	486e      	ldr	r0, [pc, #440]	; (8003690 <main+0x1e8>)
 80034d6:	f000 f9cd 	bl	8003874 <GetSectorSize>
 80034da:	4602      	mov	r2, r0
 80034dc:	4b6d      	ldr	r3, [pc, #436]	; (8003694 <main+0x1ec>)
 80034de:	4413      	add	r3, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f95d 	bl	80037a0 <GetSector>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b68      	ldr	r3, [pc, #416]	; (800368c <main+0x1e4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	3301      	adds	r3, #1
 80034f0:	4a69      	ldr	r2, [pc, #420]	; (8003698 <main+0x1f0>)
 80034f2:	6013      	str	r3, [r2, #0]
  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80034f4:	4b69      	ldr	r3, [pc, #420]	; (800369c <main+0x1f4>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80034fa:	4b68      	ldr	r3, [pc, #416]	; (800369c <main+0x1f4>)
 80034fc:	2202      	movs	r2, #2
 80034fe:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector        = FirstSector;
 8003500:	4b62      	ldr	r3, [pc, #392]	; (800368c <main+0x1e4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a65      	ldr	r2, [pc, #404]	; (800369c <main+0x1f4>)
 8003506:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors     = NbOfSectors;
 8003508:	4b63      	ldr	r3, [pc, #396]	; (8003698 <main+0x1f0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a63      	ldr	r2, [pc, #396]	; (800369c <main+0x1f4>)
 800350e:	60d3      	str	r3, [r2, #12]

  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8003510:	4963      	ldr	r1, [pc, #396]	; (80036a0 <main+0x1f8>)
 8003512:	4862      	ldr	r0, [pc, #392]	; (800369c <main+0x1f4>)
 8003514:	f7fd ffe4 	bl	80014e0 <HAL_FLASHEx_Erase>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01a      	beq.n	8003554 <main+0xac>
  {
	memset(uart_buf,0,UART_BUF_LEN);
 800351e:	221e      	movs	r2, #30
 8003520:	2100      	movs	r1, #0
 8003522:	4860      	ldr	r0, [pc, #384]	; (80036a4 <main+0x1fc>)
 8003524:	f000 fd7c 	bl	8004020 <memset>
	sprintf(uart_buf,"HAL_FLASHEx_Erase ERROR\r\n");
 8003528:	4a5e      	ldr	r2, [pc, #376]	; (80036a4 <main+0x1fc>)
 800352a:	4b5f      	ldr	r3, [pc, #380]	; (80036a8 <main+0x200>)
 800352c:	4615      	mov	r5, r2
 800352e:	461c      	mov	r4, r3
 8003530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003532:	6028      	str	r0, [r5, #0]
 8003534:	6069      	str	r1, [r5, #4]
 8003536:	60aa      	str	r2, [r5, #8]
 8003538:	60eb      	str	r3, [r5, #12]
 800353a:	cc03      	ldmia	r4!, {r0, r1}
 800353c:	6128      	str	r0, [r5, #16]
 800353e:	6169      	str	r1, [r5, #20]
 8003540:	8823      	ldrh	r3, [r4, #0]
 8003542:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 8003544:	221e      	movs	r2, #30
 8003546:	4957      	ldr	r1, [pc, #348]	; (80036a4 <main+0x1fc>)
 8003548:	4858      	ldr	r0, [pc, #352]	; (80036ac <main+0x204>)
 800354a:	f7ff f866 	bl	800261a <HAL_UART_Transmit_IT>
	return -1;
 800354e:	f04f 33ff 	mov.w	r3, #4294967295
 8003552:	e090      	b.n	8003676 <main+0x1ce>
  }


  Address = FLASH_USER_START_ADDR;
 8003554:	4b56      	ldr	r3, [pc, #344]	; (80036b0 <main+0x208>)
 8003556:	4a4c      	ldr	r2, [pc, #304]	; (8003688 <main+0x1e0>)
 8003558:	601a      	str	r2, [r3, #0]

  while(Address < FLASH_USER_END_ADDR)
 800355a:	e02b      	b.n	80035b4 <main+0x10c>
  {
    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, DATA_32) == HAL_OK)
 800355c:	4b54      	ldr	r3, [pc, #336]	; (80036b0 <main+0x208>)
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	a347      	add	r3, pc, #284	; (adr r3, 8003680 <main+0x1d8>)
 8003562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003566:	2002      	movs	r0, #2
 8003568:	f7fd fdf8 	bl	800115c <HAL_FLASH_Program>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d105      	bne.n	800357e <main+0xd6>
    {
      Address = Address + 4;
 8003572:	4b4f      	ldr	r3, [pc, #316]	; (80036b0 <main+0x208>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3304      	adds	r3, #4
 8003578:	4a4d      	ldr	r2, [pc, #308]	; (80036b0 <main+0x208>)
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	e01a      	b.n	80035b4 <main+0x10c>
    }
   else
    {
		memset(uart_buf,0,UART_BUF_LEN);
 800357e:	221e      	movs	r2, #30
 8003580:	2100      	movs	r1, #0
 8003582:	4848      	ldr	r0, [pc, #288]	; (80036a4 <main+0x1fc>)
 8003584:	f000 fd4c 	bl	8004020 <memset>
		sprintf(uart_buf,"HAL_FLASH_Program ERROR\r\n");
 8003588:	4a46      	ldr	r2, [pc, #280]	; (80036a4 <main+0x1fc>)
 800358a:	4b4a      	ldr	r3, [pc, #296]	; (80036b4 <main+0x20c>)
 800358c:	4615      	mov	r5, r2
 800358e:	461c      	mov	r4, r3
 8003590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003592:	6028      	str	r0, [r5, #0]
 8003594:	6069      	str	r1, [r5, #4]
 8003596:	60aa      	str	r2, [r5, #8]
 8003598:	60eb      	str	r3, [r5, #12]
 800359a:	cc03      	ldmia	r4!, {r0, r1}
 800359c:	6128      	str	r0, [r5, #16]
 800359e:	6169      	str	r1, [r5, #20]
 80035a0:	8823      	ldrh	r3, [r4, #0]
 80035a2:	832b      	strh	r3, [r5, #24]
		HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 80035a4:	221e      	movs	r2, #30
 80035a6:	493f      	ldr	r1, [pc, #252]	; (80036a4 <main+0x1fc>)
 80035a8:	4840      	ldr	r0, [pc, #256]	; (80036ac <main+0x204>)
 80035aa:	f7ff f836 	bl	800261a <HAL_UART_Transmit_IT>
		return -1;
 80035ae:	f04f 33ff 	mov.w	r3, #4294967295
 80035b2:	e060      	b.n	8003676 <main+0x1ce>
  while(Address < FLASH_USER_END_ADDR)
 80035b4:	4836      	ldr	r0, [pc, #216]	; (8003690 <main+0x1e8>)
 80035b6:	f000 f95d 	bl	8003874 <GetSectorSize>
 80035ba:	4602      	mov	r2, r0
 80035bc:	4b35      	ldr	r3, [pc, #212]	; (8003694 <main+0x1ec>)
 80035be:	4413      	add	r3, r2
 80035c0:	4a3b      	ldr	r2, [pc, #236]	; (80036b0 <main+0x208>)
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d8c9      	bhi.n	800355c <main+0xb4>
    }
  }

  HAL_FLASH_Lock();
 80035c8:	f7fd fe3e 	bl	8001248 <HAL_FLASH_Lock>

  Address = FLASH_USER_START_ADDR;
 80035cc:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <main+0x208>)
 80035ce:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <main+0x1e0>)
 80035d0:	601a      	str	r2, [r3, #0]
  MemoryProgramStatus = 0x0;
 80035d2:	4b39      	ldr	r3, [pc, #228]	; (80036b8 <main+0x210>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]

  while(Address < FLASH_USER_END_ADDR)
 80035d8:	e013      	b.n	8003602 <main+0x15a>
  {
    data32 = *(__IO uint32_t *)Address;
 80035da:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <main+0x208>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a36      	ldr	r2, [pc, #216]	; (80036bc <main+0x214>)
 80035e2:	6013      	str	r3, [r2, #0]

    if (data32 != DATA_32)
 80035e4:	4b35      	ldr	r3, [pc, #212]	; (80036bc <main+0x214>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a35      	ldr	r2, [pc, #212]	; (80036c0 <main+0x218>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <main+0x150>
    {
      MemoryProgramStatus++;
 80035ee:	4b32      	ldr	r3, [pc, #200]	; (80036b8 <main+0x210>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3301      	adds	r3, #1
 80035f4:	4a30      	ldr	r2, [pc, #192]	; (80036b8 <main+0x210>)
 80035f6:	6013      	str	r3, [r2, #0]
    }
    Address = Address + 4;
 80035f8:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <main+0x208>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4a2c      	ldr	r2, [pc, #176]	; (80036b0 <main+0x208>)
 8003600:	6013      	str	r3, [r2, #0]
  while(Address < FLASH_USER_END_ADDR)
 8003602:	4823      	ldr	r0, [pc, #140]	; (8003690 <main+0x1e8>)
 8003604:	f000 f936 	bl	8003874 <GetSectorSize>
 8003608:	4602      	mov	r2, r0
 800360a:	4b22      	ldr	r3, [pc, #136]	; (8003694 <main+0x1ec>)
 800360c:	4413      	add	r3, r2
 800360e:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <main+0x208>)
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	4293      	cmp	r3, r2
 8003614:	d8e1      	bhi.n	80035da <main+0x132>
  }

  if(MemoryProgramStatus == 0)
 8003616:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <main+0x210>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d115      	bne.n	800364a <main+0x1a2>
  {
		memset(uart_buf,0,UART_BUF_LEN);
 800361e:	221e      	movs	r2, #30
 8003620:	2100      	movs	r1, #0
 8003622:	4820      	ldr	r0, [pc, #128]	; (80036a4 <main+0x1fc>)
 8003624:	f000 fcfc 	bl	8004020 <memset>
		sprintf(uart_buf,"No error detected\r\n");
 8003628:	4a1e      	ldr	r2, [pc, #120]	; (80036a4 <main+0x1fc>)
 800362a:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <main+0x21c>)
 800362c:	4615      	mov	r5, r2
 800362e:	461c      	mov	r4, r3
 8003630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003632:	6028      	str	r0, [r5, #0]
 8003634:	6069      	str	r1, [r5, #4]
 8003636:	60aa      	str	r2, [r5, #8]
 8003638:	60eb      	str	r3, [r5, #12]
 800363a:	6820      	ldr	r0, [r4, #0]
 800363c:	6128      	str	r0, [r5, #16]
		HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 800363e:	221e      	movs	r2, #30
 8003640:	4918      	ldr	r1, [pc, #96]	; (80036a4 <main+0x1fc>)
 8003642:	481a      	ldr	r0, [pc, #104]	; (80036ac <main+0x204>)
 8003644:	f7fe ffe9 	bl	800261a <HAL_UART_Transmit_IT>
 8003648:	e014      	b.n	8003674 <main+0x1cc>
  }
  else
  {
		memset(uart_buf,0,UART_BUF_LEN);
 800364a:	221e      	movs	r2, #30
 800364c:	2100      	movs	r1, #0
 800364e:	4815      	ldr	r0, [pc, #84]	; (80036a4 <main+0x1fc>)
 8003650:	f000 fce6 	bl	8004020 <memset>
		sprintf(uart_buf,"Error detected\r\n");
 8003654:	4a13      	ldr	r2, [pc, #76]	; (80036a4 <main+0x1fc>)
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <main+0x220>)
 8003658:	4615      	mov	r5, r2
 800365a:	461c      	mov	r4, r3
 800365c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800365e:	6028      	str	r0, [r5, #0]
 8003660:	6069      	str	r1, [r5, #4]
 8003662:	60aa      	str	r2, [r5, #8]
 8003664:	60eb      	str	r3, [r5, #12]
 8003666:	7823      	ldrb	r3, [r4, #0]
 8003668:	742b      	strb	r3, [r5, #16]
		HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 800366a:	221e      	movs	r2, #30
 800366c:	490d      	ldr	r1, [pc, #52]	; (80036a4 <main+0x1fc>)
 800366e:	480f      	ldr	r0, [pc, #60]	; (80036ac <main+0x204>)
 8003670:	f7fe ffd3 	bl	800261a <HAL_UART_Transmit_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003674:	e7fe      	b.n	8003674 <main+0x1cc>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8003676:	4618      	mov	r0, r3
 8003678:	bdb0      	pop	{r4, r5, r7, pc}
 800367a:	bf00      	nop
 800367c:	f3af 8000 	nop.w
 8003680:	12345678 	.word	0x12345678
 8003684:	00000000 	.word	0x00000000
 8003688:	0800c000 	.word	0x0800c000
 800368c:	20000028 	.word	0x20000028
 8003690:	081e0000 	.word	0x081e0000
 8003694:	081dffff 	.word	0x081dffff
 8003698:	2000002c 	.word	0x2000002c
 800369c:	20000040 	.word	0x20000040
 80036a0:	20000034 	.word	0x20000034
 80036a4:	200004cc 	.word	0x200004cc
 80036a8:	08004048 	.word	0x08004048
 80036ac:	2000007c 	.word	0x2000007c
 80036b0:	20000030 	.word	0x20000030
 80036b4:	08004064 	.word	0x08004064
 80036b8:	2000003c 	.word	0x2000003c
 80036bc:	20000038 	.word	0x20000038
 80036c0:	12345678 	.word	0x12345678
 80036c4:	08004080 	.word	0x08004080
 80036c8:	08004094 	.word	0x08004094

080036cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b094      	sub	sp, #80	; 0x50
 80036d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036d2:	f107 0320 	add.w	r3, r7, #32
 80036d6:	2230      	movs	r2, #48	; 0x30
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fca0 	bl	8004020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036e0:	f107 030c 	add.w	r3, r7, #12
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	4b28      	ldr	r3, [pc, #160]	; (8003798 <SystemClock_Config+0xcc>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	4a27      	ldr	r2, [pc, #156]	; (8003798 <SystemClock_Config+0xcc>)
 80036fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003700:	4b25      	ldr	r3, [pc, #148]	; (8003798 <SystemClock_Config+0xcc>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800370c:	2300      	movs	r3, #0
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	4b22      	ldr	r3, [pc, #136]	; (800379c <SystemClock_Config+0xd0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a21      	ldr	r2, [pc, #132]	; (800379c <SystemClock_Config+0xd0>)
 8003716:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b1f      	ldr	r3, [pc, #124]	; (800379c <SystemClock_Config+0xd0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003728:	2301      	movs	r3, #1
 800372a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800372c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003732:	2302      	movs	r3, #2
 8003734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003736:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800373c:	2304      	movs	r3, #4
 800373e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003740:	23a8      	movs	r3, #168	; 0xa8
 8003742:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003744:	2302      	movs	r3, #2
 8003746:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003748:	2307      	movs	r3, #7
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800374c:	f107 0320 	add.w	r3, r7, #32
 8003750:	4618      	mov	r0, r3
 8003752:	f7fe fae5 	bl	8001d20 <HAL_RCC_OscConfig>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800375c:	f000 fa04 	bl	8003b68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003760:	230f      	movs	r3, #15
 8003762:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003764:	2302      	movs	r3, #2
 8003766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800376c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	2105      	movs	r1, #5
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fd10 	bl	80021a4 <HAL_RCC_ClockConfig>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800378a:	f000 f9ed 	bl	8003b68 <Error_Handler>
  }
}
 800378e:	bf00      	nop
 8003790:	3750      	adds	r7, #80	; 0x50
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800
 800379c:	40007000 	.word	0x40007000

080037a0 <GetSector>:

static uint32_t GetSector(uint32_t Address)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a2a      	ldr	r2, [pc, #168]	; (8003858 <GetSector+0xb8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d806      	bhi.n	80037c2 <GetSector+0x22>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ba:	d302      	bcc.n	80037c2 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80037bc:	2300      	movs	r3, #0
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	e043      	b.n	800384a <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a25      	ldr	r2, [pc, #148]	; (800385c <GetSector+0xbc>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d806      	bhi.n	80037d8 <GetSector+0x38>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a22      	ldr	r2, [pc, #136]	; (8003858 <GetSector+0xb8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d902      	bls.n	80037d8 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80037d2:	2301      	movs	r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e038      	b.n	800384a <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a21      	ldr	r2, [pc, #132]	; (8003860 <GetSector+0xc0>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d806      	bhi.n	80037ee <GetSector+0x4e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a1e      	ldr	r2, [pc, #120]	; (800385c <GetSector+0xbc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d902      	bls.n	80037ee <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80037e8:	2302      	movs	r3, #2
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	e02d      	b.n	800384a <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <GetSector+0xc4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d806      	bhi.n	8003804 <GetSector+0x64>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <GetSector+0xc0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d902      	bls.n	8003804 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80037fe:	2303      	movs	r3, #3
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	e022      	b.n	800384a <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a18      	ldr	r2, [pc, #96]	; (8003868 <GetSector+0xc8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d806      	bhi.n	800381a <GetSector+0x7a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a15      	ldr	r2, [pc, #84]	; (8003864 <GetSector+0xc4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d902      	bls.n	800381a <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8003814:	2304      	movs	r3, #4
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e017      	b.n	800384a <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a13      	ldr	r2, [pc, #76]	; (800386c <GetSector+0xcc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d806      	bhi.n	8003830 <GetSector+0x90>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a10      	ldr	r2, [pc, #64]	; (8003868 <GetSector+0xc8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d902      	bls.n	8003830 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800382a:	2305      	movs	r3, #5
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e00c      	b.n	800384a <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a0f      	ldr	r2, [pc, #60]	; (8003870 <GetSector+0xd0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d806      	bhi.n	8003846 <GetSector+0xa6>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a0c      	ldr	r2, [pc, #48]	; (800386c <GetSector+0xcc>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d902      	bls.n	8003846 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8003840:	2306      	movs	r3, #6
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	e001      	b.n	800384a <GetSector+0xaa>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7) */
  {
    sector = FLASH_SECTOR_7;
 8003846:	2307      	movs	r3, #7
 8003848:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	08003fff 	.word	0x08003fff
 800385c:	08007fff 	.word	0x08007fff
 8003860:	0800bfff 	.word	0x0800bfff
 8003864:	0800ffff 	.word	0x0800ffff
 8003868:	0801ffff 	.word	0x0801ffff
 800386c:	0803ffff 	.word	0x0803ffff
 8003870:	0805ffff 	.word	0x0805ffff

08003874 <GetSectorSize>:
static uint32_t GetSectorSize(uint32_t Sector)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t sectorsize = 0x00;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
  if((Sector == FLASH_SECTOR_0) || (Sector == FLASH_SECTOR_1) || (Sector == FLASH_SECTOR_2) || (Sector == FLASH_SECTOR_3))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d008      	beq.n	8003898 <GetSectorSize+0x24>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d005      	beq.n	8003898 <GetSectorSize+0x24>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d002      	beq.n	8003898 <GetSectorSize+0x24>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d103      	bne.n	80038a0 <GetSectorSize+0x2c>
  {
    sectorsize = 16 * 1024;
 8003898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	e009      	b.n	80038b4 <GetSectorSize+0x40>
  }
  else if(Sector == FLASH_SECTOR_4)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d103      	bne.n	80038ae <GetSectorSize+0x3a>
  {
    sectorsize = 64 * 1024;
 80038a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	e002      	b.n	80038b4 <GetSectorSize+0x40>
  }
  else
  {
    sectorsize = 128 * 1024;
 80038ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b2:	60fb      	str	r3, [r7, #12]
  }
  return sectorsize;
 80038b4:	68fb      	ldr	r3, [r7, #12]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80038ca:	4b17      	ldr	r3, [pc, #92]	; (8003928 <MX_ETH_Init+0x64>)
 80038cc:	4a17      	ldr	r2, [pc, #92]	; (800392c <MX_ETH_Init+0x68>)
 80038ce:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80038d0:	4b15      	ldr	r3, [pc, #84]	; (8003928 <MX_ETH_Init+0x64>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <MX_ETH_Init+0x64>)
 80038d8:	2200      	movs	r2, #0
 80038da:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80038dc:	2300      	movs	r3, #0
 80038de:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 80038e4:	23e1      	movs	r3, #225	; 0xe1
 80038e6:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 80038e8:	2300      	movs	r3, #0
 80038ea:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 80038ec:	2300      	movs	r3, #0
 80038ee:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 80038f0:	2300      	movs	r3, #0
 80038f2:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80038f4:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <MX_ETH_Init+0x64>)
 80038f6:	463b      	mov	r3, r7
 80038f8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <MX_ETH_Init+0x64>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <MX_ETH_Init+0x64>)
 8003902:	2200      	movs	r2, #0
 8003904:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <MX_ETH_Init+0x64>)
 8003908:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800390c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800390e:	4806      	ldr	r0, [pc, #24]	; (8003928 <MX_ETH_Init+0x64>)
 8003910:	f7fc ffb6 	bl	8000880 <HAL_ETH_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 800391a:	f000 f925 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	200004f0 	.word	0x200004f0
 800392c:	40028000 	.word	0x40028000

08003930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <MX_USART3_UART_Init+0x4c>)
 8003936:	4a12      	ldr	r2, [pc, #72]	; (8003980 <MX_USART3_UART_Init+0x50>)
 8003938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <MX_USART3_UART_Init+0x4c>)
 800393c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003942:	4b0e      	ldr	r3, [pc, #56]	; (800397c <MX_USART3_UART_Init+0x4c>)
 8003944:	2200      	movs	r2, #0
 8003946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <MX_USART3_UART_Init+0x4c>)
 800394a:	2200      	movs	r2, #0
 800394c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <MX_USART3_UART_Init+0x4c>)
 8003950:	2200      	movs	r2, #0
 8003952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003954:	4b09      	ldr	r3, [pc, #36]	; (800397c <MX_USART3_UART_Init+0x4c>)
 8003956:	220c      	movs	r2, #12
 8003958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <MX_USART3_UART_Init+0x4c>)
 800395c:	2200      	movs	r2, #0
 800395e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <MX_USART3_UART_Init+0x4c>)
 8003962:	2200      	movs	r2, #0
 8003964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003966:	4805      	ldr	r0, [pc, #20]	; (800397c <MX_USART3_UART_Init+0x4c>)
 8003968:	f7fe fe0a 	bl	8002580 <HAL_UART_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003972:	f000 f8f9 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	2000007c 	.word	0x2000007c
 8003980:	40004800 	.word	0x40004800

08003984 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800398a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800398e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003990:	4b12      	ldr	r3, [pc, #72]	; (80039dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003992:	2204      	movs	r2, #4
 8003994:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003998:	2202      	movs	r2, #2
 800399a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800399c:	4b0f      	ldr	r3, [pc, #60]	; (80039dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800399e:	2200      	movs	r2, #0
 80039a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80039a2:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039a4:	2202      	movs	r2, #2
 80039a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039bc:	2201      	movs	r2, #1
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80039c0:	4b06      	ldr	r3, [pc, #24]	; (80039dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80039c6:	4805      	ldr	r0, [pc, #20]	; (80039dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039c8:	f7fe f88d 	bl	8001ae6 <HAL_PCD_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80039d2:	f000 f8c9 	bl	8003b68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200000bc 	.word	0x200000bc

080039e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08c      	sub	sp, #48	; 0x30
 80039e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e6:	f107 031c 	add.w	r3, r7, #28
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	605a      	str	r2, [r3, #4]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	4b56      	ldr	r3, [pc, #344]	; (8003b54 <MX_GPIO_Init+0x174>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	4a55      	ldr	r2, [pc, #340]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a00:	f043 0304 	orr.w	r3, r3, #4
 8003a04:	6313      	str	r3, [r2, #48]	; 0x30
 8003a06:	4b53      	ldr	r3, [pc, #332]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	4b4f      	ldr	r3, [pc, #316]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	4a4e      	ldr	r2, [pc, #312]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a20:	6313      	str	r3, [r2, #48]	; 0x30
 8003a22:	4b4c      	ldr	r3, [pc, #304]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	4b48      	ldr	r3, [pc, #288]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a47      	ldr	r2, [pc, #284]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b45      	ldr	r3, [pc, #276]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4a40      	ldr	r2, [pc, #256]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a54:	f043 0302 	orr.w	r3, r3, #2
 8003a58:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5a:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	4b3a      	ldr	r3, [pc, #232]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a39      	ldr	r2, [pc, #228]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a70:	f043 0308 	orr.w	r3, r3, #8
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	4b33      	ldr	r3, [pc, #204]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a32      	ldr	r2, [pc, #200]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <MX_GPIO_Init+0x174>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8003aa4:	482c      	ldr	r0, [pc, #176]	; (8003b58 <MX_GPIO_Init+0x178>)
 8003aa6:	f7fe f805 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2140      	movs	r1, #64	; 0x40
 8003aae:	482b      	ldr	r0, [pc, #172]	; (8003b5c <MX_GPIO_Init+0x17c>)
 8003ab0:	f7fe f800 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003aba:	4829      	ldr	r0, [pc, #164]	; (8003b60 <MX_GPIO_Init+0x180>)
 8003abc:	f7fd fffa 	bl	8001ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ac6:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <MX_GPIO_Init+0x184>)
 8003ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003ace:	f107 031c 	add.w	r3, r7, #28
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4822      	ldr	r0, [pc, #136]	; (8003b60 <MX_GPIO_Init+0x180>)
 8003ad6:	f7fd fe43 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003ada:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8003ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aec:	f107 031c 	add.w	r3, r7, #28
 8003af0:	4619      	mov	r1, r3
 8003af2:	4819      	ldr	r0, [pc, #100]	; (8003b58 <MX_GPIO_Init+0x178>)
 8003af4:	f7fd fe34 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003af8:	2340      	movs	r3, #64	; 0x40
 8003afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003afc:	2301      	movs	r3, #1
 8003afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b04:	2300      	movs	r3, #0
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003b08:	f107 031c 	add.w	r3, r7, #28
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4813      	ldr	r0, [pc, #76]	; (8003b5c <MX_GPIO_Init+0x17c>)
 8003b10:	f7fd fe26 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003b20:	f107 031c 	add.w	r3, r7, #28
 8003b24:	4619      	mov	r1, r3
 8003b26:	480d      	ldr	r0, [pc, #52]	; (8003b5c <MX_GPIO_Init+0x17c>)
 8003b28:	f7fd fe1a 	bl	8001760 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8003b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b32:	2301      	movs	r3, #1
 8003b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8003b3e:	f107 031c 	add.w	r3, r7, #28
 8003b42:	4619      	mov	r1, r3
 8003b44:	4806      	ldr	r0, [pc, #24]	; (8003b60 <MX_GPIO_Init+0x180>)
 8003b46:	f7fd fe0b 	bl	8001760 <HAL_GPIO_Init>

}
 8003b4a:	bf00      	nop
 8003b4c:	3730      	adds	r7, #48	; 0x30
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40020400 	.word	0x40020400
 8003b5c:	40021800 	.word	0x40021800
 8003b60:	40020800 	.word	0x40020800
 8003b64:	10110000 	.word	0x10110000

08003b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <HAL_MspInit+0x4c>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	4a0f      	ldr	r2, [pc, #60]	; (8003bc4 <HAL_MspInit+0x4c>)
 8003b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <HAL_MspInit+0x4c>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_MspInit+0x4c>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a08      	ldr	r2, [pc, #32]	; (8003bc4 <HAL_MspInit+0x4c>)
 8003ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_MspInit+0x4c>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800

08003bc8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08e      	sub	sp, #56	; 0x38
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a55      	ldr	r2, [pc, #340]	; (8003d3c <HAL_ETH_MspInit+0x174>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	f040 80a4 	bne.w	8003d34 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003bec:	2300      	movs	r3, #0
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	4a52      	ldr	r2, [pc, #328]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfc:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c04:	623b      	str	r3, [r7, #32]
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	4b4c      	ldr	r3, [pc, #304]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	4a4b      	ldr	r2, [pc, #300]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c16:	6313      	str	r3, [r2, #48]	; 0x30
 8003c18:	4b49      	ldr	r3, [pc, #292]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c20:	61fb      	str	r3, [r7, #28]
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	2300      	movs	r3, #0
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	4b45      	ldr	r3, [pc, #276]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	4a44      	ldr	r2, [pc, #272]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c32:	6313      	str	r3, [r2, #48]	; 0x30
 8003c34:	4b42      	ldr	r3, [pc, #264]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	4b3e      	ldr	r3, [pc, #248]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	4a3d      	ldr	r2, [pc, #244]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c4a:	f043 0304 	orr.w	r3, r3, #4
 8003c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c50:	4b3b      	ldr	r3, [pc, #236]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	4a36      	ldr	r2, [pc, #216]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6c:	4b34      	ldr	r3, [pc, #208]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	613b      	str	r3, [r7, #16]
 8003c76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	4b30      	ldr	r3, [pc, #192]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	4a2f      	ldr	r2, [pc, #188]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c82:	f043 0302 	orr.w	r3, r3, #2
 8003c86:	6313      	str	r3, [r2, #48]	; 0x30
 8003c88:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c94:	2300      	movs	r3, #0
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9c:	4a28      	ldr	r2, [pc, #160]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca4:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <HAL_ETH_MspInit+0x178>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003cb0:	2332      	movs	r3, #50	; 0x32
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003cc0:	230b      	movs	r3, #11
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc8:	4619      	mov	r1, r3
 8003cca:	481e      	ldr	r0, [pc, #120]	; (8003d44 <HAL_ETH_MspInit+0x17c>)
 8003ccc:	f7fd fd48 	bl	8001760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003cd0:	2386      	movs	r3, #134	; 0x86
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ce0:	230b      	movs	r3, #11
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4817      	ldr	r0, [pc, #92]	; (8003d48 <HAL_ETH_MspInit+0x180>)
 8003cec:	f7fd fd38 	bl	8001760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d02:	230b      	movs	r3, #11
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	480f      	ldr	r0, [pc, #60]	; (8003d4c <HAL_ETH_MspInit+0x184>)
 8003d0e:	f7fd fd27 	bl	8001760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003d12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d20:	2303      	movs	r3, #3
 8003d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d24:	230b      	movs	r3, #11
 8003d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4808      	ldr	r0, [pc, #32]	; (8003d50 <HAL_ETH_MspInit+0x188>)
 8003d30:	f7fd fd16 	bl	8001760 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003d34:	bf00      	nop
 8003d36:	3738      	adds	r7, #56	; 0x38
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40028000 	.word	0x40028000
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40020800 	.word	0x40020800
 8003d48:	40020000 	.word	0x40020000
 8003d4c:	40020400 	.word	0x40020400
 8003d50:	40021800 	.word	0x40021800

08003d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	f107 0314 	add.w	r3, r7, #20
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <HAL_UART_MspInit+0x94>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d134      	bne.n	8003de0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	4b1c      	ldr	r3, [pc, #112]	; (8003dec <HAL_UART_MspInit+0x98>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <HAL_UART_MspInit+0x98>)
 8003d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b19      	ldr	r3, [pc, #100]	; (8003dec <HAL_UART_MspInit+0x98>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b15      	ldr	r3, [pc, #84]	; (8003dec <HAL_UART_MspInit+0x98>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4a14      	ldr	r2, [pc, #80]	; (8003dec <HAL_UART_MspInit+0x98>)
 8003d9c:	f043 0308 	orr.w	r3, r3, #8
 8003da0:	6313      	str	r3, [r2, #48]	; 0x30
 8003da2:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_UART_MspInit+0x98>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003dae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003db8:	2301      	movs	r3, #1
 8003dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003dc0:	2307      	movs	r3, #7
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4809      	ldr	r0, [pc, #36]	; (8003df0 <HAL_UART_MspInit+0x9c>)
 8003dcc:	f7fd fcc8 	bl	8001760 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	2027      	movs	r0, #39	; 0x27
 8003dd6:	f7fc fcfa 	bl	80007ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003dda:	2027      	movs	r0, #39	; 0x27
 8003ddc:	f7fc fd13 	bl	8000806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003de0:	bf00      	nop
 8003de2:	3728      	adds	r7, #40	; 0x28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40004800 	.word	0x40004800
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40020c00 	.word	0x40020c00

08003df4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	; 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e14:	d13f      	bne.n	8003e96 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <HAL_PCD_MspInit+0xac>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	4a20      	ldr	r2, [pc, #128]	; (8003ea0 <HAL_PCD_MspInit+0xac>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	6313      	str	r3, [r2, #48]	; 0x30
 8003e26:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <HAL_PCD_MspInit+0xac>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003e32:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e40:	2303      	movs	r3, #3
 8003e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003e44:	230a      	movs	r3, #10
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e48:	f107 0314 	add.w	r3, r7, #20
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4815      	ldr	r0, [pc, #84]	; (8003ea4 <HAL_PCD_MspInit+0xb0>)
 8003e50:	f7fd fc86 	bl	8001760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003e62:	f107 0314 	add.w	r3, r7, #20
 8003e66:	4619      	mov	r1, r3
 8003e68:	480e      	ldr	r0, [pc, #56]	; (8003ea4 <HAL_PCD_MspInit+0xb0>)
 8003e6a:	f7fd fc79 	bl	8001760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_PCD_MspInit+0xac>)
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	4a0b      	ldr	r2, [pc, #44]	; (8003ea0 <HAL_PCD_MspInit+0xac>)
 8003e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e78:	6353      	str	r3, [r2, #52]	; 0x34
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <HAL_PCD_MspInit+0xac>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	4a07      	ldr	r2, [pc, #28]	; (8003ea0 <HAL_PCD_MspInit+0xac>)
 8003e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e88:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_PCD_MspInit+0xac>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003e96:	bf00      	nop
 8003e98:	3728      	adds	r7, #40	; 0x28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40020000 	.word	0x40020000

08003ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eba:	e7fe      	b.n	8003eba <HardFault_Handler+0x4>

08003ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ec0:	e7fe      	b.n	8003ec0 <MemManage_Handler+0x4>

08003ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ec6:	e7fe      	b.n	8003ec6 <BusFault_Handler+0x4>

08003ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ecc:	e7fe      	b.n	8003ecc <UsageFault_Handler+0x4>

08003ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003efc:	f7fc fb4a 	bl	8000594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f00:	bf00      	nop
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f08:	4802      	ldr	r0, [pc, #8]	; (8003f14 <USART3_IRQHandler+0x10>)
 8003f0a:	f7fe fbcb 	bl	80026a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	2000007c 	.word	0x2000007c

08003f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f1c:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <SystemInit+0x60>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f22:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <SystemInit+0x60>)
 8003f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003f2c:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <SystemInit+0x64>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <SystemInit+0x64>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f38:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <SystemInit+0x64>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <SystemInit+0x64>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a0e      	ldr	r2, [pc, #56]	; (8003f7c <SystemInit+0x64>)
 8003f44:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <SystemInit+0x64>)
 8003f50:	4a0b      	ldr	r2, [pc, #44]	; (8003f80 <SystemInit+0x68>)
 8003f52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <SystemInit+0x64>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <SystemInit+0x64>)
 8003f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <SystemInit+0x64>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f66:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <SystemInit+0x60>)
 8003f68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f6c:	609a      	str	r2, [r3, #8]
#endif
}
 8003f6e:	bf00      	nop
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000ed00 	.word	0xe000ed00
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	24003010 	.word	0x24003010

08003f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fbc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f8a:	e003      	b.n	8003f94 <LoopCopyDataInit>

08003f8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f8c:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f92:	3104      	adds	r1, #4

08003f94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f94:	480b      	ldr	r0, [pc, #44]	; (8003fc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f9c:	d3f6      	bcc.n	8003f8c <CopyDataInit>
  ldr  r2, =_sbss
 8003f9e:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003fa0:	e002      	b.n	8003fa8 <LoopFillZerobss>

08003fa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003fa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003fa4:	f842 3b04 	str.w	r3, [r2], #4

08003fa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003faa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003fac:	d3f9      	bcc.n	8003fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003fae:	f7ff ffb3 	bl	8003f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fb2:	f000 f811 	bl	8003fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fb6:	f7ff fa77 	bl	80034a8 <main>
  bx  lr    
 8003fba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003fbc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003fc0:	080040d0 	.word	0x080040d0
  ldr  r0, =_sdata
 8003fc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003fc8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003fcc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003fd0:	20000538 	.word	0x20000538

08003fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fd4:	e7fe      	b.n	8003fd4 <ADC_IRQHandler>
	...

08003fd8 <__libc_init_array>:
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	4e0d      	ldr	r6, [pc, #52]	; (8004010 <__libc_init_array+0x38>)
 8003fdc:	4c0d      	ldr	r4, [pc, #52]	; (8004014 <__libc_init_array+0x3c>)
 8003fde:	1ba4      	subs	r4, r4, r6
 8003fe0:	10a4      	asrs	r4, r4, #2
 8003fe2:	2500      	movs	r5, #0
 8003fe4:	42a5      	cmp	r5, r4
 8003fe6:	d109      	bne.n	8003ffc <__libc_init_array+0x24>
 8003fe8:	4e0b      	ldr	r6, [pc, #44]	; (8004018 <__libc_init_array+0x40>)
 8003fea:	4c0c      	ldr	r4, [pc, #48]	; (800401c <__libc_init_array+0x44>)
 8003fec:	f000 f820 	bl	8004030 <_init>
 8003ff0:	1ba4      	subs	r4, r4, r6
 8003ff2:	10a4      	asrs	r4, r4, #2
 8003ff4:	2500      	movs	r5, #0
 8003ff6:	42a5      	cmp	r5, r4
 8003ff8:	d105      	bne.n	8004006 <__libc_init_array+0x2e>
 8003ffa:	bd70      	pop	{r4, r5, r6, pc}
 8003ffc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004000:	4798      	blx	r3
 8004002:	3501      	adds	r5, #1
 8004004:	e7ee      	b.n	8003fe4 <__libc_init_array+0xc>
 8004006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800400a:	4798      	blx	r3
 800400c:	3501      	adds	r5, #1
 800400e:	e7f2      	b.n	8003ff6 <__libc_init_array+0x1e>
 8004010:	080040c8 	.word	0x080040c8
 8004014:	080040c8 	.word	0x080040c8
 8004018:	080040c8 	.word	0x080040c8
 800401c:	080040cc 	.word	0x080040cc

08004020 <memset>:
 8004020:	4402      	add	r2, r0
 8004022:	4603      	mov	r3, r0
 8004024:	4293      	cmp	r3, r2
 8004026:	d100      	bne.n	800402a <memset+0xa>
 8004028:	4770      	bx	lr
 800402a:	f803 1b01 	strb.w	r1, [r3], #1
 800402e:	e7f9      	b.n	8004024 <memset+0x4>

08004030 <_init>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	bf00      	nop
 8004034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004036:	bc08      	pop	{r3}
 8004038:	469e      	mov	lr, r3
 800403a:	4770      	bx	lr

0800403c <_fini>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr
