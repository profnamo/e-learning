
10_usb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007154  08007154  00017154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071fc  080071fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007204  08007204  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007204  08007204  00017204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800720c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000193c  200001e0  080073ec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b1c  080073ec  00021b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e29  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cc2  00000000  00000000  00033039  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf0  00000000  00000000  00035d00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  000369f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025f23  00000000  00000000  00037588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d2fc  00000000  00000000  0005d4ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d488d  00000000  00000000  0006a7a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f034  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000372c  00000000  00000000  0013f0b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800713c 	.word	0x0800713c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800713c 	.word	0x0800713c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f94d 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f005 fb3e 	bl	8005c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f965 	bl	80008c2 <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 f92d 	bl	800086e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000118 	.word	0x20000118
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	2000020c 	.word	0x2000020c

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000020c 	.word	0x2000020c

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff ffee 	bl	800065c <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_Delay+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffde 	bl	800065c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8f7      	bhi.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000004 	.word	0x20000004

080006b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	db0b      	blt.n	8000746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	f003 021f 	and.w	r2, r3, #31
 8000734:	4907      	ldr	r1, [pc, #28]	; (8000754 <__NVIC_EnableIRQ+0x38>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	095b      	lsrs	r3, r3, #5
 800073c:	2001      	movs	r0, #1
 800073e:	fa00 f202 	lsl.w	r2, r0, r2
 8000742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	; (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	; 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000824:	d301      	bcc.n	800082a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000826:	2301      	movs	r3, #1
 8000828:	e00f      	b.n	800084a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <SysTick_Config+0x40>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000832:	210f      	movs	r1, #15
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f7ff ff8e 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SysTick_Config+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <SysTick_Config+0x40>)
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff29 	bl	80006b8 <__NVIC_SetPriorityGrouping>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000880:	f7ff ff3e 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	f7ff ff8e 	bl	80007ac <NVIC_EncodePriority>
 8000890:	4602      	mov	r2, r0
 8000892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff5d 	bl	8000758 <__NVIC_SetPriority>
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff31 	bl	800071c <__NVIC_EnableIRQ>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffa2 	bl	8000814 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008dc:	b480      	push	{r7}
 80008de:	b089      	sub	sp, #36	; 0x24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
 80008f6:	e177      	b.n	8000be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008f8:	2201      	movs	r2, #1
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	429a      	cmp	r2, r3
 8000912:	f040 8166 	bne.w	8000be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d003      	beq.n	8000926 <HAL_GPIO_Init+0x4a>
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b12      	cmp	r3, #18
 8000924:	d123      	bne.n	800096e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	08da      	lsrs	r2, r3, #3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3208      	adds	r2, #8
 800092e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	220f      	movs	r2, #15
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4013      	ands	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	691a      	ldr	r2, [r3, #16]
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	f003 0307 	and.w	r3, r3, #7
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	69ba      	ldr	r2, [r7, #24]
 800095c:	4313      	orrs	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	08da      	lsrs	r2, r3, #3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3208      	adds	r2, #8
 8000968:	69b9      	ldr	r1, [r7, #24]
 800096a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	2203      	movs	r2, #3
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	4013      	ands	r3, r2
 8000984:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f003 0203 	and.w	r2, r3, #3
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4313      	orrs	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d00b      	beq.n	80009c2 <HAL_GPIO_Init+0xe6>
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d007      	beq.n	80009c2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009b6:	2b11      	cmp	r3, #17
 80009b8:	d003      	beq.n	80009c2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	2b12      	cmp	r3, #18
 80009c0:	d130      	bne.n	8000a24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	68da      	ldr	r2, [r3, #12]
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009f8:	2201      	movs	r2, #1
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	4013      	ands	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	091b      	lsrs	r3, r3, #4
 8000a0e:	f003 0201 	and.w	r2, r3, #1
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	2203      	movs	r2, #3
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	689a      	ldr	r2, [r3, #8]
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f000 80c0 	beq.w	8000be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b65      	ldr	r3, [pc, #404]	; (8000bfc <HAL_GPIO_Init+0x320>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a64      	ldr	r2, [pc, #400]	; (8000bfc <HAL_GPIO_Init+0x320>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b62      	ldr	r3, [pc, #392]	; (8000bfc <HAL_GPIO_Init+0x320>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a7e:	4a60      	ldr	r2, [pc, #384]	; (8000c00 <HAL_GPIO_Init+0x324>)
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	089b      	lsrs	r3, r3, #2
 8000a84:	3302      	adds	r3, #2
 8000a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f003 0303 	and.w	r3, r3, #3
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	220f      	movs	r2, #15
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a57      	ldr	r2, [pc, #348]	; (8000c04 <HAL_GPIO_Init+0x328>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d037      	beq.n	8000b1a <HAL_GPIO_Init+0x23e>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a56      	ldr	r2, [pc, #344]	; (8000c08 <HAL_GPIO_Init+0x32c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d031      	beq.n	8000b16 <HAL_GPIO_Init+0x23a>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a55      	ldr	r2, [pc, #340]	; (8000c0c <HAL_GPIO_Init+0x330>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d02b      	beq.n	8000b12 <HAL_GPIO_Init+0x236>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a54      	ldr	r2, [pc, #336]	; (8000c10 <HAL_GPIO_Init+0x334>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d025      	beq.n	8000b0e <HAL_GPIO_Init+0x232>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a53      	ldr	r2, [pc, #332]	; (8000c14 <HAL_GPIO_Init+0x338>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d01f      	beq.n	8000b0a <HAL_GPIO_Init+0x22e>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a52      	ldr	r2, [pc, #328]	; (8000c18 <HAL_GPIO_Init+0x33c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d019      	beq.n	8000b06 <HAL_GPIO_Init+0x22a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a51      	ldr	r2, [pc, #324]	; (8000c1c <HAL_GPIO_Init+0x340>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d013      	beq.n	8000b02 <HAL_GPIO_Init+0x226>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a50      	ldr	r2, [pc, #320]	; (8000c20 <HAL_GPIO_Init+0x344>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d00d      	beq.n	8000afe <HAL_GPIO_Init+0x222>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a4f      	ldr	r2, [pc, #316]	; (8000c24 <HAL_GPIO_Init+0x348>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d007      	beq.n	8000afa <HAL_GPIO_Init+0x21e>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a4e      	ldr	r2, [pc, #312]	; (8000c28 <HAL_GPIO_Init+0x34c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d101      	bne.n	8000af6 <HAL_GPIO_Init+0x21a>
 8000af2:	2309      	movs	r3, #9
 8000af4:	e012      	b.n	8000b1c <HAL_GPIO_Init+0x240>
 8000af6:	230a      	movs	r3, #10
 8000af8:	e010      	b.n	8000b1c <HAL_GPIO_Init+0x240>
 8000afa:	2308      	movs	r3, #8
 8000afc:	e00e      	b.n	8000b1c <HAL_GPIO_Init+0x240>
 8000afe:	2307      	movs	r3, #7
 8000b00:	e00c      	b.n	8000b1c <HAL_GPIO_Init+0x240>
 8000b02:	2306      	movs	r3, #6
 8000b04:	e00a      	b.n	8000b1c <HAL_GPIO_Init+0x240>
 8000b06:	2305      	movs	r3, #5
 8000b08:	e008      	b.n	8000b1c <HAL_GPIO_Init+0x240>
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	e006      	b.n	8000b1c <HAL_GPIO_Init+0x240>
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e004      	b.n	8000b1c <HAL_GPIO_Init+0x240>
 8000b12:	2302      	movs	r3, #2
 8000b14:	e002      	b.n	8000b1c <HAL_GPIO_Init+0x240>
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <HAL_GPIO_Init+0x240>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	69fa      	ldr	r2, [r7, #28]
 8000b1e:	f002 0203 	and.w	r2, r2, #3
 8000b22:	0092      	lsls	r2, r2, #2
 8000b24:	4093      	lsls	r3, r2
 8000b26:	69ba      	ldr	r2, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b2c:	4934      	ldr	r1, [pc, #208]	; (8000c00 <HAL_GPIO_Init+0x324>)
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	089b      	lsrs	r3, r3, #2
 8000b32:	3302      	adds	r3, #2
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b3a:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	4013      	ands	r3, r2
 8000b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b5e:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b64:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b88:	4a28      	ldr	r2, [pc, #160]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b8e:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	43db      	mvns	r3, r3
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bdc:	4a13      	ldr	r2, [pc, #76]	; (8000c2c <HAL_GPIO_Init+0x350>)
 8000bde:	69bb      	ldr	r3, [r7, #24]
 8000be0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3301      	adds	r3, #1
 8000be6:	61fb      	str	r3, [r7, #28]
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b0f      	cmp	r3, #15
 8000bec:	f67f ae84 	bls.w	80008f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3724      	adds	r7, #36	; 0x24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40013800 	.word	0x40013800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40020800 	.word	0x40020800
 8000c10:	40020c00 	.word	0x40020c00
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40021400 	.word	0x40021400
 8000c1c:	40021800 	.word	0x40021800
 8000c20:	40021c00 	.word	0x40021c00
 8000c24:	40022000 	.word	0x40022000
 8000c28:	40022400 	.word	0x40022400
 8000c2c:	40013c00 	.word	0x40013c00

08000c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c40:	787b      	ldrb	r3, [r7, #1]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c4c:	e003      	b.n	8000c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	041a      	lsls	r2, r3, #16
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	619a      	str	r2, [r3, #24]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c64:	b08f      	sub	sp, #60	; 0x3c
 8000c66:	af0a      	add	r7, sp, #40	; 0x28
 8000c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	e10f      	b.n	8000e94 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d106      	bne.n	8000c94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f005 f9c6 	bl	8006020 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2203      	movs	r2, #3
 8000c98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 f8fd 	bl	8002eb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	687e      	ldr	r6, [r7, #4]
 8000cc0:	466d      	mov	r5, sp
 8000cc2:	f106 0410 	add.w	r4, r6, #16
 8000cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cd6:	1d33      	adds	r3, r6, #4
 8000cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cda:	6838      	ldr	r0, [r7, #0]
 8000cdc:	f001 ffd4 	bl	8002c88 <USB_CoreInit>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2202      	movs	r2, #2
 8000cea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e0d0      	b.n	8000e94 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 f8eb 	bl	8002ed4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]
 8000d02:	e04a      	b.n	8000d9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	333d      	adds	r3, #61	; 0x3d
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d18:	7bfa      	ldrb	r2, [r7, #15]
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	1a9b      	subs	r3, r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	440b      	add	r3, r1
 8000d26:	333c      	adds	r3, #60	; 0x3c
 8000d28:	7bfa      	ldrb	r2, [r7, #15]
 8000d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d2c:	7bfa      	ldrb	r2, [r7, #15]
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	b298      	uxth	r0, r3
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	1a9b      	subs	r3, r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	3342      	adds	r3, #66	; 0x42
 8000d40:	4602      	mov	r2, r0
 8000d42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	440b      	add	r3, r1
 8000d52:	333f      	adds	r3, #63	; 0x3f
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d58:	7bfa      	ldrb	r2, [r7, #15]
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	3344      	adds	r3, #68	; 0x44
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d6c:	7bfa      	ldrb	r2, [r7, #15]
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	4613      	mov	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	1a9b      	subs	r3, r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	3348      	adds	r3, #72	; 0x48
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d80:	7bfa      	ldrb	r2, [r7, #15]
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	4613      	mov	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	1a9b      	subs	r3, r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3350      	adds	r3, #80	; 0x50
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	3301      	adds	r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d3af      	bcc.n	8000d04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e044      	b.n	8000e34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000daa:	7bfa      	ldrb	r2, [r7, #15]
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	440b      	add	r3, r1
 8000db8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000dd2:	7bfa      	ldrb	r2, [r7, #15]
 8000dd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000dd6:	7bfa      	ldrb	r2, [r7, #15]
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	1a9b      	subs	r3, r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	440b      	add	r3, r1
 8000de4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000dec:	7bfa      	ldrb	r2, [r7, #15]
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	4613      	mov	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	1a9b      	subs	r3, r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e02:	7bfa      	ldrb	r2, [r7, #15]
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	4613      	mov	r3, r2
 8000e08:	00db      	lsls	r3, r3, #3
 8000e0a:	1a9b      	subs	r3, r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e18:	7bfa      	ldrb	r2, [r7, #15]
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	1a9b      	subs	r3, r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	440b      	add	r3, r1
 8000e26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	3301      	adds	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	7bfa      	ldrb	r2, [r7, #15]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d3b5      	bcc.n	8000daa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	687e      	ldr	r6, [r7, #4]
 8000e46:	466d      	mov	r5, sp
 8000e48:	f106 0410 	add.w	r4, r6, #16
 8000e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e58:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e5c:	1d33      	adds	r3, r6, #4
 8000e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e60:	6838      	ldr	r0, [r7, #0]
 8000e62:	f002 f861 	bl	8002f28 <USB_DevInit>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d005      	beq.n	8000e78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2202      	movs	r2, #2
 8000e70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e00d      	b.n	8000e94 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 f856 	bl	8003f3e <USB_DevDisconnect>

  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d101      	bne.n	8000eb8 <HAL_PCD_Start+0x1c>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e020      	b.n	8000efa <HAL_PCD_Start+0x5e>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d109      	bne.n	8000edc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d005      	beq.n	8000edc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 f814 	bl	8003f0e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 ffd0 	bl	8002e90 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f02:	b590      	push	{r4, r7, lr}
 8000f04:	b08d      	sub	sp, #52	; 0x34
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 f8bb 	bl	8004094 <USB_GetMode>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 838e 	bne.w	8001642 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 f81f 	bl	8003f6e <USB_ReadInterrupts>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8384 	beq.w	8001640 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 f816 	bl	8003f6e <USB_ReadInterrupts>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d107      	bne.n	8000f5c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f002 0202 	and.w	r2, r2, #2
 8000f5a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 f804 	bl	8003f6e <USB_ReadInterrupts>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000f70:	d17b      	bne.n	800106a <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 f80a 	bl	8003f94 <USB_ReadDevAllOutEpInterrupt>
 8000f80:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000f82:	e06f      	b.n	8001064 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d064      	beq.n	8001058 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 f82f 	bl	8003ffc <USB_ReadDevOutEPInterrupt>
 8000f9e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00c      	beq.n	8000fc4 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	015a      	lsls	r2, r3, #5
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2301      	movs	r3, #1
 8000fba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fe0e 	bl	8001be0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00c      	beq.n	8000fe8 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000fce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 ff0d 	bl	8001df0 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	015a      	lsls	r2, r3, #5
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	4413      	add	r3, r2
 8000fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d008      	beq.n	8001004 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	015a      	lsls	r2, r3, #5
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ffe:	461a      	mov	r2, r3
 8001000:	2310      	movs	r3, #16
 8001002:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	f003 0320 	and.w	r3, r3, #32
 800100a:	2b00      	cmp	r3, #0
 800100c:	d015      	beq.n	800103a <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d108      	bne.n	8001028 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001020:	461a      	mov	r2, r3
 8001022:	2101      	movs	r1, #1
 8001024:	f003 f87a 	bl	800411c <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	015a      	lsls	r2, r3, #5
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	4413      	add	r3, r2
 8001030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001034:	461a      	mov	r2, r3
 8001036:	2320      	movs	r3, #32
 8001038:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d009      	beq.n	8001058 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001046:	015a      	lsls	r2, r3, #5
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	4413      	add	r3, r2
 800104c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001050:	461a      	mov	r2, r3
 8001052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001056:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	3301      	adds	r3, #1
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800105e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001060:	085b      	lsrs	r3, r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001066:	2b00      	cmp	r3, #0
 8001068:	d18c      	bne.n	8000f84 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f002 ff7d 	bl	8003f6e <USB_ReadInterrupts>
 8001074:	4603      	mov	r3, r0
 8001076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800107e:	f040 80c4 	bne.w	800120a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f002 ff9e 	bl	8003fc8 <USB_ReadDevAllInEpInterrupt>
 800108c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001092:	e0b6      	b.n	8001202 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 80ab 	beq.w	80011f6 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 ffc4 	bl	8004038 <USB_ReadDevInEPInterrupt>
 80010b0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d05b      	beq.n	8001174 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	2201      	movs	r2, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69f9      	ldr	r1, [r7, #28]
 80010d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80010dc:	4013      	ands	r3, r2
 80010de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	015a      	lsls	r2, r3, #5
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	4413      	add	r3, r2
 80010e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010ec:	461a      	mov	r2, r3
 80010ee:	2301      	movs	r3, #1
 80010f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d11b      	bne.n	8001132 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	3348      	adds	r3, #72	; 0x48
 800110a:	6819      	ldr	r1, [r3, #0]
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001110:	4613      	mov	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	1a9b      	subs	r3, r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4403      	add	r3, r0
 800111a:	3344      	adds	r3, #68	; 0x44
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4419      	add	r1, r3
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001124:	4613      	mov	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4403      	add	r3, r0
 800112e:	3348      	adds	r3, #72	; 0x48
 8001130:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4619      	mov	r1, r3
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f005 f800 	bl	800613e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d116      	bne.n	8001174 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	2b00      	cmp	r3, #0
 800114a:	d113      	bne.n	8001174 <HAL_PCD_IRQHandler+0x272>
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001150:	4613      	mov	r3, r2
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	1a9b      	subs	r3, r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	440b      	add	r3, r1
 800115a:	3350      	adds	r3, #80	; 0x50
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d108      	bne.n	8001174 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800116c:	461a      	mov	r2, r3
 800116e:	2101      	movs	r1, #1
 8001170:	f002 ffd4 	bl	800411c <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	2b00      	cmp	r3, #0
 800117c:	d008      	beq.n	8001190 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	015a      	lsls	r2, r3, #5
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	4413      	add	r3, r2
 8001186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800118a:	461a      	mov	r2, r3
 800118c:	2308      	movs	r3, #8
 800118e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	2b00      	cmp	r3, #0
 8001198:	d008      	beq.n	80011ac <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	015a      	lsls	r2, r3, #5
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	4413      	add	r3, r2
 80011a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011a6:	461a      	mov	r2, r3
 80011a8:	2310      	movs	r3, #16
 80011aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d008      	beq.n	80011c8 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	015a      	lsls	r2, r3, #5
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	4413      	add	r3, r2
 80011be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011c2:	461a      	mov	r2, r3
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d008      	beq.n	80011e4 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	015a      	lsls	r2, r3, #5
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	4413      	add	r3, r2
 80011da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011de:	461a      	mov	r2, r3
 80011e0:	2302      	movs	r3, #2
 80011e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80011ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 fc67 	bl	8001ac4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	3301      	adds	r3, #1
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80011fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fe:	085b      	lsrs	r3, r3, #1
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001204:	2b00      	cmp	r3, #0
 8001206:	f47f af45 	bne.w	8001094 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f002 fead 	bl	8003f6e <USB_ReadInterrupts>
 8001214:	4603      	mov	r3, r0
 8001216:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800121a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800121e:	d122      	bne.n	8001266 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	69fa      	ldr	r2, [r7, #28]
 800122a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800122e:	f023 0301 	bic.w	r3, r3, #1
 8001232:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800123a:	2b01      	cmp	r3, #1
 800123c:	d108      	bne.n	8001250 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001246:	2100      	movs	r1, #0
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fe89 	bl	8001f60 <HAL_PCDEx_LPM_Callback>
 800124e:	e002      	b.n	8001256 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f004 ffeb 	bl	800622c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	695a      	ldr	r2, [r3, #20]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001264:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fe7f 	bl	8003f6e <USB_ReadInterrupts>
 8001270:	4603      	mov	r3, r0
 8001272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001276:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800127a:	d112      	bne.n	80012a2 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b01      	cmp	r3, #1
 800128a:	d102      	bne.n	8001292 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f004 ffa7 	bl	80061e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	695a      	ldr	r2, [r3, #20]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80012a0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 fe61 	bl	8003f6e <USB_ReadInterrupts>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012b6:	f040 80a7 	bne.w	8001408 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2110      	movs	r1, #16
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 ff99 	bl	800320c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012de:	e036      	b.n	800134e <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80012e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e2:	015a      	lsls	r2, r3, #5
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	4413      	add	r3, r2
 80012e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012ec:	461a      	mov	r2, r3
 80012ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80012f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f6:	015a      	lsls	r2, r3, #5
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	4413      	add	r3, r2
 80012fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001304:	0151      	lsls	r1, r2, #5
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	440a      	add	r2, r1
 800130a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800130e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001312:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001316:	015a      	lsls	r2, r3, #5
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	4413      	add	r3, r2
 800131c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001320:	461a      	mov	r2, r3
 8001322:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001326:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132a:	015a      	lsls	r2, r3, #5
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	4413      	add	r3, r2
 8001330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001338:	0151      	lsls	r1, r2, #5
 800133a:	69fa      	ldr	r2, [r7, #28]
 800133c:	440a      	add	r2, r1
 800133e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001346:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800134a:	3301      	adds	r3, #1
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001354:	429a      	cmp	r2, r3
 8001356:	d3c3      	bcc.n	80012e0 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001366:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800136a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	2b00      	cmp	r3, #0
 8001372:	d016      	beq.n	80013a2 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800137a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001384:	f043 030b 	orr.w	r3, r3, #11
 8001388:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800139a:	f043 030b 	orr.w	r3, r3, #11
 800139e:	6453      	str	r3, [r2, #68]	; 0x44
 80013a0:	e015      	b.n	80013ce <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013b4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80013b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013c8:	f043 030b 	orr.w	r3, r3, #11
 80013cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80013f2:	461a      	mov	r2, r3
 80013f4:	f002 fe92 	bl	800411c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001406:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f002 fdae 	bl	8003f6e <USB_ReadInterrupts>
 8001412:	4603      	mov	r3, r0
 8001414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800141c:	d124      	bne.n	8001468 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f002 fe44 	bl	80040b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f001 ff4e 	bl	80032ce <USB_GetDevSpeed>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681c      	ldr	r4, [r3, #0]
 800143e:	f001 f997 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 8001442:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	4620      	mov	r0, r4
 800144e:	f001 fc7d 	bl	8002d4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f004 fe9b 	bl	800618e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001466:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fd7e 	bl	8003f6e <USB_ReadInterrupts>
 8001472:	4603      	mov	r3, r0
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	2b10      	cmp	r3, #16
 800147a:	d161      	bne.n	8001540 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	699a      	ldr	r2, [r3, #24]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0210 	bic.w	r2, r2, #16
 800148a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f003 020f 	and.w	r2, r3, #15
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	3304      	adds	r3, #4
 80014aa:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	0c5b      	lsrs	r3, r3, #17
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d124      	bne.n	8001502 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d035      	beq.n	8001530 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	461a      	mov	r2, r3
 80014d6:	6a38      	ldr	r0, [r7, #32]
 80014d8:	f002 fbf6 	bl	8003cc8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014e8:	441a      	add	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fa:	441a      	add	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	619a      	str	r2, [r3, #24]
 8001500:	e016      	b.n	8001530 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	0c5b      	lsrs	r3, r3, #17
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	2b06      	cmp	r3, #6
 800150c:	d110      	bne.n	8001530 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001514:	2208      	movs	r2, #8
 8001516:	4619      	mov	r1, r3
 8001518:	6a38      	ldr	r0, [r7, #32]
 800151a:	f002 fbd5 	bl	8003cc8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800152a:	441a      	add	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0210 	orr.w	r2, r2, #16
 800153e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f002 fd12 	bl	8003f6e <USB_ReadInterrupts>
 800154a:	4603      	mov	r3, r0
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b08      	cmp	r3, #8
 8001552:	d10a      	bne.n	800156a <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f004 fe0c 	bl	8006172 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f002 0208 	and.w	r2, r2, #8
 8001568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fcfd 	bl	8003f6e <USB_ReadInterrupts>
 8001574:	4603      	mov	r3, r0
 8001576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800157e:	d10f      	bne.n	80015a0 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4619      	mov	r1, r3
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f004 fe6e 	bl	800626c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800159e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fce2 	bl	8003f6e <USB_ReadInterrupts>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015b4:	d10f      	bne.n	80015d6 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4619      	mov	r1, r3
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f004 fe41 	bl	8006248 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80015d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 fcc7 	bl	8003f6e <USB_ReadInterrupts>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ea:	d10a      	bne.n	8001602 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f004 fe4f 	bl	8006290 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f002 fcb1 	bl	8003f6e <USB_ReadInterrupts>
 800160c:	4603      	mov	r3, r0
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b04      	cmp	r3, #4
 8001614:	d115      	bne.n	8001642 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f004 fe3f 	bl	80062ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6859      	ldr	r1, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	e000      	b.n	8001642 <HAL_PCD_IRQHandler+0x740>
      return;
 8001640:	bf00      	nop
    }
  }
}
 8001642:	3734      	adds	r7, #52	; 0x34
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}

08001648 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_PCD_SetAddress+0x1a>
 800165e:	2302      	movs	r3, #2
 8001660:	e013      	b.n	800168a <HAL_PCD_SetAddress+0x42>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f002 fc21 	bl	8003ec2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	4608      	mov	r0, r1
 800169c:	4611      	mov	r1, r2
 800169e:	461a      	mov	r2, r3
 80016a0:	4603      	mov	r3, r0
 80016a2:	70fb      	strb	r3, [r7, #3]
 80016a4:	460b      	mov	r3, r1
 80016a6:	803b      	strh	r3, [r7, #0]
 80016a8:	4613      	mov	r3, r2
 80016aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da0f      	bge.n	80016d8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	f003 020f 	and.w	r2, r3, #15
 80016be:	4613      	mov	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	1a9b      	subs	r3, r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	3338      	adds	r3, #56	; 0x38
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	4413      	add	r3, r2
 80016cc:	3304      	adds	r3, #4
 80016ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2201      	movs	r2, #1
 80016d4:	705a      	strb	r2, [r3, #1]
 80016d6:	e00f      	b.n	80016f8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	f003 020f 	and.w	r2, r3, #15
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	1a9b      	subs	r3, r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	3304      	adds	r3, #4
 80016f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001704:	883a      	ldrh	r2, [r7, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	78ba      	ldrb	r2, [r7, #2]
 800170e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b29a      	uxth	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001722:	78bb      	ldrb	r3, [r7, #2]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d102      	bne.n	800172e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_PCD_EP_Open+0xaa>
 8001738:	2302      	movs	r3, #2
 800173a:	e00e      	b.n	800175a <HAL_PCD_EP_Open+0xc8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68f9      	ldr	r1, [r7, #12]
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fde4 	bl	8003318 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001758:	7afb      	ldrb	r3, [r7, #11]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800176e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001772:	2b00      	cmp	r3, #0
 8001774:	da0f      	bge.n	8001796 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	f003 020f 	and.w	r2, r3, #15
 800177c:	4613      	mov	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	3338      	adds	r3, #56	; 0x38
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	3304      	adds	r3, #4
 800178c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2201      	movs	r2, #1
 8001792:	705a      	strb	r2, [r3, #1]
 8001794:	e00f      	b.n	80017b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	f003 020f 	and.w	r2, r3, #15
 800179c:	4613      	mov	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	4413      	add	r3, r2
 80017ac:	3304      	adds	r3, #4
 80017ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_PCD_EP_Close+0x6e>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e00e      	b.n	80017ee <HAL_PCD_EP_Close+0x8c>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 fe22 	bl	8003428 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	460b      	mov	r3, r1
 8001804:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001806:	7afb      	ldrb	r3, [r7, #11]
 8001808:	f003 020f 	and.w	r2, r3, #15
 800180c:	4613      	mov	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	3304      	adds	r3, #4
 800181e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2200      	movs	r2, #0
 8001836:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001838:	7afb      	ldrb	r3, [r7, #11]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	b2da      	uxtb	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d102      	bne.n	8001852 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001852:	7afb      	ldrb	r3, [r7, #11]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	2b00      	cmp	r3, #0
 800185a:	d109      	bne.n	8001870 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	461a      	mov	r2, r3
 8001868:	6979      	ldr	r1, [r7, #20]
 800186a:	f002 f8a5 	bl	80039b8 <USB_EP0StartXfer>
 800186e:	e008      	b.n	8001882 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	6979      	ldr	r1, [r7, #20]
 800187e:	f001 fe57 	bl	8003530 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	f003 020f 	and.w	r2, r3, #15
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	460b      	mov	r3, r1
 80018ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	f003 020f 	and.w	r2, r3, #15
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	3338      	adds	r3, #56	; 0x38
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	3304      	adds	r3, #4
 80018e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2201      	movs	r2, #1
 80018fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	b2da      	uxtb	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d102      	bne.n	8001916 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	6979      	ldr	r1, [r7, #20]
 800192e:	f002 f843 	bl	80039b8 <USB_EP0StartXfer>
 8001932:	e008      	b.n	8001946 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	6979      	ldr	r1, [r7, #20]
 8001942:	f001 fdf5 	bl	8003530 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	f003 020f 	and.w	r2, r3, #15
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	d901      	bls.n	800196e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e050      	b.n	8001a10 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800196e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001972:	2b00      	cmp	r3, #0
 8001974:	da0f      	bge.n	8001996 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	f003 020f 	and.w	r2, r3, #15
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	3338      	adds	r3, #56	; 0x38
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	3304      	adds	r3, #4
 800198c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	705a      	strb	r2, [r3, #1]
 8001994:	e00d      	b.n	80019b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	4613      	mov	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	3304      	adds	r3, #4
 80019aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_PCD_EP_SetStall+0x82>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e01e      	b.n	8001a10 <HAL_PCD_EP_SetStall+0xc0>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68f9      	ldr	r1, [r7, #12]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 f99a 	bl	8003d1a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10a      	bne.n	8001a06 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	b2d9      	uxtb	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a00:	461a      	mov	r2, r3
 8001a02:	f002 fb8b 	bl	800411c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	f003 020f 	and.w	r2, r3, #15
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d901      	bls.n	8001a36 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e042      	b.n	8001abc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	da0f      	bge.n	8001a5e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	f003 020f 	and.w	r2, r3, #15
 8001a44:	4613      	mov	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	3338      	adds	r3, #56	; 0x38
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	3304      	adds	r3, #4
 8001a54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	705a      	strb	r2, [r3, #1]
 8001a5c:	e00f      	b.n	8001a7e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	f003 020f 	and.w	r2, r3, #15
 8001a64:	4613      	mov	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	3304      	adds	r3, #4
 8001a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_PCD_EP_ClrStall+0x86>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e00e      	b.n	8001abc <HAL_PCD_EP_ClrStall+0xa4>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68f9      	ldr	r1, [r7, #12]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 f9a2 	bl	8003df6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	4613      	mov	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	3338      	adds	r3, #56	; 0x38
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3304      	adds	r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d901      	bls.n	8001afc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e06c      	b.n	8001bd6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d902      	bls.n	8001b18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3303      	adds	r3, #3
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001b20:	e02b      	b.n	8001b7a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d902      	bls.n	8001b3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3303      	adds	r3, #3
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	68d9      	ldr	r1, [r3, #12]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f002 f87e 	bl	8003c5e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	441a      	add	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	699a      	ldr	r2, [r3, #24]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	441a      	add	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	015a      	lsls	r2, r3, #5
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4413      	add	r3, r2
 8001b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d809      	bhi.n	8001ba4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	699a      	ldr	r2, [r3, #24]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d203      	bcs.n	8001ba4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1be      	bne.n	8001b22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d811      	bhi.n	8001bd4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	6939      	ldr	r1, [r7, #16]
 8001bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3720      	adds	r7, #32
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	333c      	adds	r3, #60	; 0x3c
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	015a      	lsls	r2, r3, #5
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	f040 80b3 	bne.w	8001d7e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d028      	beq.n	8001c74 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4a70      	ldr	r2, [pc, #448]	; (8001de8 <PCD_EP_OutXfrComplete_int+0x208>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d90e      	bls.n	8001c48 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d009      	beq.n	8001c48 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c40:	461a      	mov	r2, r3
 8001c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c46:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f004 fa4b 	bl	80060e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	f002 fa5e 	bl	800411c <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	015a      	lsls	r2, r3, #5
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4413      	add	r3, r2
 8001c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2308      	movs	r3, #8
 8001c70:	6093      	str	r3, [r2, #8]
 8001c72:	e0b3      	b.n	8001ddc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	015a      	lsls	r2, r3, #5
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	6093      	str	r3, [r2, #8]
 8001c90:	e0a4      	b.n	8001ddc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f040 809f 	bne.w	8001ddc <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4a51      	ldr	r2, [pc, #324]	; (8001de8 <PCD_EP_OutXfrComplete_int+0x208>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d90f      	bls.n	8001cc6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00a      	beq.n	8001cc6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	015a      	lsls	r2, r3, #5
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cc2:	6093      	str	r3, [r2, #8]
 8001cc4:	e08a      	b.n	8001ddc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	1a9b      	subs	r3, r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cd8:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	0159      	lsls	r1, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	440b      	add	r3, r1
 8001ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001cec:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4403      	add	r3, r0
 8001cfc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001d00:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	1a9b      	subs	r3, r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	1a9b      	subs	r3, r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4403      	add	r3, r0
 8001d24:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4419      	add	r1, r3
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4403      	add	r3, r0
 8001d3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d3e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f004 f9de 	bl	8006108 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d144      	bne.n	8001ddc <PCD_EP_OutXfrComplete_int+0x1fc>
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d138      	bne.n	8001ddc <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d74:	461a      	mov	r2, r3
 8001d76:	2101      	movs	r1, #1
 8001d78:	f002 f9d0 	bl	800411c <USB_EP0_OutStart>
 8001d7c:	e02e      	b.n	8001ddc <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <PCD_EP_OutXfrComplete_int+0x20c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d124      	bne.n	8001dd0 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00a      	beq.n	8001da6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	015a      	lsls	r2, r3, #5
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001da2:	6093      	str	r3, [r2, #8]
 8001da4:	e01a      	b.n	8001ddc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f003 0320 	and.w	r3, r3, #32
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d008      	beq.n	8001dc2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f004 f99d 	bl	8006108 <HAL_PCD_DataOutStageCallback>
 8001dce:	e005      	b.n	8001ddc <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f004 f996 	bl	8006108 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	4f54300a 	.word	0x4f54300a
 8001dec:	4f54310a 	.word	0x4f54310a

08001df0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	333c      	adds	r3, #60	; 0x3c
 8001e08:	3304      	adds	r3, #4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d113      	bne.n	8001e4e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <PCD_EP_OutSetupPacket_int+0xb8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d922      	bls.n	8001e74 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d01d      	beq.n	8001e74 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e44:	461a      	mov	r2, r3
 8001e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e4a:	6093      	str	r3, [r2, #8]
 8001e4c:	e012      	b.n	8001e74 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4a16      	ldr	r2, [pc, #88]	; (8001eac <PCD_EP_OutSetupPacket_int+0xbc>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10e      	bne.n	8001e74 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f004 f935 	bl	80060e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <PCD_EP_OutSetupPacket_int+0xb8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d90c      	bls.n	8001e9c <PCD_EP_OutSetupPacket_int+0xac>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e94:	461a      	mov	r2, r3
 8001e96:	2101      	movs	r1, #1
 8001e98:	f002 f940 	bl	800411c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	4f54300a 	.word	0x4f54300a
 8001eac:	4f54310a 	.word	0x4f54310a

08001eb0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d107      	bne.n	8001ede <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001ece:	883b      	ldrh	r3, [r7, #0]
 8001ed0:	0419      	lsls	r1, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	629a      	str	r2, [r3, #40]	; 0x28
 8001edc:	e028      	b.n	8001f30 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	0c1b      	lsrs	r3, r3, #16
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	4413      	add	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	e00d      	b.n	8001f0e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	3340      	adds	r3, #64	; 0x40
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	0c1b      	lsrs	r3, r3, #16
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	4413      	add	r3, r2
 8001f06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d3ec      	bcc.n	8001ef2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001f18:	883b      	ldrh	r3, [r7, #0]
 8001f1a:	0418      	lsls	r0, r3, #16
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6819      	ldr	r1, [r3, #0]
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	4302      	orrs	r2, r0
 8001f28:	3340      	adds	r3, #64	; 0x40
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	460b      	mov	r3, r1
 8001f48:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e22d      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d075      	beq.n	8002082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f96:	4ba3      	ldr	r3, [pc, #652]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d00c      	beq.n	8001fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fa2:	4ba0      	ldr	r3, [pc, #640]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d112      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fae:	4b9d      	ldr	r3, [pc, #628]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fba:	d10b      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	4b99      	ldr	r3, [pc, #612]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05b      	beq.n	8002080 <HAL_RCC_OscConfig+0x108>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d157      	bne.n	8002080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e208      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fdc:	d106      	bne.n	8001fec <HAL_RCC_OscConfig+0x74>
 8001fde:	4b91      	ldr	r3, [pc, #580]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a90      	ldr	r2, [pc, #576]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e01d      	b.n	8002028 <HAL_RCC_OscConfig+0xb0>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x98>
 8001ff6:	4b8b      	ldr	r3, [pc, #556]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a8a      	ldr	r2, [pc, #552]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8001ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b88      	ldr	r3, [pc, #544]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a87      	ldr	r2, [pc, #540]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e00b      	b.n	8002028 <HAL_RCC_OscConfig+0xb0>
 8002010:	4b84      	ldr	r3, [pc, #528]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a83      	ldr	r2, [pc, #524]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8002016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b81      	ldr	r3, [pc, #516]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a80      	ldr	r2, [pc, #512]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8002022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe fb14 	bl	800065c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002038:	f7fe fb10 	bl	800065c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b64      	cmp	r3, #100	; 0x64
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1cd      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0xc0>
 8002056:	e014      	b.n	8002082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7fe fb00 	bl	800065c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002060:	f7fe fafc 	bl	800065c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	; 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e1b9      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	4b6c      	ldr	r3, [pc, #432]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0xe8>
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d063      	beq.n	8002156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800208e:	4b65      	ldr	r3, [pc, #404]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800209a:	4b62      	ldr	r3, [pc, #392]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d11c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a6:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d116      	bne.n	80020e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	4b5c      	ldr	r3, [pc, #368]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d005      	beq.n	80020ca <HAL_RCC_OscConfig+0x152>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e18d      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ca:	4b56      	ldr	r3, [pc, #344]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4952      	ldr	r1, [pc, #328]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	e03a      	b.n	8002156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d020      	beq.n	800212a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e8:	4b4f      	ldr	r3, [pc, #316]	; (8002228 <HAL_RCC_OscConfig+0x2b0>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe fab5 	bl	800065c <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f6:	f7fe fab1 	bl	800065c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e16e      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	4b46      	ldr	r3, [pc, #280]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b43      	ldr	r3, [pc, #268]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4940      	ldr	r1, [pc, #256]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	4313      	orrs	r3, r2
 8002126:	600b      	str	r3, [r1, #0]
 8002128:	e015      	b.n	8002156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212a:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <HAL_RCC_OscConfig+0x2b0>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe fa94 	bl	800065c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002138:	f7fe fa90 	bl	800065c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e14d      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	4b36      	ldr	r3, [pc, #216]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d030      	beq.n	80021c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d016      	beq.n	8002198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216a:	4b30      	ldr	r3, [pc, #192]	; (800222c <HAL_RCC_OscConfig+0x2b4>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002170:	f7fe fa74 	bl	800065c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002178:	f7fe fa70 	bl	800065c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e12d      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 800218c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x200>
 8002196:	e015      	b.n	80021c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002198:	4b24      	ldr	r3, [pc, #144]	; (800222c <HAL_RCC_OscConfig+0x2b4>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7fe fa5d 	bl	800065c <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a6:	f7fe fa59 	bl	800065c <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e116      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 80021ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80a0 	beq.w	8002312 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10f      	bne.n	8002202 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021fe:	2301      	movs	r3, #1
 8002200:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x2b8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d121      	bne.n	8002252 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_RCC_OscConfig+0x2b8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_RCC_OscConfig+0x2b8>)
 8002214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221a:	f7fe fa1f 	bl	800065c <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002220:	e011      	b.n	8002246 <HAL_RCC_OscConfig+0x2ce>
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	42470000 	.word	0x42470000
 800222c:	42470e80 	.word	0x42470e80
 8002230:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002234:	f7fe fa12 	bl	800065c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e0cf      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <HAL_RCC_OscConfig+0x478>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d106      	bne.n	8002268 <HAL_RCC_OscConfig+0x2f0>
 800225a:	4b66      	ldr	r3, [pc, #408]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	4a65      	ldr	r2, [pc, #404]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6713      	str	r3, [r2, #112]	; 0x70
 8002266:	e01c      	b.n	80022a2 <HAL_RCC_OscConfig+0x32a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d10c      	bne.n	800228a <HAL_RCC_OscConfig+0x312>
 8002270:	4b60      	ldr	r3, [pc, #384]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	4a5f      	ldr	r2, [pc, #380]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	6713      	str	r3, [r2, #112]	; 0x70
 800227c:	4b5d      	ldr	r3, [pc, #372]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a5c      	ldr	r2, [pc, #368]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
 8002288:	e00b      	b.n	80022a2 <HAL_RCC_OscConfig+0x32a>
 800228a:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 800228c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228e:	4a59      	ldr	r2, [pc, #356]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	6713      	str	r3, [r2, #112]	; 0x70
 8002296:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 800229c:	f023 0304 	bic.w	r3, r3, #4
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d015      	beq.n	80022d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022aa:	f7fe f9d7 	bl	800065c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7fe f9d3 	bl	800065c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e08e      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c8:	4b4a      	ldr	r3, [pc, #296]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ee      	beq.n	80022b2 <HAL_RCC_OscConfig+0x33a>
 80022d4:	e014      	b.n	8002300 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d6:	f7fe f9c1 	bl	800065c <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe f9bd 	bl	800065c <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e078      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f4:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1ee      	bne.n	80022de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002300:	7dfb      	ldrb	r3, [r7, #23]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d105      	bne.n	8002312 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002306:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 800230c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002310:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d064      	beq.n	80023e4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800231a:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b08      	cmp	r3, #8
 8002324:	d05c      	beq.n	80023e0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d141      	bne.n	80023b2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232e:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <HAL_RCC_OscConfig+0x480>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe f992 	bl	800065c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe f98e 	bl	800065c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e04b      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	4b29      	ldr	r3, [pc, #164]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	019b      	lsls	r3, r3, #6
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	085b      	lsrs	r3, r3, #1
 8002372:	3b01      	subs	r3, #1
 8002374:	041b      	lsls	r3, r3, #16
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	491d      	ldr	r1, [pc, #116]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002384:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <HAL_RCC_OscConfig+0x480>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7fe f967 	bl	800065c <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002392:	f7fe f963 	bl	800065c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e020      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x41a>
 80023b0:	e018      	b.n	80023e4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_RCC_OscConfig+0x480>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe f950 	bl	800065c <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe f94c 	bl	800065c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e009      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_RCC_OscConfig+0x47c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x448>
 80023de:	e001      	b.n	80023e4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40007000 	.word	0x40007000
 80023f4:	40023800 	.word	0x40023800
 80023f8:	42470060 	.word	0x42470060

080023fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0ca      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002410:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d90c      	bls.n	8002438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b64      	ldr	r3, [pc, #400]	; (80025b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b62      	ldr	r3, [pc, #392]	; (80025b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d001      	beq.n	8002438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0b6      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002450:	4b58      	ldr	r3, [pc, #352]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4a57      	ldr	r2, [pc, #348]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800245a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002468:	4b52      	ldr	r3, [pc, #328]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a51      	ldr	r2, [pc, #324]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800246e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b4f      	ldr	r3, [pc, #316]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	494c      	ldr	r1, [pc, #304]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d044      	beq.n	800251c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800249a:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d119      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e07d      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d003      	beq.n	80024ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ba:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e06d      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e065      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f023 0203 	bic.w	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4933      	ldr	r1, [pc, #204]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ec:	f7fe f8b6 	bl	800065c <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	e00a      	b.n	800250a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f4:	f7fe f8b2 	bl	800065c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e04d      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 020c 	and.w	r2, r3, #12
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	429a      	cmp	r2, r3
 800251a:	d1eb      	bne.n	80024f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCC_ClockConfig+0x1b4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d20c      	bcs.n	8002544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_RCC_ClockConfig+0x1b4>)
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e030      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d008      	beq.n	8002562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4915      	ldr	r1, [pc, #84]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	490d      	ldr	r1, [pc, #52]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002582:	f000 f81d 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8002586:	4601      	mov	r1, r0
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_RCC_ClockConfig+0x1b8>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	fa21 f303 	lsr.w	r3, r1, r3
 800259a:	4a08      	ldr	r2, [pc, #32]	; (80025bc <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800259e:	2000      	movs	r0, #0
 80025a0:	f7fe f818 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023c00 	.word	0x40023c00
 80025b4:	40023800 	.word	0x40023800
 80025b8:	080071b0 	.word	0x080071b0
 80025bc:	20000118 	.word	0x20000118

080025c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	2300      	movs	r3, #0
 80025d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d007      	beq.n	80025f2 <HAL_RCC_GetSysClockFreq+0x32>
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d008      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x38>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 80b4 	bne.w	8002754 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b5e      	ldr	r3, [pc, #376]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025ee:	60bb      	str	r3, [r7, #8]
       break;
 80025f0:	e0b3      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025f2:	4b5e      	ldr	r3, [pc, #376]	; (800276c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025f4:	60bb      	str	r3, [r7, #8]
      break;
 80025f6:	e0b0      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025f8:	4b5a      	ldr	r3, [pc, #360]	; (8002764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002600:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002602:	4b58      	ldr	r3, [pc, #352]	; (8002764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d04a      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260e:	4b55      	ldr	r3, [pc, #340]	; (8002764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	099b      	lsrs	r3, r3, #6
 8002614:	f04f 0400 	mov.w	r4, #0
 8002618:	f240 11ff 	movw	r1, #511	; 0x1ff
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	ea03 0501 	and.w	r5, r3, r1
 8002624:	ea04 0602 	and.w	r6, r4, r2
 8002628:	4629      	mov	r1, r5
 800262a:	4632      	mov	r2, r6
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	f04f 0400 	mov.w	r4, #0
 8002634:	0154      	lsls	r4, r2, #5
 8002636:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800263a:	014b      	lsls	r3, r1, #5
 800263c:	4619      	mov	r1, r3
 800263e:	4622      	mov	r2, r4
 8002640:	1b49      	subs	r1, r1, r5
 8002642:	eb62 0206 	sbc.w	r2, r2, r6
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	f04f 0400 	mov.w	r4, #0
 800264e:	0194      	lsls	r4, r2, #6
 8002650:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002654:	018b      	lsls	r3, r1, #6
 8002656:	1a5b      	subs	r3, r3, r1
 8002658:	eb64 0402 	sbc.w	r4, r4, r2
 800265c:	f04f 0100 	mov.w	r1, #0
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	00e2      	lsls	r2, r4, #3
 8002666:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800266a:	00d9      	lsls	r1, r3, #3
 800266c:	460b      	mov	r3, r1
 800266e:	4614      	mov	r4, r2
 8002670:	195b      	adds	r3, r3, r5
 8002672:	eb44 0406 	adc.w	r4, r4, r6
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	0262      	lsls	r2, r4, #9
 8002680:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002684:	0259      	lsls	r1, r3, #9
 8002686:	460b      	mov	r3, r1
 8002688:	4614      	mov	r4, r2
 800268a:	4618      	mov	r0, r3
 800268c:	4621      	mov	r1, r4
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f04f 0400 	mov.w	r4, #0
 8002694:	461a      	mov	r2, r3
 8002696:	4623      	mov	r3, r4
 8002698:	f7fd fdfa 	bl	8000290 <__aeabi_uldivmod>
 800269c:	4603      	mov	r3, r0
 800269e:	460c      	mov	r4, r1
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	e049      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	f04f 0400 	mov.w	r4, #0
 80026ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	ea03 0501 	and.w	r5, r3, r1
 80026ba:	ea04 0602 	and.w	r6, r4, r2
 80026be:	4629      	mov	r1, r5
 80026c0:	4632      	mov	r2, r6
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	f04f 0400 	mov.w	r4, #0
 80026ca:	0154      	lsls	r4, r2, #5
 80026cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026d0:	014b      	lsls	r3, r1, #5
 80026d2:	4619      	mov	r1, r3
 80026d4:	4622      	mov	r2, r4
 80026d6:	1b49      	subs	r1, r1, r5
 80026d8:	eb62 0206 	sbc.w	r2, r2, r6
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	f04f 0400 	mov.w	r4, #0
 80026e4:	0194      	lsls	r4, r2, #6
 80026e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026ea:	018b      	lsls	r3, r1, #6
 80026ec:	1a5b      	subs	r3, r3, r1
 80026ee:	eb64 0402 	sbc.w	r4, r4, r2
 80026f2:	f04f 0100 	mov.w	r1, #0
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	00e2      	lsls	r2, r4, #3
 80026fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002700:	00d9      	lsls	r1, r3, #3
 8002702:	460b      	mov	r3, r1
 8002704:	4614      	mov	r4, r2
 8002706:	195b      	adds	r3, r3, r5
 8002708:	eb44 0406 	adc.w	r4, r4, r6
 800270c:	f04f 0100 	mov.w	r1, #0
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	02a2      	lsls	r2, r4, #10
 8002716:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800271a:	0299      	lsls	r1, r3, #10
 800271c:	460b      	mov	r3, r1
 800271e:	4614      	mov	r4, r2
 8002720:	4618      	mov	r0, r3
 8002722:	4621      	mov	r1, r4
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f04f 0400 	mov.w	r4, #0
 800272a:	461a      	mov	r2, r3
 800272c:	4623      	mov	r3, r4
 800272e:	f7fd fdaf 	bl	8000290 <__aeabi_uldivmod>
 8002732:	4603      	mov	r3, r0
 8002734:	460c      	mov	r4, r1
 8002736:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	3301      	adds	r3, #1
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	60bb      	str	r3, [r7, #8]
      break;
 8002752:	e002      	b.n	800275a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002756:	60bb      	str	r3, [r7, #8]
      break;
 8002758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800275a:	68bb      	ldr	r3, [r7, #8]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	00f42400 	.word	0x00f42400
 800276c:	007a1200 	.word	0x007a1200

08002770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_RCC_GetHCLKFreq+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000118 	.word	0x20000118

08002788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800278c:	f7ff fff0 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 8002790:	4601      	mov	r1, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0a9b      	lsrs	r3, r3, #10
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4a03      	ldr	r2, [pc, #12]	; (80027ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800279e:	5cd3      	ldrb	r3, [r2, r3]
 80027a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	080071c0 	.word	0x080071c0

080027b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027b4:	f7ff ffdc 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 80027b8:	4601      	mov	r1, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0b5b      	lsrs	r3, r3, #13
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4a03      	ldr	r2, [pc, #12]	; (80027d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c6:	5cd3      	ldrb	r3, [r2, r3]
 80027c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	080071c0 	.word	0x080071c0

080027d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e03f      	b.n	800286a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f003 fa48 	bl	8005c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	; 0x24
 8002808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800281a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f829 	bl	8002874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002874:	b5b0      	push	{r4, r5, r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80028b4:	f023 030c 	bic.w	r3, r3, #12
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	430b      	orrs	r3, r1
 80028c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699a      	ldr	r2, [r3, #24]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e0:	f040 80e4 	bne.w	8002aac <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4aab      	ldr	r2, [pc, #684]	; (8002b98 <UART_SetConfig+0x324>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d004      	beq.n	80028f8 <UART_SetConfig+0x84>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4aaa      	ldr	r2, [pc, #680]	; (8002b9c <UART_SetConfig+0x328>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d16c      	bne.n	80029d2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80028f8:	f7ff ff5a 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	009a      	lsls	r2, r3, #2
 8002906:	441a      	add	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	4aa3      	ldr	r2, [pc, #652]	; (8002ba0 <UART_SetConfig+0x32c>)
 8002914:	fba2 2303 	umull	r2, r3, r2, r3
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	011c      	lsls	r4, r3, #4
 800291c:	f7ff ff48 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8002920:	4602      	mov	r2, r0
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	009a      	lsls	r2, r3, #2
 800292a:	441a      	add	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fbb2 f5f3 	udiv	r5, r2, r3
 8002936:	f7ff ff3b 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 800293a:	4602      	mov	r2, r0
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	009a      	lsls	r2, r3, #2
 8002944:	441a      	add	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	4a93      	ldr	r2, [pc, #588]	; (8002ba0 <UART_SetConfig+0x32c>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2264      	movs	r2, #100	; 0x64
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	1aeb      	subs	r3, r5, r3
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	3332      	adds	r3, #50	; 0x32
 8002964:	4a8e      	ldr	r2, [pc, #568]	; (8002ba0 <UART_SetConfig+0x32c>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002972:	441c      	add	r4, r3
 8002974:	f7ff ff1c 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8002978:	4602      	mov	r2, r0
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	009a      	lsls	r2, r3, #2
 8002982:	441a      	add	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fbb2 f5f3 	udiv	r5, r2, r3
 800298e:	f7ff ff0f 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8002992:	4602      	mov	r2, r0
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	009a      	lsls	r2, r3, #2
 800299c:	441a      	add	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	4a7d      	ldr	r2, [pc, #500]	; (8002ba0 <UART_SetConfig+0x32c>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2264      	movs	r2, #100	; 0x64
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	1aeb      	subs	r3, r5, r3
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	3332      	adds	r3, #50	; 0x32
 80029bc:	4a78      	ldr	r2, [pc, #480]	; (8002ba0 <UART_SetConfig+0x32c>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	f003 0207 	and.w	r2, r3, #7
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4422      	add	r2, r4
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	e154      	b.n	8002c7c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80029d2:	f7ff fed9 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80029d6:	4602      	mov	r2, r0
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009a      	lsls	r2, r3, #2
 80029e0:	441a      	add	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	4a6c      	ldr	r2, [pc, #432]	; (8002ba0 <UART_SetConfig+0x32c>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	011c      	lsls	r4, r3, #4
 80029f6:	f7ff fec7 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	009a      	lsls	r2, r3, #2
 8002a04:	441a      	add	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a10:	f7ff feba 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8002a14:	4602      	mov	r2, r0
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009a      	lsls	r2, r3, #2
 8002a1e:	441a      	add	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	4a5d      	ldr	r2, [pc, #372]	; (8002ba0 <UART_SetConfig+0x32c>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	2264      	movs	r2, #100	; 0x64
 8002a34:	fb02 f303 	mul.w	r3, r2, r3
 8002a38:	1aeb      	subs	r3, r5, r3
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	3332      	adds	r3, #50	; 0x32
 8002a3e:	4a58      	ldr	r2, [pc, #352]	; (8002ba0 <UART_SetConfig+0x32c>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a4c:	441c      	add	r4, r3
 8002a4e:	f7ff fe9b 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009a      	lsls	r2, r3, #2
 8002a5c:	441a      	add	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a68:	f7ff fe8e 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	009a      	lsls	r2, r3, #2
 8002a76:	441a      	add	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	4a47      	ldr	r2, [pc, #284]	; (8002ba0 <UART_SetConfig+0x32c>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	2264      	movs	r2, #100	; 0x64
 8002a8c:	fb02 f303 	mul.w	r3, r2, r3
 8002a90:	1aeb      	subs	r3, r5, r3
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	3332      	adds	r3, #50	; 0x32
 8002a96:	4a42      	ldr	r2, [pc, #264]	; (8002ba0 <UART_SetConfig+0x32c>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	095b      	lsrs	r3, r3, #5
 8002a9e:	f003 0207 	and.w	r2, r3, #7
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4422      	add	r2, r4
 8002aa8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002aaa:	e0e7      	b.n	8002c7c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a39      	ldr	r2, [pc, #228]	; (8002b98 <UART_SetConfig+0x324>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <UART_SetConfig+0x24c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a38      	ldr	r2, [pc, #224]	; (8002b9c <UART_SetConfig+0x328>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d171      	bne.n	8002ba4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ac0:	f7ff fe76 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	009a      	lsls	r2, r3, #2
 8002ace:	441a      	add	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ada:	4a31      	ldr	r2, [pc, #196]	; (8002ba0 <UART_SetConfig+0x32c>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	011c      	lsls	r4, r3, #4
 8002ae4:	f7ff fe64 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	009a      	lsls	r2, r3, #2
 8002af2:	441a      	add	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	fbb2 f5f3 	udiv	r5, r2, r3
 8002afe:	f7ff fe57 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8002b02:	4602      	mov	r2, r0
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	009a      	lsls	r2, r3, #2
 8002b0c:	441a      	add	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b18:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <UART_SetConfig+0x32c>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	2264      	movs	r2, #100	; 0x64
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	1aeb      	subs	r3, r5, r3
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	3332      	adds	r3, #50	; 0x32
 8002b2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ba0 <UART_SetConfig+0x32c>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b38:	441c      	add	r4, r3
 8002b3a:	f7ff fe39 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	009a      	lsls	r2, r3, #2
 8002b48:	441a      	add	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b54:	f7ff fe2c 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	009a      	lsls	r2, r3, #2
 8002b62:	441a      	add	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <UART_SetConfig+0x32c>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	2264      	movs	r2, #100	; 0x64
 8002b78:	fb02 f303 	mul.w	r3, r2, r3
 8002b7c:	1aeb      	subs	r3, r5, r3
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	3332      	adds	r3, #50	; 0x32
 8002b82:	4a07      	ldr	r2, [pc, #28]	; (8002ba0 <UART_SetConfig+0x32c>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	f003 020f 	and.w	r2, r3, #15
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4422      	add	r2, r4
 8002b94:	609a      	str	r2, [r3, #8]
 8002b96:	e071      	b.n	8002c7c <UART_SetConfig+0x408>
 8002b98:	40011000 	.word	0x40011000
 8002b9c:	40011400 	.word	0x40011400
 8002ba0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002ba4:	f7ff fdf0 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	009a      	lsls	r2, r3, #2
 8002bb2:	441a      	add	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	4a31      	ldr	r2, [pc, #196]	; (8002c84 <UART_SetConfig+0x410>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	011c      	lsls	r4, r3, #4
 8002bc8:	f7ff fdde 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009a      	lsls	r2, r3, #2
 8002bd6:	441a      	add	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	fbb2 f5f3 	udiv	r5, r2, r3
 8002be2:	f7ff fdd1 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8002be6:	4602      	mov	r2, r0
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	009a      	lsls	r2, r3, #2
 8002bf0:	441a      	add	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <UART_SetConfig+0x410>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2264      	movs	r2, #100	; 0x64
 8002c06:	fb02 f303 	mul.w	r3, r2, r3
 8002c0a:	1aeb      	subs	r3, r5, r3
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	3332      	adds	r3, #50	; 0x32
 8002c10:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <UART_SetConfig+0x410>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c1c:	441c      	add	r4, r3
 8002c1e:	f7ff fdb3 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8002c22:	4602      	mov	r2, r0
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009a      	lsls	r2, r3, #2
 8002c2c:	441a      	add	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c38:	f7ff fda6 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	009a      	lsls	r2, r3, #2
 8002c46:	441a      	add	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	4a0c      	ldr	r2, [pc, #48]	; (8002c84 <UART_SetConfig+0x410>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	095b      	lsrs	r3, r3, #5
 8002c5a:	2264      	movs	r2, #100	; 0x64
 8002c5c:	fb02 f303 	mul.w	r3, r2, r3
 8002c60:	1aeb      	subs	r3, r5, r3
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	3332      	adds	r3, #50	; 0x32
 8002c66:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <UART_SetConfig+0x410>)
 8002c68:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	f003 020f 	and.w	r2, r3, #15
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4422      	add	r2, r4
 8002c78:	609a      	str	r2, [r3, #8]
}
 8002c7a:	e7ff      	b.n	8002c7c <UART_SetConfig+0x408>
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bdb0      	pop	{r4, r5, r7, pc}
 8002c84:	51eb851f 	.word	0x51eb851f

08002c88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c88:	b084      	sub	sp, #16
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	f107 001c 	add.w	r0, r7, #28
 8002c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d122      	bne.n	8002ce6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d105      	bne.n	8002cda <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f001 fa7c 	bl	80041d8 <USB_CoreReset>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	e01a      	b.n	8002d1c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f001 fa70 	bl	80041d8 <USB_CoreReset>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d0e:	e005      	b.n	8002d1c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10b      	bne.n	8002d3a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f043 0206 	orr.w	r2, r3, #6
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f043 0220 	orr.w	r2, r3, #32
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d46:	b004      	add	sp, #16
 8002d48:	4770      	bx	lr
	...

08002d4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	4613      	mov	r3, r2
 8002d58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d165      	bne.n	8002e2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4a41      	ldr	r2, [pc, #260]	; (8002e68 <USB_SetTurnaroundTime+0x11c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d906      	bls.n	8002d76 <USB_SetTurnaroundTime+0x2a>
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4a40      	ldr	r2, [pc, #256]	; (8002e6c <USB_SetTurnaroundTime+0x120>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d802      	bhi.n	8002d76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d70:	230f      	movs	r3, #15
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e062      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4a3c      	ldr	r2, [pc, #240]	; (8002e6c <USB_SetTurnaroundTime+0x120>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d906      	bls.n	8002d8c <USB_SetTurnaroundTime+0x40>
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4a3b      	ldr	r2, [pc, #236]	; (8002e70 <USB_SetTurnaroundTime+0x124>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d802      	bhi.n	8002d8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d86:	230e      	movs	r3, #14
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e057      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4a38      	ldr	r2, [pc, #224]	; (8002e70 <USB_SetTurnaroundTime+0x124>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d906      	bls.n	8002da2 <USB_SetTurnaroundTime+0x56>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4a37      	ldr	r2, [pc, #220]	; (8002e74 <USB_SetTurnaroundTime+0x128>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d802      	bhi.n	8002da2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d9c:	230d      	movs	r3, #13
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e04c      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4a33      	ldr	r2, [pc, #204]	; (8002e74 <USB_SetTurnaroundTime+0x128>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d906      	bls.n	8002db8 <USB_SetTurnaroundTime+0x6c>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4a32      	ldr	r2, [pc, #200]	; (8002e78 <USB_SetTurnaroundTime+0x12c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d802      	bhi.n	8002db8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002db2:	230c      	movs	r3, #12
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e041      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4a2f      	ldr	r2, [pc, #188]	; (8002e78 <USB_SetTurnaroundTime+0x12c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d906      	bls.n	8002dce <USB_SetTurnaroundTime+0x82>
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4a2e      	ldr	r2, [pc, #184]	; (8002e7c <USB_SetTurnaroundTime+0x130>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d802      	bhi.n	8002dce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002dc8:	230b      	movs	r3, #11
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	e036      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4a2a      	ldr	r2, [pc, #168]	; (8002e7c <USB_SetTurnaroundTime+0x130>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d906      	bls.n	8002de4 <USB_SetTurnaroundTime+0x98>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4a29      	ldr	r2, [pc, #164]	; (8002e80 <USB_SetTurnaroundTime+0x134>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d802      	bhi.n	8002de4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002dde:	230a      	movs	r3, #10
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e02b      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4a26      	ldr	r2, [pc, #152]	; (8002e80 <USB_SetTurnaroundTime+0x134>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d906      	bls.n	8002dfa <USB_SetTurnaroundTime+0xae>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4a25      	ldr	r2, [pc, #148]	; (8002e84 <USB_SetTurnaroundTime+0x138>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d802      	bhi.n	8002dfa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002df4:	2309      	movs	r3, #9
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e020      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <USB_SetTurnaroundTime+0x138>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d906      	bls.n	8002e10 <USB_SetTurnaroundTime+0xc4>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <USB_SetTurnaroundTime+0x13c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d802      	bhi.n	8002e10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e015      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <USB_SetTurnaroundTime+0x13c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d906      	bls.n	8002e26 <USB_SetTurnaroundTime+0xda>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <USB_SetTurnaroundTime+0x140>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d802      	bhi.n	8002e26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e20:	2307      	movs	r3, #7
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e00a      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e26:	2306      	movs	r3, #6
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e007      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d102      	bne.n	8002e38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e32:	2309      	movs	r3, #9
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	e001      	b.n	8002e3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e38:	2309      	movs	r3, #9
 8002e3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e54:	431a      	orrs	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	00d8acbf 	.word	0x00d8acbf
 8002e6c:	00e4e1bf 	.word	0x00e4e1bf
 8002e70:	00f423ff 	.word	0x00f423ff
 8002e74:	0106737f 	.word	0x0106737f
 8002e78:	011a499f 	.word	0x011a499f
 8002e7c:	01312cff 	.word	0x01312cff
 8002e80:	014ca43f 	.word	0x014ca43f
 8002e84:	016e35ff 	.word	0x016e35ff
 8002e88:	01a6ab1f 	.word	0x01a6ab1f
 8002e8c:	01e847ff 	.word	0x01e847ff

08002e90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f023 0201 	bic.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d106      	bne.n	8002f00 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	e00b      	b.n	8002f18 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	e001      	b.n	8002f18 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e003      	b.n	8002f20 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002f18:	2032      	movs	r0, #50	; 0x32
 8002f1a:	f7fd fbab 	bl	8000674 <HAL_Delay>

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f28:	b084      	sub	sp, #16
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	e009      	b.n	8002f5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	3340      	adds	r3, #64	; 0x40
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	2200      	movs	r2, #0
 8002f54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	2b0e      	cmp	r3, #14
 8002f60:	d9f2      	bls.n	8002f48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d112      	bne.n	8002f8e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f8c:	e00b      	b.n	8002fa6 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002fac:	461a      	mov	r2, r3
 8002fae:	2300      	movs	r3, #0
 8002fb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb8:	4619      	mov	r1, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	680b      	ldr	r3, [r1, #0]
 8002fc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10c      	bne.n	8002fe6 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d104      	bne.n	8002fdc <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f961 	bl	800329c <USB_SetDevSpeed>
 8002fda:	e008      	b.n	8002fee <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002fdc:	2101      	movs	r1, #1
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f95c 	bl	800329c <USB_SetDevSpeed>
 8002fe4:	e003      	b.n	8002fee <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002fe6:	2103      	movs	r1, #3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f957 	bl	800329c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002fee:	2110      	movs	r1, #16
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f90b 	bl	800320c <USB_FlushTxFifo>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f929 	bl	8003258 <USB_FlushRxFifo>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003016:	461a      	mov	r2, r3
 8003018:	2300      	movs	r3, #0
 800301a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003022:	461a      	mov	r2, r3
 8003024:	2300      	movs	r3, #0
 8003026:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302e:	461a      	mov	r2, r3
 8003030:	2300      	movs	r3, #0
 8003032:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	e043      	b.n	80030c2 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800304c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003050:	d118      	bne.n	8003084 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003064:	461a      	mov	r2, r3
 8003066:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	e013      	b.n	8003096 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	015a      	lsls	r2, r3, #5
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800307a:	461a      	mov	r2, r3
 800307c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e008      	b.n	8003096 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003090:	461a      	mov	r2, r3
 8003092:	2300      	movs	r3, #0
 8003094:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a2:	461a      	mov	r2, r3
 80030a4:	2300      	movs	r3, #0
 80030a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b4:	461a      	mov	r2, r3
 80030b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	3301      	adds	r3, #1
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d3b7      	bcc.n	800303a <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	e043      	b.n	8003158 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030e6:	d118      	bne.n	800311a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fa:	461a      	mov	r2, r3
 80030fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e013      	b.n	800312c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003110:	461a      	mov	r2, r3
 8003112:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	e008      	b.n	800312c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4413      	add	r3, r2
 8003122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003126:	461a      	mov	r2, r3
 8003128:	2300      	movs	r3, #0
 800312a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003138:	461a      	mov	r2, r3
 800313a:	2300      	movs	r3, #0
 800313c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314a:	461a      	mov	r2, r3
 800314c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003150:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	3301      	adds	r3, #1
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	429a      	cmp	r2, r3
 800315e:	d3b7      	bcc.n	80030d0 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800316e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003172:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	2b01      	cmp	r3, #1
 8003178:	d111      	bne.n	800319e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003180:	461a      	mov	r2, r3
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <USB_DevInit+0x2dc>)
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	f043 0303 	orr.w	r3, r3, #3
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80031aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d105      	bne.n	80031be <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f043 0210 	orr.w	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <USB_DevInit+0x2e0>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f043 0208 	orr.w	r2, r3, #8
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d107      	bne.n	80031f2 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031fe:	b004      	add	sp, #16
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	00800100 	.word	0x00800100
 8003208:	803c3800 	.word	0x803c3800

0800320c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	019b      	lsls	r3, r3, #6
 800321e:	f043 0220 	orr.w	r2, r3, #32
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3301      	adds	r3, #1
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <USB_FlushTxFifo+0x48>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e006      	b.n	8003246 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b20      	cmp	r3, #32
 8003242:	d0f0      	beq.n	8003226 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	00030d40 	.word	0x00030d40

08003258 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2210      	movs	r2, #16
 8003268:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3301      	adds	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4a09      	ldr	r2, [pc, #36]	; (8003298 <USB_FlushRxFifo+0x40>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e006      	b.n	800328a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f003 0310 	and.w	r3, r3, #16
 8003284:	2b10      	cmp	r3, #16
 8003286:	d0f0      	beq.n	800326a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	00030d40 	.word	0x00030d40

0800329c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	68f9      	ldr	r1, [r7, #12]
 80032b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032bc:	4313      	orrs	r3, r2
 80032be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b087      	sub	sp, #28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0306 	and.w	r3, r3, #6
 80032e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80032ee:	2300      	movs	r3, #0
 80032f0:	75fb      	strb	r3, [r7, #23]
 80032f2:	e00a      	b.n	800330a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d002      	beq.n	8003300 <USB_GetDevSpeed+0x32>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b06      	cmp	r3, #6
 80032fe:	d102      	bne.n	8003306 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003300:	2302      	movs	r3, #2
 8003302:	75fb      	strb	r3, [r7, #23]
 8003304:	e001      	b.n	800330a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003306:	230f      	movs	r3, #15
 8003308:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800330a:	7dfb      	ldrb	r3, [r7, #23]
}
 800330c:	4618      	mov	r0, r3
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	785b      	ldrb	r3, [r3, #1]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d13a      	bne.n	80033aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	2101      	movs	r1, #1
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	b29b      	uxth	r3, r3
 800334c:	68f9      	ldr	r1, [r7, #12]
 800334e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003352:	4313      	orrs	r3, r2
 8003354:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4413      	add	r3, r2
 800335e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d155      	bne.n	8003418 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	78db      	ldrb	r3, [r3, #3]
 8003386:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003388:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	059b      	lsls	r3, r3, #22
 800338e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003390:	4313      	orrs	r3, r2
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	0151      	lsls	r1, r2, #5
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	440a      	add	r2, r1
 800339a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800339e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	e036      	b.n	8003418 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	2101      	movs	r1, #1
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	041b      	lsls	r3, r3, #16
 80033c2:	68f9      	ldr	r1, [r7, #12]
 80033c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11a      	bne.n	8003418 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	78db      	ldrb	r3, [r3, #3]
 80033fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033fe:	430b      	orrs	r3, r1
 8003400:	4313      	orrs	r3, r2
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	0151      	lsls	r1, r2, #5
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	440a      	add	r2, r1
 800340a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800340e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003416:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
	...

08003428 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d135      	bne.n	80034b0 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	2101      	movs	r1, #1
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	b29b      	uxth	r3, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	68f9      	ldr	r1, [r7, #12]
 8003460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003464:	4013      	ands	r3, r2
 8003466:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	2101      	movs	r1, #1
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	b29b      	uxth	r3, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	68f9      	ldr	r1, [r7, #12]
 8003484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003488:	4013      	ands	r3, r2
 800348a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	0159      	lsls	r1, r3, #5
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	440b      	add	r3, r1
 80034a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a6:	4619      	mov	r1, r3
 80034a8:	4b1f      	ldr	r3, [pc, #124]	; (8003528 <USB_DeactivateEndpoint+0x100>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
 80034ae:	e034      	b.n	800351a <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	f003 030f 	and.w	r3, r3, #15
 80034c0:	2101      	movs	r1, #1
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	041b      	lsls	r3, r3, #16
 80034c8:	43db      	mvns	r3, r3
 80034ca:	68f9      	ldr	r1, [r7, #12]
 80034cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034d0:	4013      	ands	r3, r2
 80034d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	041b      	lsls	r3, r3, #16
 80034ec:	43db      	mvns	r3, r3
 80034ee:	68f9      	ldr	r1, [r7, #12]
 80034f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034f4:	4013      	ands	r3, r2
 80034f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	0159      	lsls	r1, r3, #5
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	440b      	add	r3, r1
 800350e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003512:	4619      	mov	r1, r3
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <USB_DeactivateEndpoint+0x104>)
 8003516:	4013      	ands	r3, r2
 8003518:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	ec337800 	.word	0xec337800
 800352c:	eff37800 	.word	0xeff37800

08003530 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	785b      	ldrb	r3, [r3, #1]
 800354c:	2b01      	cmp	r3, #1
 800354e:	f040 815c 	bne.w	800380a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d132      	bne.n	80035c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	0151      	lsls	r1, r2, #5
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	440a      	add	r2, r1
 8003570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003574:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003578:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800357c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	0151      	lsls	r1, r2, #5
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	440a      	add	r2, r1
 8003594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800359c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	0151      	lsls	r1, r2, #5
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	440a      	add	r2, r1
 80035b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b8:	0cdb      	lsrs	r3, r3, #19
 80035ba:	04db      	lsls	r3, r3, #19
 80035bc:	6113      	str	r3, [r2, #16]
 80035be:	e074      	b.n	80036aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	0151      	lsls	r1, r2, #5
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	440a      	add	r2, r1
 80035d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035da:	0cdb      	lsrs	r3, r3, #19
 80035dc:	04db      	lsls	r3, r3, #19
 80035de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	0151      	lsls	r1, r2, #5
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	440a      	add	r2, r1
 80035f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003602:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	6959      	ldr	r1, [r3, #20]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	440b      	add	r3, r1
 800361c:	1e59      	subs	r1, r3, #1
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	fbb1 f3f3 	udiv	r3, r1, r3
 8003626:	04d9      	lsls	r1, r3, #19
 8003628:	4b9d      	ldr	r3, [pc, #628]	; (80038a0 <USB_EPStartXfer+0x370>)
 800362a:	400b      	ands	r3, r1
 800362c:	69b9      	ldr	r1, [r7, #24]
 800362e:	0148      	lsls	r0, r1, #5
 8003630:	69f9      	ldr	r1, [r7, #28]
 8003632:	4401      	add	r1, r0
 8003634:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003638:	4313      	orrs	r3, r2
 800363a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003648:	691a      	ldr	r2, [r3, #16]
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003652:	69b9      	ldr	r1, [r7, #24]
 8003654:	0148      	lsls	r0, r1, #5
 8003656:	69f9      	ldr	r1, [r7, #28]
 8003658:	4401      	add	r1, r0
 800365a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800365e:	4313      	orrs	r3, r2
 8003660:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	78db      	ldrb	r3, [r3, #3]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d11f      	bne.n	80036aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	440a      	add	r2, r1
 8003680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003684:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003688:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d14b      	bne.n	8003748 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c4:	461a      	mov	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	78db      	ldrb	r3, [r3, #3]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d128      	bne.n	8003726 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d110      	bne.n	8003706 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	0151      	lsls	r1, r2, #5
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	440a      	add	r2, r1
 80036fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e00f      	b.n	8003726 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	0151      	lsls	r1, r2, #5
 8003718:	69fa      	ldr	r2, [r7, #28]
 800371a:	440a      	add	r2, r1
 800371c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003724:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003740:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e12f      	b.n	80039a8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	0151      	lsls	r1, r2, #5
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	440a      	add	r2, r1
 800375e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003762:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003766:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	78db      	ldrb	r3, [r3, #3]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d015      	beq.n	800379c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8117 	beq.w	80039a8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	2101      	movs	r1, #1
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	69f9      	ldr	r1, [r7, #28]
 8003792:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003796:	4313      	orrs	r3, r2
 8003798:	634b      	str	r3, [r1, #52]	; 0x34
 800379a:	e105      	b.n	80039a8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d110      	bne.n	80037ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	0151      	lsls	r1, r2, #5
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	440a      	add	r2, r1
 80037c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	e00f      	b.n	80037ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	68d9      	ldr	r1, [r3, #12]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	b298      	uxth	r0, r3
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	4603      	mov	r3, r0
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fa2b 	bl	8003c5e <USB_WritePacket>
 8003808:	e0ce      	b.n	80039a8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	0151      	lsls	r1, r2, #5
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	440a      	add	r2, r1
 8003820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003824:	0cdb      	lsrs	r3, r3, #19
 8003826:	04db      	lsls	r3, r3, #19
 8003828:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	440a      	add	r2, r1
 8003840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003844:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003848:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800384c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d126      	bne.n	80038a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386c:	69b9      	ldr	r1, [r7, #24]
 800386e:	0148      	lsls	r0, r1, #5
 8003870:	69f9      	ldr	r1, [r7, #28]
 8003872:	4401      	add	r1, r0
 8003874:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003878:	4313      	orrs	r3, r2
 800387a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	0151      	lsls	r1, r2, #5
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	440a      	add	r2, r1
 8003892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003896:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800389a:	6113      	str	r3, [r2, #16]
 800389c:	e036      	b.n	800390c <USB_EPStartXfer+0x3dc>
 800389e:	bf00      	nop
 80038a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4413      	add	r3, r2
 80038ae:	1e5a      	subs	r2, r3, #1
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	015a      	lsls	r2, r3, #5
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	8afb      	ldrh	r3, [r7, #22]
 80038ca:	04d9      	lsls	r1, r3, #19
 80038cc:	4b39      	ldr	r3, [pc, #228]	; (80039b4 <USB_EPStartXfer+0x484>)
 80038ce:	400b      	ands	r3, r1
 80038d0:	69b9      	ldr	r1, [r7, #24]
 80038d2:	0148      	lsls	r0, r1, #5
 80038d4:	69f9      	ldr	r1, [r7, #28]
 80038d6:	4401      	add	r1, r0
 80038d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038dc:	4313      	orrs	r3, r2
 80038de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	8af9      	ldrh	r1, [r7, #22]
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	0148      	lsls	r0, r1, #5
 8003900:	69f9      	ldr	r1, [r7, #28]
 8003902:	4401      	add	r1, r0
 8003904:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003908:	4313      	orrs	r3, r2
 800390a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d10d      	bne.n	800392e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	68d9      	ldr	r1, [r3, #12]
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392a:	460a      	mov	r2, r1
 800392c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	78db      	ldrb	r3, [r3, #3]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d128      	bne.n	8003988 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d110      	bne.n	8003968 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	0151      	lsls	r1, r2, #5
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	440a      	add	r2, r1
 800395c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003960:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e00f      	b.n	8003988 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	0151      	lsls	r1, r2, #5
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	440a      	add	r2, r1
 800397e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003986:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	0151      	lsls	r1, r2, #5
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	440a      	add	r2, r1
 800399e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	1ff80000 	.word	0x1ff80000

080039b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	4613      	mov	r3, r2
 80039c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	f040 80cd 	bne.w	8003b74 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d132      	bne.n	8003a48 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	0151      	lsls	r1, r2, #5
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	440a      	add	r2, r1
 80039f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	0151      	lsls	r1, r2, #5
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	440a      	add	r2, r1
 8003a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	0151      	lsls	r1, r2, #5
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	440a      	add	r2, r1
 8003a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a40:	0cdb      	lsrs	r3, r3, #19
 8003a42:	04db      	lsls	r3, r3, #19
 8003a44:	6113      	str	r3, [r2, #16]
 8003a46:	e04e      	b.n	8003ae6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	0151      	lsls	r1, r2, #5
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a62:	0cdb      	lsrs	r3, r3, #19
 8003a64:	04db      	lsls	r3, r3, #19
 8003a66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	0151      	lsls	r1, r2, #5
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a8a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d903      	bls.n	8003aa0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	0151      	lsls	r1, r2, #5
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	440a      	add	r2, r1
 8003ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003abe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad6:	6939      	ldr	r1, [r7, #16]
 8003ad8:	0148      	lsls	r0, r1, #5
 8003ada:	6979      	ldr	r1, [r7, #20]
 8003adc:	4401      	add	r1, r0
 8003ade:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d11e      	bne.n	8003b2a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	461a      	mov	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	0151      	lsls	r1, r2, #5
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	440a      	add	r2, r1
 8003b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	e092      	b.n	8003c50 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	0151      	lsls	r1, r2, #5
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	440a      	add	r2, r1
 8003b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b48:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d07e      	beq.n	8003c50 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	2101      	movs	r1, #1
 8003b64:	fa01 f303 	lsl.w	r3, r1, r3
 8003b68:	6979      	ldr	r1, [r7, #20]
 8003b6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	634b      	str	r3, [r1, #52]	; 0x34
 8003b72:	e06d      	b.n	8003c50 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b8e:	0cdb      	lsrs	r3, r3, #19
 8003b90:	04db      	lsls	r3, r3, #19
 8003b92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	0151      	lsls	r1, r2, #5
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	440a      	add	r2, r1
 8003baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bb6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003be2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003be6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfe:	6939      	ldr	r1, [r7, #16]
 8003c00:	0148      	lsls	r0, r1, #5
 8003c02:	6979      	ldr	r1, [r7, #20]
 8003c04:	4401      	add	r1, r0
 8003c06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d10d      	bne.n	8003c30 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d009      	beq.n	8003c30 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	68d9      	ldr	r1, [r3, #12]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	460a      	mov	r2, r1
 8003c2e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	0151      	lsls	r1, r2, #5
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	440a      	add	r2, r1
 8003c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	371c      	adds	r7, #28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b089      	sub	sp, #36	; 0x24
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	4611      	mov	r1, r2
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	71fb      	strb	r3, [r7, #7]
 8003c70:	4613      	mov	r3, r2
 8003c72:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003c7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d11a      	bne.n	8003cba <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c84:	88bb      	ldrh	r3, [r7, #4]
 8003c86:	3303      	adds	r3, #3
 8003c88:	089b      	lsrs	r3, r3, #2
 8003c8a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	e00f      	b.n	8003cb2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	031a      	lsls	r2, r3, #12
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d3eb      	bcc.n	8003c92 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3724      	adds	r7, #36	; 0x24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	; 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	3303      	adds	r3, #3
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	e00b      	b.n	8003d04 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	3301      	adds	r3, #1
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d3ef      	bcc.n	8003cec <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003d0c:	69fb      	ldr	r3, [r7, #28]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3724      	adds	r7, #36	; 0x24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	785b      	ldrb	r3, [r3, #1]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d12c      	bne.n	8003d90 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db12      	blt.n	8003d6e <USB_EPSetStall+0x54>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00f      	beq.n	8003d6e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	0151      	lsls	r1, r2, #5
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	440a      	add	r2, r1
 8003d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d6c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	0151      	lsls	r1, r2, #5
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	440a      	add	r2, r1
 8003d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e02b      	b.n	8003de8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	db12      	blt.n	8003dc8 <USB_EPSetStall+0xae>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00f      	beq.n	8003dc8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	0151      	lsls	r1, r2, #5
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	440a      	add	r2, r1
 8003dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dc6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	0151      	lsls	r1, r2, #5
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	440a      	add	r2, r1
 8003dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003de6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	785b      	ldrb	r3, [r3, #1]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d128      	bne.n	8003e64 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	0151      	lsls	r1, r2, #5
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	440a      	add	r2, r1
 8003e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	78db      	ldrb	r3, [r3, #3]
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d003      	beq.n	8003e42 <USB_EPClearStall+0x4c>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	78db      	ldrb	r3, [r3, #3]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d138      	bne.n	8003eb4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e027      	b.n	8003eb4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	78db      	ldrb	r3, [r3, #3]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d003      	beq.n	8003e94 <USB_EPClearStall+0x9e>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	78db      	ldrb	r3, [r3, #3]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d10f      	bne.n	8003eb4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	0151      	lsls	r1, r2, #5
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ee4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003ef6:	68f9      	ldr	r1, [r7, #12]
 8003ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003efc:	4313      	orrs	r3, r2
 8003efe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f28:	f023 0302 	bic.w	r3, r3, #2
 8003f2c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003f2e:	2003      	movs	r0, #3
 8003f30:	f7fc fba0 	bl	8000674 <HAL_Delay>

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f58:	f043 0302 	orr.w	r3, r3, #2
 8003f5c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003f5e:	2003      	movs	r0, #3
 8003f60:	f7fc fb88 	bl	8000674 <HAL_Delay>

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b085      	sub	sp, #20
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4013      	ands	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003f86:	68fb      	ldr	r3, [r7, #12]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	0c1b      	lsrs	r3, r3, #16
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	b29b      	uxth	r3, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	4013      	ands	r3, r2
 8004028:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800402a:	68bb      	ldr	r3, [r7, #8]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	01db      	lsls	r3, r3, #7
 800406a:	b2db      	uxtb	r3, r3
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004086:	68bb      	ldr	r3, [r7, #8]
}
 8004088:	4618      	mov	r0, r3
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f003 0301 	and.w	r3, r3, #1
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040ce:	f023 0307 	bic.w	r3, r3, #7
 80040d2:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0306 	and.w	r3, r3, #6
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d109      	bne.n	80040f8 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f2:	f043 0303 	orr.w	r3, r3, #3
 80040f6:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	460b      	mov	r3, r1
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	333c      	adds	r3, #60	; 0x3c
 8004132:	3304      	adds	r3, #4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4a26      	ldr	r2, [pc, #152]	; (80041d4 <USB_EP0_OutStart+0xb8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d90a      	bls.n	8004156 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800414c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004150:	d101      	bne.n	8004156 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e037      	b.n	80041c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415c:	461a      	mov	r2, r3
 800415e:	2300      	movs	r3, #0
 8004160:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004174:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004184:	f043 0318 	orr.w	r3, r3, #24
 8004188:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004198:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800419c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800419e:	7afb      	ldrb	r3, [r7, #11]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d10f      	bne.n	80041c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	461a      	mov	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80041c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	4f54300a 	.word	0x4f54300a

080041d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3301      	adds	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4a13      	ldr	r2, [pc, #76]	; (800423c <USB_CoreReset+0x64>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e01b      	b.n	800422e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	daf2      	bge.n	80041e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3301      	adds	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <USB_CoreReset+0x64>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d901      	bls.n	8004220 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e006      	b.n	800422e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	d0f0      	beq.n	800420e <USB_CoreReset+0x36>

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	00030d40 	.word	0x00030d40

08004240 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7c1b      	ldrb	r3, [r3, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d115      	bne.n	8004284 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800425c:	2202      	movs	r2, #2
 800425e:	2181      	movs	r1, #129	; 0x81
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f002 f898 	bl	8006396 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800426c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004270:	2202      	movs	r2, #2
 8004272:	2101      	movs	r1, #1
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f002 f88e 	bl	8006396 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8004282:	e012      	b.n	80042aa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004284:	2340      	movs	r3, #64	; 0x40
 8004286:	2202      	movs	r2, #2
 8004288:	2181      	movs	r1, #129	; 0x81
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f002 f883 	bl	8006396 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004296:	2340      	movs	r3, #64	; 0x40
 8004298:	2202      	movs	r2, #2
 800429a:	2101      	movs	r1, #1
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f002 f87a 	bl	8006396 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80042aa:	2308      	movs	r3, #8
 80042ac:	2203      	movs	r2, #3
 80042ae:	2182      	movs	r1, #130	; 0x82
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f002 f870 	bl	8006396 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80042bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80042c0:	f002 fb1e 	bl	8006900 <malloc>
 80042c4:	4603      	mov	r3, r0
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d102      	bne.n	80042de <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
 80042dc:	e026      	b.n	800432c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80042e4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	7c1b      	ldrb	r3, [r3, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800430e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004312:	2101      	movs	r1, #1
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f002 f92f 	bl	8006578 <USBD_LL_PrepareReceive>
 800431a:	e007      	b.n	800432c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004322:	2340      	movs	r3, #64	; 0x40
 8004324:	2101      	movs	r1, #1
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f002 f926 	bl	8006578 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004346:	2181      	movs	r1, #129	; 0x81
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f002 f84a 	bl	80063e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004354:	2101      	movs	r1, #1
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f002 f843 	bl	80063e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004364:	2182      	movs	r1, #130	; 0x82
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f002 f83b 	bl	80063e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00e      	beq.n	800439a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800438c:	4618      	mov	r0, r3
 800438e:	f002 fabf 	bl	8006910 <free>
    pdev->pClassData = NULL;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80043b4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d039      	beq.n	8004442 <USBD_CDC_Setup+0x9e>
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d17c      	bne.n	80044cc <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	88db      	ldrh	r3, [r3, #6]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d029      	beq.n	800442e <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	b25b      	sxtb	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	da11      	bge.n	8004408 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80043f0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	88d2      	ldrh	r2, [r2, #6]
 80043f6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80043f8:	6939      	ldr	r1, [r7, #16]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	88db      	ldrh	r3, [r3, #6]
 80043fe:	461a      	mov	r2, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f001 f9c9 	bl	8005798 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8004406:	e068      	b.n	80044da <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	785a      	ldrb	r2, [r3, #1]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	88db      	ldrh	r3, [r3, #6]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800441e:	6939      	ldr	r1, [r7, #16]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	88db      	ldrh	r3, [r3, #6]
 8004424:	461a      	mov	r2, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f001 f9e4 	bl	80057f4 <USBD_CtlPrepareRx>
    break;
 800442c:	e055      	b.n	80044da <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	7850      	ldrb	r0, [r2, #1]
 800443a:	2200      	movs	r2, #0
 800443c:	6839      	ldr	r1, [r7, #0]
 800443e:	4798      	blx	r3
    break;
 8004440:	e04b      	b.n	80044da <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	2b0a      	cmp	r3, #10
 8004448:	d017      	beq.n	800447a <USBD_CDC_Setup+0xd6>
 800444a:	2b0b      	cmp	r3, #11
 800444c:	d029      	beq.n	80044a2 <USBD_CDC_Setup+0xfe>
 800444e:	2b00      	cmp	r3, #0
 8004450:	d133      	bne.n	80044ba <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004458:	2b03      	cmp	r3, #3
 800445a:	d107      	bne.n	800446c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800445c:	f107 030c 	add.w	r3, r7, #12
 8004460:	2202      	movs	r2, #2
 8004462:	4619      	mov	r1, r3
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f001 f997 	bl	8005798 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800446a:	e02e      	b.n	80044ca <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800446c:	6839      	ldr	r1, [r7, #0]
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f001 f927 	bl	80056c2 <USBD_CtlError>
			  ret = USBD_FAIL;
 8004474:	2302      	movs	r3, #2
 8004476:	75fb      	strb	r3, [r7, #23]
      break;
 8004478:	e027      	b.n	80044ca <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004480:	2b03      	cmp	r3, #3
 8004482:	d107      	bne.n	8004494 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8004484:	f107 030f 	add.w	r3, r7, #15
 8004488:	2201      	movs	r2, #1
 800448a:	4619      	mov	r1, r3
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f001 f983 	bl	8005798 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8004492:	e01a      	b.n	80044ca <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8004494:	6839      	ldr	r1, [r7, #0]
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f001 f913 	bl	80056c2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800449c:	2302      	movs	r3, #2
 800449e:	75fb      	strb	r3, [r7, #23]
      break;
 80044a0:	e013      	b.n	80044ca <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d00d      	beq.n	80044c8 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80044ac:	6839      	ldr	r1, [r7, #0]
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f001 f907 	bl	80056c2 <USBD_CtlError>
			  ret = USBD_FAIL;
 80044b4:	2302      	movs	r3, #2
 80044b6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80044b8:	e006      	b.n	80044c8 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80044ba:	6839      	ldr	r1, [r7, #0]
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f001 f900 	bl	80056c2 <USBD_CtlError>
      ret = USBD_FAIL;
 80044c2:	2302      	movs	r3, #2
 80044c4:	75fb      	strb	r3, [r7, #23]
      break;
 80044c6:	e000      	b.n	80044ca <USBD_CDC_Setup+0x126>
      break;
 80044c8:	bf00      	nop
    }
    break;
 80044ca:	e006      	b.n	80044da <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80044cc:	6839      	ldr	r1, [r7, #0]
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f001 f8f7 	bl	80056c2 <USBD_CtlError>
    ret = USBD_FAIL;
 80044d4:	2302      	movs	r3, #2
 80044d6:	75fb      	strb	r3, [r7, #23]
    break;
 80044d8:	bf00      	nop
  }

  return ret;
 80044da:	7dfb      	ldrb	r3, [r7, #23]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80044f6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80044fe:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004506:	2b00      	cmp	r3, #0
 8004508:	d03a      	beq.n	8004580 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	331c      	adds	r3, #28
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d029      	beq.n	8004574 <USBD_CDC_DataIn+0x90>
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	331c      	adds	r3, #28
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	78f9      	ldrb	r1, [r7, #3]
 8004534:	68b8      	ldr	r0, [r7, #8]
 8004536:	460b      	mov	r3, r1
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	1a5b      	subs	r3, r3, r1
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4403      	add	r3, r0
 8004540:	3344      	adds	r3, #68	; 0x44
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	fbb2 f1f3 	udiv	r1, r2, r3
 8004548:	fb03 f301 	mul.w	r3, r3, r1
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d110      	bne.n	8004574 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	331c      	adds	r3, #28
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8004566:	78f9      	ldrb	r1, [r7, #3]
 8004568:	2300      	movs	r3, #0
 800456a:	2200      	movs	r2, #0
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f001 ffe0 	bl	8006532 <USBD_LL_Transmit>
 8004572:	e003      	b.n	800457c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e000      	b.n	8004582 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004580:	2302      	movs	r3, #2
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800459c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f002 f80b 	bl	80065be <USBD_LL_GetRxDataSize>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00d      	beq.n	80045d6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80045ce:	4611      	mov	r1, r2
 80045d0:	4798      	blx	r3

    return USBD_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e000      	b.n	80045d8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80045d6:	2302      	movs	r3, #2
  }
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80045ee:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d015      	beq.n	8004626 <USBD_CDC_EP0_RxReady+0x46>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004600:	2bff      	cmp	r3, #255	; 0xff
 8004602:	d010      	beq.n	8004626 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004612:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800461a:	b292      	uxth	r2, r2
 800461c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	22ff      	movs	r2, #255	; 0xff
 8004622:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2243      	movs	r2, #67	; 0x43
 800463c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800463e:	4b03      	ldr	r3, [pc, #12]	; (800464c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004640:	4618      	mov	r0, r3
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	20000090 	.word	0x20000090

08004650 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2243      	movs	r2, #67	; 0x43
 800465c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800465e:	4b03      	ldr	r3, [pc, #12]	; (800466c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	2000004c 	.word	0x2000004c

08004670 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2243      	movs	r2, #67	; 0x43
 800467c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800467e:	4b03      	ldr	r3, [pc, #12]	; (800468c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	200000d4 	.word	0x200000d4

08004690 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	220a      	movs	r2, #10
 800469c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800469e:	4b03      	ldr	r3, [pc, #12]	; (80046ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	20000008 	.word	0x20000008

080046b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80046ba:	2302      	movs	r3, #2
 80046bc:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80046de:	b480      	push	{r7}
 80046e0:	b087      	sub	sp, #28
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	4613      	mov	r3, r2
 80046ea:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80046f2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80046fc:	88fa      	ldrh	r2, [r7, #6]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	371c      	adds	r7, #28
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8004712:	b480      	push	{r7}
 8004714:	b085      	sub	sp, #20
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004722:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004748:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01c      	beq.n	800478e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800475a:	2b00      	cmp	r3, #0
 800475c:	d115      	bne.n	800478a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800477c:	b29b      	uxth	r3, r3
 800477e:	2181      	movs	r1, #129	; 0x81
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 fed6 	bl	8006532 <USBD_LL_Transmit>

      return USBD_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e002      	b.n	8004790 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800478e:	2302      	movs	r3, #2
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d017      	beq.n	80047e2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7c1b      	ldrb	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047c4:	2101      	movs	r1, #1
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f001 fed6 	bl	8006578 <USBD_LL_PrepareReceive>
 80047cc:	e007      	b.n	80047de <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047d4:	2340      	movs	r3, #64	; 0x40
 80047d6:	2101      	movs	r1, #1
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f001 fecd 	bl	8006578 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e000      	b.n	80047e4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80047e2:	2302      	movs	r3, #2
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	4613      	mov	r3, r2
 80047f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004800:	2302      	movs	r3, #2
 8004802:	e01a      	b.n	800483a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	79fa      	ldrb	r2, [r7, #7]
 8004830:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f001 fd48 	bl	80062c8 <USBD_LL_Init>

  return USBD_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d006      	beq.n	8004864 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
 8004862:	e001      	b.n	8004868 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004864:	2302      	movs	r3, #2
 8004866:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f001 fd6e 	bl	8006360 <USBD_LL_Start>

  return USBD_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80048b0:	2302      	movs	r3, #2
 80048b2:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	4611      	mov	r1, r2
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	4798      	blx	r3
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b082      	sub	sp, #8
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	460b      	mov	r3, r1
 80048ec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	4611      	mov	r1, r2
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	4798      	blx	r3
  return USBD_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004918:	6839      	ldr	r1, [r7, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fe94 	bl	8005648 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800492e:	461a      	mov	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	2b01      	cmp	r3, #1
 8004942:	d00c      	beq.n	800495e <USBD_LL_SetupStage+0x56>
 8004944:	2b01      	cmp	r3, #1
 8004946:	d302      	bcc.n	800494e <USBD_LL_SetupStage+0x46>
 8004948:	2b02      	cmp	r3, #2
 800494a:	d010      	beq.n	800496e <USBD_LL_SetupStage+0x66>
 800494c:	e017      	b.n	800497e <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004954:	4619      	mov	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa04 	bl	8004d64 <USBD_StdDevReq>
    break;
 800495c:	e01a      	b.n	8004994 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa66 	bl	8004e38 <USBD_StdItfReq>
    break;
 800496c:	e012      	b.n	8004994 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 faa4 	bl	8004ec4 <USBD_StdEPReq>
    break;
 800497c:	e00a      	b.n	8004994 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004984:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004988:	b2db      	uxtb	r3, r3
 800498a:	4619      	mov	r1, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f001 fd47 	bl	8006420 <USBD_LL_StallEP>
    break;
 8004992:	bf00      	nop
  }

  return USBD_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	460b      	mov	r3, r1
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 80049ac:	7afb      	ldrb	r3, [r7, #11]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d14b      	bne.n	8004a4a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80049b8:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d134      	bne.n	8004a2e <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d919      	bls.n	8004a04 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	1ad2      	subs	r2, r2, r3
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d203      	bcs.n	80049f2 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	e002      	b.n	80049f8 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 ff17 	bl	8005830 <USBD_CtlContinueRx>
 8004a02:	e038      	b.n	8004a76 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d105      	bne.n	8004a26 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 ff14 	bl	8005854 <USBD_CtlSendStatus>
 8004a2c:	e023      	b.n	8004a76 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004a34:	2b05      	cmp	r3, #5
 8004a36:	d11e      	bne.n	8004a76 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8004a40:	2100      	movs	r1, #0
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f001 fcec 	bl	8006420 <USBD_LL_StallEP>
 8004a48:	e015      	b.n	8004a76 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00d      	beq.n	8004a72 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d108      	bne.n	8004a72 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	7afa      	ldrb	r2, [r7, #11]
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	4798      	blx	r3
 8004a70:	e001      	b.n	8004a76 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004a72:	2302      	movs	r3, #2
 8004a74:	e000      	b.n	8004a78 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8004a8e:	7afb      	ldrb	r3, [r7, #11]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d17f      	bne.n	8004b94 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3314      	adds	r3, #20
 8004a98:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d15c      	bne.n	8004b5e <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d915      	bls.n	8004adc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	1ad2      	subs	r2, r2, r3
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 fe81 	bl	80057d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f001 fd4f 	bl	8006578 <USBD_LL_PrepareReceive>
 8004ada:	e04e      	b.n	8004b7a <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	6912      	ldr	r2, [r2, #16]
 8004ae4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ae8:	fb02 f201 	mul.w	r2, r2, r1
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d11c      	bne.n	8004b2c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d316      	bcc.n	8004b2c <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d20f      	bcs.n	8004b2c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2100      	movs	r1, #0
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fe5d 	bl	80057d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2200      	movs	r2, #0
 8004b22:	2100      	movs	r1, #0
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f001 fd27 	bl	8006578 <USBD_LL_PrepareReceive>
 8004b2a:	e026      	b.n	8004b7a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d105      	bne.n	8004b4e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004b4e:	2180      	movs	r1, #128	; 0x80
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f001 fc65 	bl	8006420 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 fe8f 	bl	800587a <USBD_CtlReceiveStatus>
 8004b5c:	e00d      	b.n	8004b7a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d004      	beq.n	8004b72 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d103      	bne.n	8004b7a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f001 fc53 	bl	8006420 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d11d      	bne.n	8004bc0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff fe82 	bl	800488e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8004b92:	e015      	b.n	8004bc0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00d      	beq.n	8004bbc <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d108      	bne.n	8004bbc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	7afa      	ldrb	r2, [r7, #11]
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	4798      	blx	r3
 8004bba:	e001      	b.n	8004bc0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e000      	b.n	8004bc2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bd2:	2340      	movs	r3, #64	; 0x40
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f001 fbdc 	bl	8006396 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2240      	movs	r2, #64	; 0x40
 8004bea:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bee:	2340      	movs	r3, #64	; 0x40
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2180      	movs	r1, #128	; 0x80
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f001 fbce 	bl	8006396 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2240      	movs	r2, #64	; 0x40
 8004c04:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6852      	ldr	r2, [r2, #4]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	4611      	mov	r1, r2
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	4798      	blx	r3
  }

  return USBD_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2204      	movs	r2, #4
 8004c84:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d10b      	bne.n	8004ce2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6852      	ldr	r2, [r2, #4]
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	4611      	mov	r1, r2
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4798      	blx	r3

  return USBD_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d004      	beq.n	8004d88 <USBD_StdDevReq+0x24>
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d002      	beq.n	8004d88 <USBD_StdDevReq+0x24>
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <USBD_StdDevReq+0x34>
 8004d86:	e04c      	b.n	8004e22 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	6839      	ldr	r1, [r7, #0]
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
    break;
 8004d96:	e049      	b.n	8004e2c <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	785b      	ldrb	r3, [r3, #1]
 8004d9c:	2b09      	cmp	r3, #9
 8004d9e:	d83a      	bhi.n	8004e16 <USBD_StdDevReq+0xb2>
 8004da0:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <USBD_StdDevReq+0x44>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004df9 	.word	0x08004df9
 8004dac:	08004e0d 	.word	0x08004e0d
 8004db0:	08004e17 	.word	0x08004e17
 8004db4:	08004e03 	.word	0x08004e03
 8004db8:	08004e17 	.word	0x08004e17
 8004dbc:	08004ddb 	.word	0x08004ddb
 8004dc0:	08004dd1 	.word	0x08004dd1
 8004dc4:	08004e17 	.word	0x08004e17
 8004dc8:	08004def 	.word	0x08004def
 8004dcc:	08004de5 	.word	0x08004de5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8004dd0:	6839      	ldr	r1, [r7, #0]
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f9d2 	bl	800517c <USBD_GetDescriptor>
      break;
 8004dd8:	e022      	b.n	8004e20 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8004dda:	6839      	ldr	r1, [r7, #0]
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fac7 	bl	8005370 <USBD_SetAddress>
      break;
 8004de2:	e01d      	b.n	8004e20 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fb04 	bl	80053f4 <USBD_SetConfig>
      break;
 8004dec:	e018      	b.n	8004e20 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fb8d 	bl	8005510 <USBD_GetConfig>
      break;
 8004df6:	e013      	b.n	8004e20 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fbbc 	bl	8005578 <USBD_GetStatus>
      break;
 8004e00:	e00e      	b.n	8004e20 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8004e02:	6839      	ldr	r1, [r7, #0]
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fbea 	bl	80055de <USBD_SetFeature>
      break;
 8004e0a:	e009      	b.n	8004e20 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fbf9 	bl	8005606 <USBD_ClrFeature>
      break;
 8004e14:	e004      	b.n	8004e20 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fc52 	bl	80056c2 <USBD_CtlError>
      break;
 8004e1e:	bf00      	nop
    }
    break;
 8004e20:	e004      	b.n	8004e2c <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8004e22:	6839      	ldr	r1, [r7, #0]
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fc4c 	bl	80056c2 <USBD_CtlError>
    break;
 8004e2a:	bf00      	nop
  }

  return ret;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop

08004e38 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d003      	beq.n	8004e5a <USBD_StdItfReq+0x22>
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d001      	beq.n	8004e5a <USBD_StdItfReq+0x22>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d12a      	bne.n	8004eb0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004e60:	3b01      	subs	r3, #1
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d81d      	bhi.n	8004ea2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	889b      	ldrh	r3, [r3, #4]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d813      	bhi.n	8004e98 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	6839      	ldr	r1, [r7, #0]
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	4798      	blx	r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	88db      	ldrh	r3, [r3, #6]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d110      	bne.n	8004eac <USBD_StdItfReq+0x74>
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10d      	bne.n	8004eac <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fcdf 	bl	8005854 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004e96:	e009      	b.n	8004eac <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fc11 	bl	80056c2 <USBD_CtlError>
      break;
 8004ea0:	e004      	b.n	8004eac <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fc0c 	bl	80056c2 <USBD_CtlError>
      break;
 8004eaa:	e000      	b.n	8004eae <USBD_StdItfReq+0x76>
      break;
 8004eac:	bf00      	nop
    }
    break;
 8004eae:	e004      	b.n	8004eba <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fc05 	bl	80056c2 <USBD_CtlError>
    break;
 8004eb8:	bf00      	nop
  }

  return USBD_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	889b      	ldrh	r3, [r3, #4]
 8004ed6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d004      	beq.n	8004eee <USBD_StdEPReq+0x2a>
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d002      	beq.n	8004eee <USBD_StdEPReq+0x2a>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <USBD_StdEPReq+0x3a>
 8004eec:	e13b      	b.n	8005166 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	4798      	blx	r3
    break;
 8004efc:	e138      	b.n	8005170 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d10a      	bne.n	8004f20 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	6839      	ldr	r1, [r7, #0]
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4798      	blx	r3
 8004f18:	4603      	mov	r3, r0
 8004f1a:	73fb      	strb	r3, [r7, #15]

      return ret;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	e128      	b.n	8005172 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d03e      	beq.n	8004fa6 <USBD_StdEPReq+0xe2>
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d002      	beq.n	8004f32 <USBD_StdEPReq+0x6e>
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d070      	beq.n	8005012 <USBD_StdEPReq+0x14e>
 8004f30:	e113      	b.n	800515a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d002      	beq.n	8004f42 <USBD_StdEPReq+0x7e>
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d015      	beq.n	8004f6c <USBD_StdEPReq+0xa8>
 8004f40:	e02b      	b.n	8004f9a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f42:	7bbb      	ldrb	r3, [r7, #14]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00c      	beq.n	8004f62 <USBD_StdEPReq+0x9e>
 8004f48:	7bbb      	ldrb	r3, [r7, #14]
 8004f4a:	2b80      	cmp	r3, #128	; 0x80
 8004f4c:	d009      	beq.n	8004f62 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004f4e:	7bbb      	ldrb	r3, [r7, #14]
 8004f50:	4619      	mov	r1, r3
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f001 fa64 	bl	8006420 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004f58:	2180      	movs	r1, #128	; 0x80
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f001 fa60 	bl	8006420 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004f60:	e020      	b.n	8004fa4 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fbac 	bl	80056c2 <USBD_CtlError>
        break;
 8004f6a:	e01b      	b.n	8004fa4 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	885b      	ldrh	r3, [r3, #2]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10e      	bne.n	8004f92 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00b      	beq.n	8004f92 <USBD_StdEPReq+0xce>
 8004f7a:	7bbb      	ldrb	r3, [r7, #14]
 8004f7c:	2b80      	cmp	r3, #128	; 0x80
 8004f7e:	d008      	beq.n	8004f92 <USBD_StdEPReq+0xce>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	88db      	ldrh	r3, [r3, #6]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8004f88:	7bbb      	ldrb	r3, [r7, #14]
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 fa47 	bl	8006420 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fc5e 	bl	8005854 <USBD_CtlSendStatus>

        break;
 8004f98:	e004      	b.n	8004fa4 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fb90 	bl	80056c2 <USBD_CtlError>
        break;
 8004fa2:	bf00      	nop
      }
      break;
 8004fa4:	e0de      	b.n	8005164 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d002      	beq.n	8004fb6 <USBD_StdEPReq+0xf2>
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d015      	beq.n	8004fe0 <USBD_StdEPReq+0x11c>
 8004fb4:	e026      	b.n	8005004 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004fb6:	7bbb      	ldrb	r3, [r7, #14]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <USBD_StdEPReq+0x112>
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	2b80      	cmp	r3, #128	; 0x80
 8004fc0:	d009      	beq.n	8004fd6 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004fc2:	7bbb      	ldrb	r3, [r7, #14]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f001 fa2a 	bl	8006420 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f001 fa26 	bl	8006420 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004fd4:	e01c      	b.n	8005010 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fb72 	bl	80056c2 <USBD_CtlError>
        break;
 8004fde:	e017      	b.n	8005010 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	885b      	ldrh	r3, [r3, #2]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d112      	bne.n	800500e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004fe8:	7bbb      	ldrb	r3, [r7, #14]
 8004fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d004      	beq.n	8004ffc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004ff2:	7bbb      	ldrb	r3, [r7, #14]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 fa31 	bl	800645e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fc29 	bl	8005854 <USBD_CtlSendStatus>
        }
        break;
 8005002:	e004      	b.n	800500e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fb5b 	bl	80056c2 <USBD_CtlError>
        break;
 800500c:	e000      	b.n	8005010 <USBD_StdEPReq+0x14c>
        break;
 800500e:	bf00      	nop
      }
      break;
 8005010:	e0a8      	b.n	8005164 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005018:	2b02      	cmp	r3, #2
 800501a:	d002      	beq.n	8005022 <USBD_StdEPReq+0x15e>
 800501c:	2b03      	cmp	r3, #3
 800501e:	d031      	beq.n	8005084 <USBD_StdEPReq+0x1c0>
 8005020:	e095      	b.n	800514e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005022:	7bbb      	ldrb	r3, [r7, #14]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d007      	beq.n	8005038 <USBD_StdEPReq+0x174>
 8005028:	7bbb      	ldrb	r3, [r7, #14]
 800502a:	2b80      	cmp	r3, #128	; 0x80
 800502c:	d004      	beq.n	8005038 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800502e:	6839      	ldr	r1, [r7, #0]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fb46 	bl	80056c2 <USBD_CtlError>
          break;
 8005036:	e08f      	b.n	8005158 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800503c:	2b00      	cmp	r3, #0
 800503e:	da0b      	bge.n	8005058 <USBD_StdEPReq+0x194>
 8005040:	7bbb      	ldrb	r3, [r7, #14]
 8005042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	3310      	adds	r3, #16
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	3304      	adds	r3, #4
 8005056:	e00a      	b.n	800506e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005058:	7bbb      	ldrb	r3, [r7, #14]
 800505a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	4413      	add	r3, r2
 800506e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2202      	movs	r2, #2
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fb8b 	bl	8005798 <USBD_CtlSendData>
          break;
 8005082:	e069      	b.n	8005158 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005088:	2b00      	cmp	r3, #0
 800508a:	da11      	bge.n	80050b0 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800508c:	7bbb      	ldrb	r3, [r7, #14]
 800508e:	f003 020f 	and.w	r2, r3, #15
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	3318      	adds	r3, #24
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d117      	bne.n	80050d6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80050a6:	6839      	ldr	r1, [r7, #0]
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fb0a 	bl	80056c2 <USBD_CtlError>
            break;
 80050ae:	e053      	b.n	8005158 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80050b0:	7bbb      	ldrb	r3, [r7, #14]
 80050b2:	f003 020f 	and.w	r2, r3, #15
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d104      	bne.n	80050d6 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80050cc:	6839      	ldr	r1, [r7, #0]
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 faf7 	bl	80056c2 <USBD_CtlError>
            break;
 80050d4:	e040      	b.n	8005158 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80050d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	da0b      	bge.n	80050f6 <USBD_StdEPReq+0x232>
 80050de:	7bbb      	ldrb	r3, [r7, #14]
 80050e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	3310      	adds	r3, #16
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4413      	add	r3, r2
 80050f2:	3304      	adds	r3, #4
 80050f4:	e00a      	b.n	800510c <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80050f6:	7bbb      	ldrb	r3, [r7, #14]
 80050f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	4413      	add	r3, r2
 800510c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800510e:	7bbb      	ldrb	r3, [r7, #14]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <USBD_StdEPReq+0x256>
 8005114:	7bbb      	ldrb	r3, [r7, #14]
 8005116:	2b80      	cmp	r3, #128	; 0x80
 8005118:	d103      	bne.n	8005122 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e00e      	b.n	8005140 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005122:	7bbb      	ldrb	r3, [r7, #14]
 8005124:	4619      	mov	r1, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f001 f9b8 	bl	800649c <USBD_LL_IsStallEP>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e002      	b.n	8005140 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2202      	movs	r2, #2
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fb26 	bl	8005798 <USBD_CtlSendData>
          break;
 800514c:	e004      	b.n	8005158 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800514e:	6839      	ldr	r1, [r7, #0]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fab6 	bl	80056c2 <USBD_CtlError>
        break;
 8005156:	bf00      	nop
      }
      break;
 8005158:	e004      	b.n	8005164 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800515a:	6839      	ldr	r1, [r7, #0]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fab0 	bl	80056c2 <USBD_CtlError>
      break;
 8005162:	bf00      	nop
    }
    break;
 8005164:	e004      	b.n	8005170 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8005166:	6839      	ldr	r1, [r7, #0]
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 faaa 	bl	80056c2 <USBD_CtlError>
    break;
 800516e:	bf00      	nop
  }

  return ret;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	885b      	ldrh	r3, [r3, #2]
 800518a:	0a1b      	lsrs	r3, r3, #8
 800518c:	b29b      	uxth	r3, r3
 800518e:	3b01      	subs	r3, #1
 8005190:	2b06      	cmp	r3, #6
 8005192:	f200 80c9 	bhi.w	8005328 <USBD_GetDescriptor+0x1ac>
 8005196:	a201      	add	r2, pc, #4	; (adr r2, 800519c <USBD_GetDescriptor+0x20>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051b9 	.word	0x080051b9
 80051a0:	080051d1 	.word	0x080051d1
 80051a4:	08005211 	.word	0x08005211
 80051a8:	08005329 	.word	0x08005329
 80051ac:	08005329 	.word	0x08005329
 80051b0:	080052d5 	.word	0x080052d5
 80051b4:	080052fb 	.word	0x080052fb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	7c12      	ldrb	r2, [r2, #16]
 80051c4:	f107 010a 	add.w	r1, r7, #10
 80051c8:	4610      	mov	r0, r2
 80051ca:	4798      	blx	r3
 80051cc:	60f8      	str	r0, [r7, #12]
    break;
 80051ce:	e0b0      	b.n	8005332 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	7c1b      	ldrb	r3, [r3, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10d      	bne.n	80051f4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e0:	f107 020a 	add.w	r2, r7, #10
 80051e4:	4610      	mov	r0, r2
 80051e6:	4798      	blx	r3
 80051e8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3301      	adds	r3, #1
 80051ee:	2202      	movs	r2, #2
 80051f0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80051f2:	e09e      	b.n	8005332 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	f107 020a 	add.w	r2, r7, #10
 8005200:	4610      	mov	r0, r2
 8005202:	4798      	blx	r3
 8005204:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3301      	adds	r3, #1
 800520a:	2202      	movs	r2, #2
 800520c:	701a      	strb	r2, [r3, #0]
    break;
 800520e:	e090      	b.n	8005332 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	885b      	ldrh	r3, [r3, #2]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b05      	cmp	r3, #5
 8005218:	d856      	bhi.n	80052c8 <USBD_GetDescriptor+0x14c>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <USBD_GetDescriptor+0xa4>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005239 	.word	0x08005239
 8005224:	08005251 	.word	0x08005251
 8005228:	08005269 	.word	0x08005269
 800522c:	08005281 	.word	0x08005281
 8005230:	08005299 	.word	0x08005299
 8005234:	080052b1 	.word	0x080052b1
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	7c12      	ldrb	r2, [r2, #16]
 8005244:	f107 010a 	add.w	r1, r7, #10
 8005248:	4610      	mov	r0, r2
 800524a:	4798      	blx	r3
 800524c:	60f8      	str	r0, [r7, #12]
      break;
 800524e:	e040      	b.n	80052d2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	7c12      	ldrb	r2, [r2, #16]
 800525c:	f107 010a 	add.w	r1, r7, #10
 8005260:	4610      	mov	r0, r2
 8005262:	4798      	blx	r3
 8005264:	60f8      	str	r0, [r7, #12]
      break;
 8005266:	e034      	b.n	80052d2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	7c12      	ldrb	r2, [r2, #16]
 8005274:	f107 010a 	add.w	r1, r7, #10
 8005278:	4610      	mov	r0, r2
 800527a:	4798      	blx	r3
 800527c:	60f8      	str	r0, [r7, #12]
      break;
 800527e:	e028      	b.n	80052d2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	7c12      	ldrb	r2, [r2, #16]
 800528c:	f107 010a 	add.w	r1, r7, #10
 8005290:	4610      	mov	r0, r2
 8005292:	4798      	blx	r3
 8005294:	60f8      	str	r0, [r7, #12]
      break;
 8005296:	e01c      	b.n	80052d2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	7c12      	ldrb	r2, [r2, #16]
 80052a4:	f107 010a 	add.w	r1, r7, #10
 80052a8:	4610      	mov	r0, r2
 80052aa:	4798      	blx	r3
 80052ac:	60f8      	str	r0, [r7, #12]
      break;
 80052ae:	e010      	b.n	80052d2 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	7c12      	ldrb	r2, [r2, #16]
 80052bc:	f107 010a 	add.w	r1, r7, #10
 80052c0:	4610      	mov	r0, r2
 80052c2:	4798      	blx	r3
 80052c4:	60f8      	str	r0, [r7, #12]
      break;
 80052c6:	e004      	b.n	80052d2 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f9f9 	bl	80056c2 <USBD_CtlError>
      return;
 80052d0:	e04b      	b.n	800536a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 80052d2:	e02e      	b.n	8005332 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	7c1b      	ldrb	r3, [r3, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80052e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e4:	f107 020a 	add.w	r2, r7, #10
 80052e8:	4610      	mov	r0, r2
 80052ea:	4798      	blx	r3
 80052ec:	60f8      	str	r0, [r7, #12]
      break;
 80052ee:	e020      	b.n	8005332 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f9e5 	bl	80056c2 <USBD_CtlError>
      return;
 80052f8:	e037      	b.n	800536a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7c1b      	ldrb	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10d      	bne.n	800531e <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	f107 020a 	add.w	r2, r7, #10
 800530e:	4610      	mov	r0, r2
 8005310:	4798      	blx	r3
 8005312:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3301      	adds	r3, #1
 8005318:	2207      	movs	r2, #7
 800531a:	701a      	strb	r2, [r3, #0]
      break;
 800531c:	e009      	b.n	8005332 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f9ce 	bl	80056c2 <USBD_CtlError>
      return;
 8005326:	e020      	b.n	800536a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f9c9 	bl	80056c2 <USBD_CtlError>
    return;
 8005330:	e01b      	b.n	800536a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d011      	beq.n	800535c <USBD_GetDescriptor+0x1e0>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	88db      	ldrh	r3, [r3, #6]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00d      	beq.n	800535c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	88da      	ldrh	r2, [r3, #6]
 8005344:	897b      	ldrh	r3, [r7, #10]
 8005346:	4293      	cmp	r3, r2
 8005348:	bf28      	it	cs
 800534a:	4613      	movcs	r3, r2
 800534c:	b29b      	uxth	r3, r3
 800534e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8005350:	897b      	ldrh	r3, [r7, #10]
 8005352:	461a      	mov	r2, r3
 8005354:	68f9      	ldr	r1, [r7, #12]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa1e 	bl	8005798 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	88db      	ldrh	r3, [r3, #6]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d102      	bne.n	800536a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fa75 	bl	8005854 <USBD_CtlSendStatus>
  }
}
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	889b      	ldrh	r3, [r3, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d130      	bne.n	80053e4 <USBD_SetAddress+0x74>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	88db      	ldrh	r3, [r3, #6]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d12c      	bne.n	80053e4 <USBD_SetAddress+0x74>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	885b      	ldrh	r3, [r3, #2]
 800538e:	2b7f      	cmp	r3, #127	; 0x7f
 8005390:	d828      	bhi.n	80053e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	885b      	ldrh	r3, [r3, #2]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800539c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d104      	bne.n	80053b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80053a8:	6839      	ldr	r1, [r7, #0]
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f989 	bl	80056c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053b0:	e01c      	b.n	80053ec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	7bfa      	ldrb	r2, [r7, #15]
 80053b6:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	4619      	mov	r1, r3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f001 f898 	bl	80064f4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fa45 	bl	8005854 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d004      	beq.n	80053da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053d8:	e008      	b.n	80053ec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053e2:	e003      	b.n	80053ec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f96b 	bl	80056c2 <USBD_CtlError>
  }
}
 80053ec:	bf00      	nop
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	885b      	ldrh	r3, [r3, #2]
 8005402:	b2da      	uxtb	r2, r3
 8005404:	4b41      	ldr	r3, [pc, #260]	; (800550c <USBD_SetConfig+0x118>)
 8005406:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005408:	4b40      	ldr	r3, [pc, #256]	; (800550c <USBD_SetConfig+0x118>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d904      	bls.n	800541a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005410:	6839      	ldr	r1, [r7, #0]
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f955 	bl	80056c2 <USBD_CtlError>
 8005418:	e075      	b.n	8005506 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005420:	2b02      	cmp	r3, #2
 8005422:	d002      	beq.n	800542a <USBD_SetConfig+0x36>
 8005424:	2b03      	cmp	r3, #3
 8005426:	d023      	beq.n	8005470 <USBD_SetConfig+0x7c>
 8005428:	e062      	b.n	80054f0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800542a:	4b38      	ldr	r3, [pc, #224]	; (800550c <USBD_SetConfig+0x118>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01a      	beq.n	8005468 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8005432:	4b36      	ldr	r3, [pc, #216]	; (800550c <USBD_SetConfig+0x118>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2203      	movs	r2, #3
 8005440:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005444:	4b31      	ldr	r3, [pc, #196]	; (800550c <USBD_SetConfig+0x118>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff fa2a 	bl	80048a4 <USBD_SetClassConfig>
 8005450:	4603      	mov	r3, r0
 8005452:	2b02      	cmp	r3, #2
 8005454:	d104      	bne.n	8005460 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f932 	bl	80056c2 <USBD_CtlError>
          return;
 800545e:	e052      	b.n	8005506 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f9f7 	bl	8005854 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005466:	e04e      	b.n	8005506 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f9f3 	bl	8005854 <USBD_CtlSendStatus>
      break;
 800546e:	e04a      	b.n	8005506 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005470:	4b26      	ldr	r3, [pc, #152]	; (800550c <USBD_SetConfig+0x118>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d112      	bne.n	800549e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8005480:	4b22      	ldr	r3, [pc, #136]	; (800550c <USBD_SetConfig+0x118>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800548a:	4b20      	ldr	r3, [pc, #128]	; (800550c <USBD_SetConfig+0x118>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff fa26 	bl	80048e2 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f9dc 	bl	8005854 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800549c:	e033      	b.n	8005506 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800549e:	4b1b      	ldr	r3, [pc, #108]	; (800550c <USBD_SetConfig+0x118>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d01d      	beq.n	80054e8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff fa14 	bl	80048e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80054ba:	4b14      	ldr	r3, [pc, #80]	; (800550c <USBD_SetConfig+0x118>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80054c4:	4b11      	ldr	r3, [pc, #68]	; (800550c <USBD_SetConfig+0x118>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	4619      	mov	r1, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff f9ea 	bl	80048a4 <USBD_SetClassConfig>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d104      	bne.n	80054e0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 80054d6:	6839      	ldr	r1, [r7, #0]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f8f2 	bl	80056c2 <USBD_CtlError>
          return;
 80054de:	e012      	b.n	8005506 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f9b7 	bl	8005854 <USBD_CtlSendStatus>
      break;
 80054e6:	e00e      	b.n	8005506 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f9b3 	bl	8005854 <USBD_CtlSendStatus>
      break;
 80054ee:	e00a      	b.n	8005506 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80054f0:	6839      	ldr	r1, [r7, #0]
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f8e5 	bl	80056c2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80054f8:	4b04      	ldr	r3, [pc, #16]	; (800550c <USBD_SetConfig+0x118>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff f9ef 	bl	80048e2 <USBD_ClrClassConfig>
      break;
 8005504:	bf00      	nop
    }
  }
}
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	200001fc 	.word	0x200001fc

08005510 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	88db      	ldrh	r3, [r3, #6]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d004      	beq.n	800552c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f8cc 	bl	80056c2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800552a:	e021      	b.n	8005570 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005532:	2b01      	cmp	r3, #1
 8005534:	db17      	blt.n	8005566 <USBD_GetConfig+0x56>
 8005536:	2b02      	cmp	r3, #2
 8005538:	dd02      	ble.n	8005540 <USBD_GetConfig+0x30>
 800553a:	2b03      	cmp	r3, #3
 800553c:	d00b      	beq.n	8005556 <USBD_GetConfig+0x46>
 800553e:	e012      	b.n	8005566 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	3308      	adds	r3, #8
 800554a:	2201      	movs	r2, #1
 800554c:	4619      	mov	r1, r3
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f922 	bl	8005798 <USBD_CtlSendData>
      break;
 8005554:	e00c      	b.n	8005570 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3304      	adds	r3, #4
 800555a:	2201      	movs	r2, #1
 800555c:	4619      	mov	r1, r3
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f91a 	bl	8005798 <USBD_CtlSendData>
      break;
 8005564:	e004      	b.n	8005570 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f8aa 	bl	80056c2 <USBD_CtlError>
      break;
 800556e:	bf00      	nop
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005588:	3b01      	subs	r3, #1
 800558a:	2b02      	cmp	r3, #2
 800558c:	d81e      	bhi.n	80055cc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	88db      	ldrh	r3, [r3, #6]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d004      	beq.n	80055a0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f892 	bl	80056c2 <USBD_CtlError>
      break;
 800559e:	e01a      	b.n	80055d6 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f043 0202 	orr.w	r2, r3, #2
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	330c      	adds	r3, #12
 80055c0:	2202      	movs	r2, #2
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f8e7 	bl	8005798 <USBD_CtlSendData>
    break;
 80055ca:	e004      	b.n	80055d6 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f877 	bl	80056c2 <USBD_CtlError>
    break;
 80055d4:	bf00      	nop
  }
}
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	885b      	ldrh	r3, [r3, #2]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d106      	bne.n	80055fe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f92b 	bl	8005854 <USBD_CtlSendStatus>
  }

}
 80055fe:	bf00      	nop
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005616:	3b01      	subs	r3, #1
 8005618:	2b02      	cmp	r3, #2
 800561a:	d80b      	bhi.n	8005634 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	885b      	ldrh	r3, [r3, #2]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d10c      	bne.n	800563e <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f911 	bl	8005854 <USBD_CtlSendStatus>
    }
    break;
 8005632:	e004      	b.n	800563e <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8005634:	6839      	ldr	r1, [r7, #0]
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f843 	bl	80056c2 <USBD_CtlError>
    break;
 800563c:	e000      	b.n	8005640 <USBD_ClrFeature+0x3a>
    break;
 800563e:	bf00      	nop
  }
}
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781a      	ldrb	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	785a      	ldrb	r2, [r3, #1]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	3302      	adds	r3, #2
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	b29a      	uxth	r2, r3
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	3303      	adds	r3, #3
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	b29b      	uxth	r3, r3
 8005672:	021b      	lsls	r3, r3, #8
 8005674:	b29b      	uxth	r3, r3
 8005676:	4413      	add	r3, r2
 8005678:	b29a      	uxth	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	3304      	adds	r3, #4
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	b29a      	uxth	r2, r3
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	3305      	adds	r3, #5
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	021b      	lsls	r3, r3, #8
 8005690:	b29b      	uxth	r3, r3
 8005692:	4413      	add	r3, r2
 8005694:	b29a      	uxth	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	3306      	adds	r3, #6
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	3307      	adds	r3, #7
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	4413      	add	r3, r2
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	80da      	strh	r2, [r3, #6]

}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 80056cc:	2180      	movs	r1, #128	; 0x80
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fea6 	bl	8006420 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 80056d4:	2100      	movs	r1, #0
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fea2 	bl	8006420 <USBD_LL_StallEP>
}
 80056dc:	bf00      	nop
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d032      	beq.n	8005760 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f834 	bl	8005768 <USBD_GetLen>
 8005700:	4603      	mov	r3, r0
 8005702:	3301      	adds	r3, #1
 8005704:	b29b      	uxth	r3, r3
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800570e:	7dfb      	ldrb	r3, [r7, #23]
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	75fa      	strb	r2, [r7, #23]
 8005714:	461a      	mov	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4413      	add	r3, r2
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	7812      	ldrb	r2, [r2, #0]
 800571e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	75fa      	strb	r2, [r7, #23]
 8005726:	461a      	mov	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4413      	add	r3, r2
 800572c:	2203      	movs	r2, #3
 800572e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005730:	e012      	b.n	8005758 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	60fa      	str	r2, [r7, #12]
 8005738:	7dfa      	ldrb	r2, [r7, #23]
 800573a:	1c51      	adds	r1, r2, #1
 800573c:	75f9      	strb	r1, [r7, #23]
 800573e:	4611      	mov	r1, r2
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	440a      	add	r2, r1
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	75fa      	strb	r2, [r7, #23]
 800574e:	461a      	mov	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4413      	add	r3, r2
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e8      	bne.n	8005732 <USBD_GetString+0x4e>
    }
  }
}
 8005760:	bf00      	nop
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8005770:	2300      	movs	r3, #0
 8005772:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8005774:	e005      	b.n	8005782 <USBD_GetLen+0x1a>
    {
        len++;
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	3301      	adds	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3301      	adds	r3, #1
 8005780:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f5      	bne.n	8005776 <USBD_GetLen+0xe>
    }

    return len;
 800578a:	7bfb      	ldrb	r3, [r7, #15]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80057b4:	88fa      	ldrh	r2, [r7, #6]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	2100      	movs	r1, #0
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 feb6 	bl	8006532 <USBD_LL_Transmit>

  return USBD_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	4613      	mov	r3, r2
 80057dc:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	2100      	movs	r1, #0
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fea4 	bl	8006532 <USBD_LL_Transmit>

  return USBD_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	4613      	mov	r3, r2
 8005800:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2203      	movs	r2, #3
 8005806:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800580a:	88fa      	ldrh	r2, [r7, #6]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	2100      	movs	r1, #0
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fea9 	bl	8006578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	4613      	mov	r3, r2
 800583c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	2100      	movs	r1, #0
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fe97 	bl	8006578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2204      	movs	r2, #4
 8005860:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005864:	2300      	movs	r3, #0
 8005866:	2200      	movs	r2, #0
 8005868:	2100      	movs	r1, #0
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fe61 	bl	8006532 <USBD_LL_Transmit>

  return USBD_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2205      	movs	r2, #5
 8005886:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800588a:	2300      	movs	r3, #0
 800588c:	2200      	movs	r2, #0
 800588e:	2100      	movs	r1, #0
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 fe71 	bl	8006578 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058a4:	f7fa fe74 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058a8:	f000 f826 	bl	80058f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058ac:	f000 f8ba 	bl	8005a24 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80058b0:	f000 f88e 	bl	80059d0 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80058b4:	f000 fad0 	bl	8005e58 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	sprintf(usb_buf,"USB CDC Test %d\r\n",count);
 80058b8:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <main+0x4c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	490c      	ldr	r1, [pc, #48]	; (80058f0 <main+0x50>)
 80058c0:	480c      	ldr	r0, [pc, #48]	; (80058f4 <main+0x54>)
 80058c2:	f001 f8ed 	bl	8006aa0 <siprintf>
	CDC_Transmit_FS(usb_buf,BUF_SIZE);
 80058c6:	211e      	movs	r1, #30
 80058c8:	480a      	ldr	r0, [pc, #40]	; (80058f4 <main+0x54>)
 80058ca:	f000 fb83 	bl	8005fd4 <CDC_Transmit_FS>
	HAL_Delay(1000);
 80058ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058d2:	f7fa fecf 	bl	8000674 <HAL_Delay>
	memset(usb_buf,0,BUF_SIZE);
 80058d6:	221e      	movs	r2, #30
 80058d8:	2100      	movs	r1, #0
 80058da:	4806      	ldr	r0, [pc, #24]	; (80058f4 <main+0x54>)
 80058dc:	f001 f820 	bl	8006920 <memset>
	count++;
 80058e0:	4b02      	ldr	r3, [pc, #8]	; (80058ec <main+0x4c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3301      	adds	r3, #1
 80058e6:	4a01      	ldr	r2, [pc, #4]	; (80058ec <main+0x4c>)
 80058e8:	6013      	str	r3, [r2, #0]
  {
 80058ea:	e7e5      	b.n	80058b8 <main+0x18>
 80058ec:	20000270 	.word	0x20000270
 80058f0:	08007154 	.word	0x08007154
 80058f4:	20000210 	.word	0x20000210

080058f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b094      	sub	sp, #80	; 0x50
 80058fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058fe:	f107 0320 	add.w	r3, r7, #32
 8005902:	2230      	movs	r2, #48	; 0x30
 8005904:	2100      	movs	r1, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f001 f80a 	bl	8006920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800590c:	f107 030c 	add.w	r3, r7, #12
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800591c:	2300      	movs	r3, #0
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	4b29      	ldr	r3, [pc, #164]	; (80059c8 <SystemClock_Config+0xd0>)
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	4a28      	ldr	r2, [pc, #160]	; (80059c8 <SystemClock_Config+0xd0>)
 8005926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592a:	6413      	str	r3, [r2, #64]	; 0x40
 800592c:	4b26      	ldr	r3, [pc, #152]	; (80059c8 <SystemClock_Config+0xd0>)
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005938:	2300      	movs	r3, #0
 800593a:	607b      	str	r3, [r7, #4]
 800593c:	4b23      	ldr	r3, [pc, #140]	; (80059cc <SystemClock_Config+0xd4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005944:	4a21      	ldr	r2, [pc, #132]	; (80059cc <SystemClock_Config+0xd4>)
 8005946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800594a:	6013      	str	r3, [r2, #0]
 800594c:	4b1f      	ldr	r3, [pc, #124]	; (80059cc <SystemClock_Config+0xd4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005954:	607b      	str	r3, [r7, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005958:	2301      	movs	r3, #1
 800595a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800595c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005962:	2302      	movs	r3, #2
 8005964:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800596c:	2304      	movs	r3, #4
 800596e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005970:	2348      	movs	r3, #72	; 0x48
 8005972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005974:	2302      	movs	r3, #2
 8005976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005978:	2303      	movs	r3, #3
 800597a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800597c:	f107 0320 	add.w	r3, r7, #32
 8005980:	4618      	mov	r0, r3
 8005982:	f7fc faf9 	bl	8001f78 <HAL_RCC_OscConfig>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800598c:	f000 f952 	bl	8005c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005990:	230f      	movs	r3, #15
 8005992:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005994:	2302      	movs	r3, #2
 8005996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800599c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80059a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80059a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80059a8:	f107 030c 	add.w	r3, r7, #12
 80059ac:	2102      	movs	r1, #2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fc fd24 	bl	80023fc <HAL_RCC_ClockConfig>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80059ba:	f000 f93b 	bl	8005c34 <Error_Handler>
  }
}
 80059be:	bf00      	nop
 80059c0:	3750      	adds	r7, #80	; 0x50
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40023800 	.word	0x40023800
 80059cc:	40007000 	.word	0x40007000

080059d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80059d4:	4b11      	ldr	r3, [pc, #68]	; (8005a1c <MX_USART3_UART_Init+0x4c>)
 80059d6:	4a12      	ldr	r2, [pc, #72]	; (8005a20 <MX_USART3_UART_Init+0x50>)
 80059d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80059da:	4b10      	ldr	r3, [pc, #64]	; (8005a1c <MX_USART3_UART_Init+0x4c>)
 80059dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80059e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80059e2:	4b0e      	ldr	r3, [pc, #56]	; (8005a1c <MX_USART3_UART_Init+0x4c>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <MX_USART3_UART_Init+0x4c>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80059ee:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <MX_USART3_UART_Init+0x4c>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80059f4:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <MX_USART3_UART_Init+0x4c>)
 80059f6:	220c      	movs	r2, #12
 80059f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059fa:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <MX_USART3_UART_Init+0x4c>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a00:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <MX_USART3_UART_Init+0x4c>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005a06:	4805      	ldr	r0, [pc, #20]	; (8005a1c <MX_USART3_UART_Init+0x4c>)
 8005a08:	f7fc fee6 	bl	80027d8 <HAL_UART_Init>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005a12:	f000 f90f 	bl	8005c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005a16:	bf00      	nop
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000230 	.word	0x20000230
 8005a20:	40004800 	.word	0x40004800

08005a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08c      	sub	sp, #48	; 0x30
 8005a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a2a:	f107 031c 	add.w	r3, r7, #28
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
 8005a32:	605a      	str	r2, [r3, #4]
 8005a34:	609a      	str	r2, [r3, #8]
 8005a36:	60da      	str	r2, [r3, #12]
 8005a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	4b77      	ldr	r3, [pc, #476]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	4a76      	ldr	r2, [pc, #472]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005a44:	f043 0304 	orr.w	r3, r3, #4
 8005a48:	6313      	str	r3, [r2, #48]	; 0x30
 8005a4a:	4b74      	ldr	r3, [pc, #464]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	4b70      	ldr	r3, [pc, #448]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	4a6f      	ldr	r2, [pc, #444]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a64:	6313      	str	r3, [r2, #48]	; 0x30
 8005a66:	4b6d      	ldr	r3, [pc, #436]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a72:	2300      	movs	r3, #0
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	4b69      	ldr	r3, [pc, #420]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	4a68      	ldr	r2, [pc, #416]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	6313      	str	r3, [r2, #48]	; 0x30
 8005a82:	4b66      	ldr	r3, [pc, #408]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	4b62      	ldr	r3, [pc, #392]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	4a61      	ldr	r2, [pc, #388]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005a98:	f043 0302 	orr.w	r3, r3, #2
 8005a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a9e:	4b5f      	ldr	r3, [pc, #380]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	4b5b      	ldr	r3, [pc, #364]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	4a5a      	ldr	r2, [pc, #360]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005ab4:	f043 0308 	orr.w	r3, r3, #8
 8005ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8005aba:	4b58      	ldr	r3, [pc, #352]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	607b      	str	r3, [r7, #4]
 8005aca:	4b54      	ldr	r3, [pc, #336]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	4a53      	ldr	r2, [pc, #332]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ad6:	4b51      	ldr	r3, [pc, #324]	; (8005c1c <MX_GPIO_Init+0x1f8>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	607b      	str	r3, [r7, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8005ae8:	484d      	ldr	r0, [pc, #308]	; (8005c20 <MX_GPIO_Init+0x1fc>)
 8005aea:	f7fb f8a1 	bl	8000c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005aee:	2200      	movs	r2, #0
 8005af0:	2140      	movs	r1, #64	; 0x40
 8005af2:	484c      	ldr	r0, [pc, #304]	; (8005c24 <MX_GPIO_Init+0x200>)
 8005af4:	f7fb f89c 	bl	8000c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8005af8:	2200      	movs	r2, #0
 8005afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005afe:	484a      	ldr	r0, [pc, #296]	; (8005c28 <MX_GPIO_Init+0x204>)
 8005b00:	f7fb f896 	bl	8000c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005b0a:	4b48      	ldr	r3, [pc, #288]	; (8005c2c <MX_GPIO_Init+0x208>)
 8005b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005b12:	f107 031c 	add.w	r3, r7, #28
 8005b16:	4619      	mov	r1, r3
 8005b18:	4843      	ldr	r0, [pc, #268]	; (8005c28 <MX_GPIO_Init+0x204>)
 8005b1a:	f7fa fedf 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005b1e:	2332      	movs	r3, #50	; 0x32
 8005b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b22:	2302      	movs	r3, #2
 8005b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b2e:	230b      	movs	r3, #11
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b32:	f107 031c 	add.w	r3, r7, #28
 8005b36:	4619      	mov	r1, r3
 8005b38:	483b      	ldr	r0, [pc, #236]	; (8005c28 <MX_GPIO_Init+0x204>)
 8005b3a:	f7fa fecf 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005b3e:	2386      	movs	r3, #134	; 0x86
 8005b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b42:	2302      	movs	r3, #2
 8005b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b4e:	230b      	movs	r3, #11
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b52:	f107 031c 	add.w	r3, r7, #28
 8005b56:	4619      	mov	r1, r3
 8005b58:	4835      	ldr	r0, [pc, #212]	; (8005c30 <MX_GPIO_Init+0x20c>)
 8005b5a:	f7fa febf 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b64:	2302      	movs	r3, #2
 8005b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005b70:	230b      	movs	r3, #11
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005b74:	f107 031c 	add.w	r3, r7, #28
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4829      	ldr	r0, [pc, #164]	; (8005c20 <MX_GPIO_Init+0x1fc>)
 8005b7c:	f7fa feae 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8005b80:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8005b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b86:	2301      	movs	r3, #1
 8005b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b92:	f107 031c 	add.w	r3, r7, #28
 8005b96:	4619      	mov	r1, r3
 8005b98:	4821      	ldr	r0, [pc, #132]	; (8005c20 <MX_GPIO_Init+0x1fc>)
 8005b9a:	f7fa fe9f 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005b9e:	2340      	movs	r3, #64	; 0x40
 8005ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005baa:	2300      	movs	r3, #0
 8005bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005bae:	f107 031c 	add.w	r3, r7, #28
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	481b      	ldr	r0, [pc, #108]	; (8005c24 <MX_GPIO_Init+0x200>)
 8005bb6:	f7fa fe91 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8005bc6:	f107 031c 	add.w	r3, r7, #28
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4815      	ldr	r0, [pc, #84]	; (8005c24 <MX_GPIO_Init+0x200>)
 8005bce:	f7fa fe85 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8005bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005be0:	2300      	movs	r3, #0
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8005be4:	f107 031c 	add.w	r3, r7, #28
 8005be8:	4619      	mov	r1, r3
 8005bea:	480f      	ldr	r0, [pc, #60]	; (8005c28 <MX_GPIO_Init+0x204>)
 8005bec:	f7fa fe76 	bl	80008dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005bf0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005c02:	230b      	movs	r3, #11
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005c06:	f107 031c 	add.w	r3, r7, #28
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4805      	ldr	r0, [pc, #20]	; (8005c24 <MX_GPIO_Init+0x200>)
 8005c0e:	f7fa fe65 	bl	80008dc <HAL_GPIO_Init>

}
 8005c12:	bf00      	nop
 8005c14:	3730      	adds	r7, #48	; 0x30
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	40020400 	.word	0x40020400
 8005c24:	40021800 	.word	0x40021800
 8005c28:	40020800 	.word	0x40020800
 8005c2c:	10110000 	.word	0x10110000
 8005c30:	40020000 	.word	0x40020000

08005c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005c38:	bf00      	nop
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	607b      	str	r3, [r7, #4]
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <HAL_MspInit+0x4c>)
 8005c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c52:	4a0f      	ldr	r2, [pc, #60]	; (8005c90 <HAL_MspInit+0x4c>)
 8005c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c58:	6453      	str	r3, [r2, #68]	; 0x44
 8005c5a:	4b0d      	ldr	r3, [pc, #52]	; (8005c90 <HAL_MspInit+0x4c>)
 8005c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c62:	607b      	str	r3, [r7, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c66:	2300      	movs	r3, #0
 8005c68:	603b      	str	r3, [r7, #0]
 8005c6a:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <HAL_MspInit+0x4c>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	4a08      	ldr	r2, [pc, #32]	; (8005c90 <HAL_MspInit+0x4c>)
 8005c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c74:	6413      	str	r3, [r2, #64]	; 0x40
 8005c76:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <HAL_MspInit+0x4c>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c82:	bf00      	nop
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40023800 	.word	0x40023800

08005c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08a      	sub	sp, #40	; 0x28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c9c:	f107 0314 	add.w	r3, r7, #20
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	609a      	str	r2, [r3, #8]
 8005ca8:	60da      	str	r2, [r3, #12]
 8005caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <HAL_UART_MspInit+0x84>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d12c      	bne.n	8005d10 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	4b18      	ldr	r3, [pc, #96]	; (8005d1c <HAL_UART_MspInit+0x88>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	4a17      	ldr	r2, [pc, #92]	; (8005d1c <HAL_UART_MspInit+0x88>)
 8005cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cc6:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <HAL_UART_MspInit+0x88>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cce:	613b      	str	r3, [r7, #16]
 8005cd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <HAL_UART_MspInit+0x88>)
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	4a10      	ldr	r2, [pc, #64]	; (8005d1c <HAL_UART_MspInit+0x88>)
 8005cdc:	f043 0308 	orr.w	r3, r3, #8
 8005ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <HAL_UART_MspInit+0x88>)
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	f003 0308 	and.w	r3, r3, #8
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005cee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005d00:	2307      	movs	r3, #7
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d04:	f107 0314 	add.w	r3, r7, #20
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4805      	ldr	r0, [pc, #20]	; (8005d20 <HAL_UART_MspInit+0x8c>)
 8005d0c:	f7fa fde6 	bl	80008dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005d10:	bf00      	nop
 8005d12:	3728      	adds	r7, #40	; 0x28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40004800 	.word	0x40004800
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	40020c00 	.word	0x40020c00

08005d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d32:	b480      	push	{r7}
 8005d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d36:	e7fe      	b.n	8005d36 <HardFault_Handler+0x4>

08005d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d3c:	e7fe      	b.n	8005d3c <MemManage_Handler+0x4>

08005d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d42:	e7fe      	b.n	8005d42 <BusFault_Handler+0x4>

08005d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d48:	e7fe      	b.n	8005d48 <UsageFault_Handler+0x4>

08005d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d4e:	bf00      	nop
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d5c:	bf00      	nop
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d78:	f7fa fc5c 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d7c:	bf00      	nop
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005d84:	4802      	ldr	r0, [pc, #8]	; (8005d90 <OTG_FS_IRQHandler+0x10>)
 8005d86:	f7fb f8bc 	bl	8000f02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005d8a:	bf00      	nop
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20001510 	.word	0x20001510

08005d94 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005d9c:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <_sbrk+0x50>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <_sbrk+0x16>
		heap_end = &end;
 8005da4:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <_sbrk+0x50>)
 8005da6:	4a10      	ldr	r2, [pc, #64]	; (8005de8 <_sbrk+0x54>)
 8005da8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005daa:	4b0e      	ldr	r3, [pc, #56]	; (8005de4 <_sbrk+0x50>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005db0:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <_sbrk+0x50>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4413      	add	r3, r2
 8005db8:	466a      	mov	r2, sp
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d907      	bls.n	8005dce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005dbe:	f000 fd75 	bl	80068ac <__errno>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	230c      	movs	r3, #12
 8005dc6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005dcc:	e006      	b.n	8005ddc <_sbrk+0x48>
	}

	heap_end += incr;
 8005dce:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <_sbrk+0x50>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	4a03      	ldr	r2, [pc, #12]	; (8005de4 <_sbrk+0x50>)
 8005dd8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005dda:	68fb      	ldr	r3, [r7, #12]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20000200 	.word	0x20000200
 8005de8:	20001b20 	.word	0x20001b20

08005dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005df0:	4b16      	ldr	r3, [pc, #88]	; (8005e4c <SystemInit+0x60>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	4a15      	ldr	r2, [pc, #84]	; (8005e4c <SystemInit+0x60>)
 8005df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005e00:	4b13      	ldr	r3, [pc, #76]	; (8005e50 <SystemInit+0x64>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a12      	ldr	r2, [pc, #72]	; (8005e50 <SystemInit+0x64>)
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005e0c:	4b10      	ldr	r3, [pc, #64]	; (8005e50 <SystemInit+0x64>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005e12:	4b0f      	ldr	r3, [pc, #60]	; (8005e50 <SystemInit+0x64>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a0e      	ldr	r2, [pc, #56]	; (8005e50 <SystemInit+0x64>)
 8005e18:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005e22:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <SystemInit+0x64>)
 8005e24:	4a0b      	ldr	r2, [pc, #44]	; (8005e54 <SystemInit+0x68>)
 8005e26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005e28:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <SystemInit+0x64>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <SystemInit+0x64>)
 8005e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005e34:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <SystemInit+0x64>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e3a:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <SystemInit+0x60>)
 8005e3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e40:	609a      	str	r2, [r3, #8]
#endif
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	e000ed00 	.word	0xe000ed00
 8005e50:	40023800 	.word	0x40023800
 8005e54:	24003010 	.word	0x24003010

08005e58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	4912      	ldr	r1, [pc, #72]	; (8005ea8 <MX_USB_DEVICE_Init+0x50>)
 8005e60:	4812      	ldr	r0, [pc, #72]	; (8005eac <MX_USB_DEVICE_Init+0x54>)
 8005e62:	f7fe fcc3 	bl	80047ec <USBD_Init>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005e6c:	f7ff fee2 	bl	8005c34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005e70:	490f      	ldr	r1, [pc, #60]	; (8005eb0 <MX_USB_DEVICE_Init+0x58>)
 8005e72:	480e      	ldr	r0, [pc, #56]	; (8005eac <MX_USB_DEVICE_Init+0x54>)
 8005e74:	f7fe fce5 	bl	8004842 <USBD_RegisterClass>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005e7e:	f7ff fed9 	bl	8005c34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005e82:	490c      	ldr	r1, [pc, #48]	; (8005eb4 <MX_USB_DEVICE_Init+0x5c>)
 8005e84:	4809      	ldr	r0, [pc, #36]	; (8005eac <MX_USB_DEVICE_Init+0x54>)
 8005e86:	f7fe fc13 	bl	80046b0 <USBD_CDC_RegisterInterface>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005e90:	f7ff fed0 	bl	8005c34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005e94:	4805      	ldr	r0, [pc, #20]	; (8005eac <MX_USB_DEVICE_Init+0x54>)
 8005e96:	f7fe fcee 	bl	8004876 <USBD_Start>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005ea0:	f7ff fec8 	bl	8005c34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005ea4:	bf00      	nop
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	2000012c 	.word	0x2000012c
 8005eac:	20000274 	.word	0x20000274
 8005eb0:	20000014 	.word	0x20000014
 8005eb4:	2000011c 	.word	0x2000011c

08005eb8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4905      	ldr	r1, [pc, #20]	; (8005ed4 <CDC_Init_FS+0x1c>)
 8005ec0:	4805      	ldr	r0, [pc, #20]	; (8005ed8 <CDC_Init_FS+0x20>)
 8005ec2:	f7fe fc0c 	bl	80046de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005ec6:	4905      	ldr	r1, [pc, #20]	; (8005edc <CDC_Init_FS+0x24>)
 8005ec8:	4803      	ldr	r0, [pc, #12]	; (8005ed8 <CDC_Init_FS+0x20>)
 8005eca:	f7fe fc22 	bl	8004712 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005ece:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20000d10 	.word	0x20000d10
 8005ed8:	20000274 	.word	0x20000274
 8005edc:	20000510 	.word	0x20000510

08005ee0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005ee4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	6039      	str	r1, [r7, #0]
 8005efa:	71fb      	strb	r3, [r7, #7]
 8005efc:	4613      	mov	r3, r2
 8005efe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	2b23      	cmp	r3, #35	; 0x23
 8005f04:	d84a      	bhi.n	8005f9c <CDC_Control_FS+0xac>
 8005f06:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <CDC_Control_FS+0x1c>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f9d 	.word	0x08005f9d
 8005f10:	08005f9d 	.word	0x08005f9d
 8005f14:	08005f9d 	.word	0x08005f9d
 8005f18:	08005f9d 	.word	0x08005f9d
 8005f1c:	08005f9d 	.word	0x08005f9d
 8005f20:	08005f9d 	.word	0x08005f9d
 8005f24:	08005f9d 	.word	0x08005f9d
 8005f28:	08005f9d 	.word	0x08005f9d
 8005f2c:	08005f9d 	.word	0x08005f9d
 8005f30:	08005f9d 	.word	0x08005f9d
 8005f34:	08005f9d 	.word	0x08005f9d
 8005f38:	08005f9d 	.word	0x08005f9d
 8005f3c:	08005f9d 	.word	0x08005f9d
 8005f40:	08005f9d 	.word	0x08005f9d
 8005f44:	08005f9d 	.word	0x08005f9d
 8005f48:	08005f9d 	.word	0x08005f9d
 8005f4c:	08005f9d 	.word	0x08005f9d
 8005f50:	08005f9d 	.word	0x08005f9d
 8005f54:	08005f9d 	.word	0x08005f9d
 8005f58:	08005f9d 	.word	0x08005f9d
 8005f5c:	08005f9d 	.word	0x08005f9d
 8005f60:	08005f9d 	.word	0x08005f9d
 8005f64:	08005f9d 	.word	0x08005f9d
 8005f68:	08005f9d 	.word	0x08005f9d
 8005f6c:	08005f9d 	.word	0x08005f9d
 8005f70:	08005f9d 	.word	0x08005f9d
 8005f74:	08005f9d 	.word	0x08005f9d
 8005f78:	08005f9d 	.word	0x08005f9d
 8005f7c:	08005f9d 	.word	0x08005f9d
 8005f80:	08005f9d 	.word	0x08005f9d
 8005f84:	08005f9d 	.word	0x08005f9d
 8005f88:	08005f9d 	.word	0x08005f9d
 8005f8c:	08005f9d 	.word	0x08005f9d
 8005f90:	08005f9d 	.word	0x08005f9d
 8005f94:	08005f9d 	.word	0x08005f9d
 8005f98:	08005f9d 	.word	0x08005f9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005f9c:	bf00      	nop
  }

  return (USBD_OK);
 8005f9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	4805      	ldr	r0, [pc, #20]	; (8005fd0 <CDC_Receive_FS+0x24>)
 8005fba:	f7fe fbaa 	bl	8004712 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005fbe:	4804      	ldr	r0, [pc, #16]	; (8005fd0 <CDC_Receive_FS+0x24>)
 8005fc0:	f7fe fbea 	bl	8004798 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005fc4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000274 	.word	0x20000274

08005fd4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005fe4:	4b0d      	ldr	r3, [pc, #52]	; (800601c <CDC_Transmit_FS+0x48>)
 8005fe6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8005fea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e00b      	b.n	8006012 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005ffa:	887b      	ldrh	r3, [r7, #2]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4806      	ldr	r0, [pc, #24]	; (800601c <CDC_Transmit_FS+0x48>)
 8006002:	f7fe fb6c 	bl	80046de <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006006:	4805      	ldr	r0, [pc, #20]	; (800601c <CDC_Transmit_FS+0x48>)
 8006008:	f7fe fb97 	bl	800473a <USBD_CDC_TransmitPacket>
 800600c:	4603      	mov	r3, r0
 800600e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000274 	.word	0x20000274

08006020 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	; 0x28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006028:	f107 0314 	add.w	r3, r7, #20
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	605a      	str	r2, [r3, #4]
 8006032:	609a      	str	r2, [r3, #8]
 8006034:	60da      	str	r2, [r3, #12]
 8006036:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006040:	d147      	bne.n	80060d2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006042:	2300      	movs	r3, #0
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	4b25      	ldr	r3, [pc, #148]	; (80060dc <HAL_PCD_MspInit+0xbc>)
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	4a24      	ldr	r2, [pc, #144]	; (80060dc <HAL_PCD_MspInit+0xbc>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	6313      	str	r3, [r2, #48]	; 0x30
 8006052:	4b22      	ldr	r3, [pc, #136]	; (80060dc <HAL_PCD_MspInit+0xbc>)
 8006054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800605e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8006062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006064:	2302      	movs	r3, #2
 8006066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006068:	2300      	movs	r3, #0
 800606a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800606c:	2303      	movs	r3, #3
 800606e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006070:	230a      	movs	r3, #10
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006074:	f107 0314 	add.w	r3, r7, #20
 8006078:	4619      	mov	r1, r3
 800607a:	4819      	ldr	r0, [pc, #100]	; (80060e0 <HAL_PCD_MspInit+0xc0>)
 800607c:	f7fa fc2e 	bl	80008dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006086:	2300      	movs	r3, #0
 8006088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800608e:	f107 0314 	add.w	r3, r7, #20
 8006092:	4619      	mov	r1, r3
 8006094:	4812      	ldr	r0, [pc, #72]	; (80060e0 <HAL_PCD_MspInit+0xc0>)
 8006096:	f7fa fc21 	bl	80008dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800609a:	4b10      	ldr	r3, [pc, #64]	; (80060dc <HAL_PCD_MspInit+0xbc>)
 800609c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609e:	4a0f      	ldr	r2, [pc, #60]	; (80060dc <HAL_PCD_MspInit+0xbc>)
 80060a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a4:	6353      	str	r3, [r2, #52]	; 0x34
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <HAL_PCD_MspInit+0xbc>)
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	4a0b      	ldr	r2, [pc, #44]	; (80060dc <HAL_PCD_MspInit+0xbc>)
 80060b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060b4:	6453      	str	r3, [r2, #68]	; 0x44
 80060b6:	4b09      	ldr	r3, [pc, #36]	; (80060dc <HAL_PCD_MspInit+0xbc>)
 80060b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80060c2:	2200      	movs	r2, #0
 80060c4:	2100      	movs	r1, #0
 80060c6:	2043      	movs	r0, #67	; 0x43
 80060c8:	f7fa fbd1 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80060cc:	2043      	movs	r0, #67	; 0x43
 80060ce:	f7fa fbea 	bl	80008a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80060d2:	bf00      	nop
 80060d4:	3728      	adds	r7, #40	; 0x28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40023800 	.word	0x40023800
 80060e0:	40020000 	.word	0x40020000

080060e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f7fe fc04 	bl	8004908 <USBD_LL_SetupStage>
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800611a:	78fa      	ldrb	r2, [r7, #3]
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	4619      	mov	r1, r3
 8006132:	f7fe fc34 	bl	800499e <USBD_LL_DataOutStage>
}
 8006136:	bf00      	nop
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b082      	sub	sp, #8
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006150:	78fa      	ldrb	r2, [r7, #3]
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	1a9b      	subs	r3, r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	3348      	adds	r3, #72	; 0x48
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	4619      	mov	r1, r3
 8006166:	f7fe fc8b 	bl	8004a80 <USBD_LL_DataInStage>
}
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006180:	4618      	mov	r0, r3
 8006182:	f7fe fd99 	bl	8004cb8 <USBD_LL_SOF>
}
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006196:	2301      	movs	r3, #1
 8006198:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d102      	bne.n	80061a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]
 80061a6:	e008      	b.n	80061ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d102      	bne.n	80061b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
 80061b4:	e001      	b.n	80061ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80061b6:	f7ff fd3d 	bl	8005c34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061c0:	7bfa      	ldrb	r2, [r7, #15]
 80061c2:	4611      	mov	r1, r2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fe fd41 	bl	8004c4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe fcfa 	bl	8004bca <USBD_LL_Reset>
}
 80061d6:	bf00      	nop
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fd3c 	bl	8004c6c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006214:	4b04      	ldr	r3, [pc, #16]	; (8006228 <HAL_PCD_SuspendCallback+0x48>)
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	4a03      	ldr	r2, [pc, #12]	; (8006228 <HAL_PCD_SuspendCallback+0x48>)
 800621a:	f043 0306 	orr.w	r3, r3, #6
 800621e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	e000ed00 	.word	0xe000ed00

0800622c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fd2b 	bl	8004c96 <USBD_LL_Resume>
}
 8006240:	bf00      	nop
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800625a:	78fa      	ldrb	r2, [r7, #3]
 800625c:	4611      	mov	r1, r2
 800625e:	4618      	mov	r0, r3
 8006260:	f7fe fd51 	bl	8004d06 <USBD_LL_IsoOUTIncomplete>
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800627e:	78fa      	ldrb	r2, [r7, #3]
 8006280:	4611      	mov	r1, r2
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe fd32 	bl	8004cec <USBD_LL_IsoINIncomplete>
}
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe fd3e 	bl	8004d20 <USBD_LL_DevConnected>
}
 80062a4:	bf00      	nop
 80062a6:	3708      	adds	r7, #8
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fd3b 	bl	8004d36 <USBD_LL_DevDisconnected>
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d13c      	bne.n	8006352 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80062d8:	4a20      	ldr	r2, [pc, #128]	; (800635c <USBD_LL_Init+0x94>)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a1e      	ldr	r2, [pc, #120]	; (800635c <USBD_LL_Init+0x94>)
 80062e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80062e8:	4b1c      	ldr	r3, [pc, #112]	; (800635c <USBD_LL_Init+0x94>)
 80062ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80062ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80062f0:	4b1a      	ldr	r3, [pc, #104]	; (800635c <USBD_LL_Init+0x94>)
 80062f2:	2204      	movs	r2, #4
 80062f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80062f6:	4b19      	ldr	r3, [pc, #100]	; (800635c <USBD_LL_Init+0x94>)
 80062f8:	2202      	movs	r2, #2
 80062fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80062fc:	4b17      	ldr	r3, [pc, #92]	; (800635c <USBD_LL_Init+0x94>)
 80062fe:	2200      	movs	r2, #0
 8006300:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006302:	4b16      	ldr	r3, [pc, #88]	; (800635c <USBD_LL_Init+0x94>)
 8006304:	2202      	movs	r2, #2
 8006306:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006308:	4b14      	ldr	r3, [pc, #80]	; (800635c <USBD_LL_Init+0x94>)
 800630a:	2201      	movs	r2, #1
 800630c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <USBD_LL_Init+0x94>)
 8006310:	2200      	movs	r2, #0
 8006312:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006314:	4b11      	ldr	r3, [pc, #68]	; (800635c <USBD_LL_Init+0x94>)
 8006316:	2200      	movs	r2, #0
 8006318:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800631a:	4b10      	ldr	r3, [pc, #64]	; (800635c <USBD_LL_Init+0x94>)
 800631c:	2201      	movs	r2, #1
 800631e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006320:	4b0e      	ldr	r3, [pc, #56]	; (800635c <USBD_LL_Init+0x94>)
 8006322:	2200      	movs	r2, #0
 8006324:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006326:	480d      	ldr	r0, [pc, #52]	; (800635c <USBD_LL_Init+0x94>)
 8006328:	f7fa fc9b 	bl	8000c62 <HAL_PCD_Init>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006332:	f7ff fc7f 	bl	8005c34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006336:	2180      	movs	r1, #128	; 0x80
 8006338:	4808      	ldr	r0, [pc, #32]	; (800635c <USBD_LL_Init+0x94>)
 800633a:	f7fb fe00 	bl	8001f3e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800633e:	2240      	movs	r2, #64	; 0x40
 8006340:	2100      	movs	r1, #0
 8006342:	4806      	ldr	r0, [pc, #24]	; (800635c <USBD_LL_Init+0x94>)
 8006344:	f7fb fdb4 	bl	8001eb0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006348:	2280      	movs	r2, #128	; 0x80
 800634a:	2101      	movs	r1, #1
 800634c:	4803      	ldr	r0, [pc, #12]	; (800635c <USBD_LL_Init+0x94>)
 800634e:	f7fb fdaf 	bl	8001eb0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20001510 	.word	0x20001510

08006360 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006376:	4618      	mov	r0, r3
 8006378:	f7fa fd90 	bl	8000e9c <HAL_PCD_Start>
 800637c:	4603      	mov	r3, r0
 800637e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 f92e 	bl	80065e4 <USBD_Get_USB_Status>
 8006388:	4603      	mov	r3, r0
 800638a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800638c:	7bbb      	ldrb	r3, [r7, #14]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	4608      	mov	r0, r1
 80063a0:	4611      	mov	r1, r2
 80063a2:	461a      	mov	r2, r3
 80063a4:	4603      	mov	r3, r0
 80063a6:	70fb      	strb	r3, [r7, #3]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70bb      	strb	r3, [r7, #2]
 80063ac:	4613      	mov	r3, r2
 80063ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80063be:	78bb      	ldrb	r3, [r7, #2]
 80063c0:	883a      	ldrh	r2, [r7, #0]
 80063c2:	78f9      	ldrb	r1, [r7, #3]
 80063c4:	f7fb f965 	bl	8001692 <HAL_PCD_EP_Open>
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 f908 	bl	80065e4 <USBD_Get_USB_Status>
 80063d4:	4603      	mov	r3, r0
 80063d6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80063fc:	78fa      	ldrb	r2, [r7, #3]
 80063fe:	4611      	mov	r1, r2
 8006400:	4618      	mov	r0, r3
 8006402:	f7fb f9ae 	bl	8001762 <HAL_PCD_EP_Close>
 8006406:	4603      	mov	r3, r0
 8006408:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 f8e9 	bl	80065e4 <USBD_Get_USB_Status>
 8006412:	4603      	mov	r3, r0
 8006414:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006416:	7bbb      	ldrb	r3, [r7, #14]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800643a:	78fa      	ldrb	r2, [r7, #3]
 800643c:	4611      	mov	r1, r2
 800643e:	4618      	mov	r0, r3
 8006440:	f7fb fa86 	bl	8001950 <HAL_PCD_EP_SetStall>
 8006444:	4603      	mov	r3, r0
 8006446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f8ca 	bl	80065e4 <USBD_Get_USB_Status>
 8006450:	4603      	mov	r3, r0
 8006452:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006454:	7bbb      	ldrb	r3, [r7, #14]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006478:	78fa      	ldrb	r2, [r7, #3]
 800647a:	4611      	mov	r1, r2
 800647c:	4618      	mov	r0, r3
 800647e:	f7fb facb 	bl	8001a18 <HAL_PCD_EP_ClrStall>
 8006482:	4603      	mov	r3, r0
 8006484:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8006486:	7bfb      	ldrb	r3, [r7, #15]
 8006488:	4618      	mov	r0, r3
 800648a:	f000 f8ab 	bl	80065e4 <USBD_Get_USB_Status>
 800648e:	4603      	mov	r3, r0
 8006490:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8006492:	7bbb      	ldrb	r3, [r7, #14]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80064ae:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80064b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	da0b      	bge.n	80064d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064be:	68f9      	ldr	r1, [r7, #12]
 80064c0:	4613      	mov	r3, r2
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	333e      	adds	r3, #62	; 0x3e
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	e00b      	b.n	80064e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d6:	68f9      	ldr	r1, [r7, #12]
 80064d8:	4613      	mov	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	1a9b      	subs	r3, r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	440b      	add	r3, r1
 80064e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800650e:	78fa      	ldrb	r2, [r7, #3]
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f7fb f898 	bl	8001648 <HAL_PCD_SetAddress>
 8006518:	4603      	mov	r3, r0
 800651a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f860 	bl	80065e4 <USBD_Get_USB_Status>
 8006524:	4603      	mov	r3, r0
 8006526:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006528:	7bbb      	ldrb	r3, [r7, #14]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b086      	sub	sp, #24
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	461a      	mov	r2, r3
 800653e:	460b      	mov	r3, r1
 8006540:	72fb      	strb	r3, [r7, #11]
 8006542:	4613      	mov	r3, r2
 8006544:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8006554:	893b      	ldrh	r3, [r7, #8]
 8006556:	7af9      	ldrb	r1, [r7, #11]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	f7fb f9af 	bl	80018bc <HAL_PCD_EP_Transmit>
 800655e:	4603      	mov	r3, r0
 8006560:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8006562:	7dfb      	ldrb	r3, [r7, #23]
 8006564:	4618      	mov	r0, r3
 8006566:	f000 f83d 	bl	80065e4 <USBD_Get_USB_Status>
 800656a:	4603      	mov	r3, r0
 800656c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800656e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	607a      	str	r2, [r7, #4]
 8006582:	461a      	mov	r2, r3
 8006584:	460b      	mov	r3, r1
 8006586:	72fb      	strb	r3, [r7, #11]
 8006588:	4613      	mov	r3, r2
 800658a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800659a:	893b      	ldrh	r3, [r7, #8]
 800659c:	7af9      	ldrb	r1, [r7, #11]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	f7fb f929 	bl	80017f6 <HAL_PCD_EP_Receive>
 80065a4:	4603      	mov	r3, r0
 80065a6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 f81a 	bl	80065e4 <USBD_Get_USB_Status>
 80065b0:	4603      	mov	r3, r0
 80065b2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80065b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	460b      	mov	r3, r1
 80065c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	4611      	mov	r1, r2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fb f959 	bl	800188c <HAL_PCD_EP_GetRxCount>
 80065da:	4603      	mov	r3, r0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80065f2:	79fb      	ldrb	r3, [r7, #7]
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d817      	bhi.n	8006628 <USBD_Get_USB_Status+0x44>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <USBD_Get_USB_Status+0x1c>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006611 	.word	0x08006611
 8006604:	08006617 	.word	0x08006617
 8006608:	0800661d 	.word	0x0800661d
 800660c:	08006623 	.word	0x08006623
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	73fb      	strb	r3, [r7, #15]
    break;
 8006614:	e00b      	b.n	800662e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006616:	2302      	movs	r3, #2
 8006618:	73fb      	strb	r3, [r7, #15]
    break;
 800661a:	e008      	b.n	800662e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
    break;
 8006620:	e005      	b.n	800662e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006622:	2302      	movs	r3, #2
 8006624:	73fb      	strb	r3, [r7, #15]
    break;
 8006626:	e002      	b.n	800662e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006628:	2302      	movs	r3, #2
 800662a:	73fb      	strb	r3, [r7, #15]
    break;
 800662c:	bf00      	nop
  }
  return usb_status;
 800662e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	4603      	mov	r3, r0
 8006644:	6039      	str	r1, [r7, #0]
 8006646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2212      	movs	r2, #18
 800664c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800664e:	4b03      	ldr	r3, [pc, #12]	; (800665c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	20000148 	.word	0x20000148

08006660 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	6039      	str	r1, [r7, #0]
 800666a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2204      	movs	r2, #4
 8006670:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006672:	4b03      	ldr	r3, [pc, #12]	; (8006680 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006674:	4618      	mov	r0, r3
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	2000015c 	.word	0x2000015c

08006684 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	6039      	str	r1, [r7, #0]
 800668e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d105      	bne.n	80066a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	4907      	ldr	r1, [pc, #28]	; (80066b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800669a:	4808      	ldr	r0, [pc, #32]	; (80066bc <USBD_FS_ProductStrDescriptor+0x38>)
 800669c:	f7ff f822 	bl	80056e4 <USBD_GetString>
 80066a0:	e004      	b.n	80066ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	4904      	ldr	r1, [pc, #16]	; (80066b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80066a6:	4805      	ldr	r0, [pc, #20]	; (80066bc <USBD_FS_ProductStrDescriptor+0x38>)
 80066a8:	f7ff f81c 	bl	80056e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066ac:	4b02      	ldr	r3, [pc, #8]	; (80066b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20001918 	.word	0x20001918
 80066bc:	08007168 	.word	0x08007168

080066c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	6039      	str	r1, [r7, #0]
 80066ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	4904      	ldr	r1, [pc, #16]	; (80066e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80066d0:	4804      	ldr	r0, [pc, #16]	; (80066e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80066d2:	f7ff f807 	bl	80056e4 <USBD_GetString>
  return USBD_StrDesc;
 80066d6:	4b02      	ldr	r3, [pc, #8]	; (80066e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	20001918 	.word	0x20001918
 80066e4:	08007180 	.word	0x08007180

080066e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	4603      	mov	r3, r0
 80066f0:	6039      	str	r1, [r7, #0]
 80066f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	221a      	movs	r2, #26
 80066f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80066fa:	f000 f843 	bl	8006784 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 80066fe:	4b02      	ldr	r3, [pc, #8]	; (8006708 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	20000160 	.word	0x20000160

0800670c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	6039      	str	r1, [r7, #0]
 8006716:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d105      	bne.n	800672a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	4907      	ldr	r1, [pc, #28]	; (8006740 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006722:	4808      	ldr	r0, [pc, #32]	; (8006744 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006724:	f7fe ffde 	bl	80056e4 <USBD_GetString>
 8006728:	e004      	b.n	8006734 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	4904      	ldr	r1, [pc, #16]	; (8006740 <USBD_FS_ConfigStrDescriptor+0x34>)
 800672e:	4805      	ldr	r0, [pc, #20]	; (8006744 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006730:	f7fe ffd8 	bl	80056e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006734:	4b02      	ldr	r3, [pc, #8]	; (8006740 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20001918 	.word	0x20001918
 8006744:	08007194 	.word	0x08007194

08006748 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	6039      	str	r1, [r7, #0]
 8006752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006754:	79fb      	ldrb	r3, [r7, #7]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d105      	bne.n	8006766 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	4907      	ldr	r1, [pc, #28]	; (800677c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800675e:	4808      	ldr	r0, [pc, #32]	; (8006780 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006760:	f7fe ffc0 	bl	80056e4 <USBD_GetString>
 8006764:	e004      	b.n	8006770 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	4904      	ldr	r1, [pc, #16]	; (800677c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800676a:	4805      	ldr	r0, [pc, #20]	; (8006780 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800676c:	f7fe ffba 	bl	80056e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006770:	4b02      	ldr	r3, [pc, #8]	; (800677c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	20001918 	.word	0x20001918
 8006780:	080071a0 	.word	0x080071a0

08006784 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800678a:	4b0f      	ldr	r3, [pc, #60]	; (80067c8 <Get_SerialNum+0x44>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006790:	4b0e      	ldr	r3, [pc, #56]	; (80067cc <Get_SerialNum+0x48>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006796:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <Get_SerialNum+0x4c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4413      	add	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d009      	beq.n	80067be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067aa:	2208      	movs	r2, #8
 80067ac:	4909      	ldr	r1, [pc, #36]	; (80067d4 <Get_SerialNum+0x50>)
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 f814 	bl	80067dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067b4:	2204      	movs	r2, #4
 80067b6:	4908      	ldr	r1, [pc, #32]	; (80067d8 <Get_SerialNum+0x54>)
 80067b8:	68b8      	ldr	r0, [r7, #8]
 80067ba:	f000 f80f 	bl	80067dc <IntToUnicode>
  }
}
 80067be:	bf00      	nop
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	1fff7a10 	.word	0x1fff7a10
 80067cc:	1fff7a14 	.word	0x1fff7a14
 80067d0:	1fff7a18 	.word	0x1fff7a18
 80067d4:	20000162 	.word	0x20000162
 80067d8:	20000172 	.word	0x20000172

080067dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	4613      	mov	r3, r2
 80067e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
 80067f2:	e027      	b.n	8006844 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	0f1b      	lsrs	r3, r3, #28
 80067f8:	2b09      	cmp	r3, #9
 80067fa:	d80b      	bhi.n	8006814 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	0f1b      	lsrs	r3, r3, #28
 8006800:	b2da      	uxtb	r2, r3
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	4619      	mov	r1, r3
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	440b      	add	r3, r1
 800680c:	3230      	adds	r2, #48	; 0x30
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	e00a      	b.n	800682a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	0f1b      	lsrs	r3, r3, #28
 8006818:	b2da      	uxtb	r2, r3
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	4619      	mov	r1, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	440b      	add	r3, r1
 8006824:	3237      	adds	r2, #55	; 0x37
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	3301      	adds	r3, #1
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	4413      	add	r3, r2
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800683e:	7dfb      	ldrb	r3, [r7, #23]
 8006840:	3301      	adds	r3, #1
 8006842:	75fb      	strb	r3, [r7, #23]
 8006844:	7dfa      	ldrb	r2, [r7, #23]
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	429a      	cmp	r2, r3
 800684a:	d3d3      	bcc.n	80067f4 <IntToUnicode+0x18>
  }
}
 800684c:	bf00      	nop
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8006858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006890 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800685c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800685e:	e003      	b.n	8006868 <LoopCopyDataInit>

08006860 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006860:	4b0c      	ldr	r3, [pc, #48]	; (8006894 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006862:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006864:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006866:	3104      	adds	r1, #4

08006868 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006868:	480b      	ldr	r0, [pc, #44]	; (8006898 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800686a:	4b0c      	ldr	r3, [pc, #48]	; (800689c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800686c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800686e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006870:	d3f6      	bcc.n	8006860 <CopyDataInit>
  ldr  r2, =_sbss
 8006872:	4a0b      	ldr	r2, [pc, #44]	; (80068a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006874:	e002      	b.n	800687c <LoopFillZerobss>

08006876 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006876:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006878:	f842 3b04 	str.w	r3, [r2], #4

0800687c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800687c:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800687e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006880:	d3f9      	bcc.n	8006876 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006882:	f7ff fab3 	bl	8005dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006886:	f000 f817 	bl	80068b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800688a:	f7ff f809 	bl	80058a0 <main>
  bx  lr    
 800688e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006890:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8006894:	0800720c 	.word	0x0800720c
  ldr  r0, =_sdata
 8006898:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800689c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80068a0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80068a4:	20001b1c 	.word	0x20001b1c

080068a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068a8:	e7fe      	b.n	80068a8 <ADC_IRQHandler>
	...

080068ac <__errno>:
 80068ac:	4b01      	ldr	r3, [pc, #4]	; (80068b4 <__errno+0x8>)
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	2000017c 	.word	0x2000017c

080068b8 <__libc_init_array>:
 80068b8:	b570      	push	{r4, r5, r6, lr}
 80068ba:	4e0d      	ldr	r6, [pc, #52]	; (80068f0 <__libc_init_array+0x38>)
 80068bc:	4c0d      	ldr	r4, [pc, #52]	; (80068f4 <__libc_init_array+0x3c>)
 80068be:	1ba4      	subs	r4, r4, r6
 80068c0:	10a4      	asrs	r4, r4, #2
 80068c2:	2500      	movs	r5, #0
 80068c4:	42a5      	cmp	r5, r4
 80068c6:	d109      	bne.n	80068dc <__libc_init_array+0x24>
 80068c8:	4e0b      	ldr	r6, [pc, #44]	; (80068f8 <__libc_init_array+0x40>)
 80068ca:	4c0c      	ldr	r4, [pc, #48]	; (80068fc <__libc_init_array+0x44>)
 80068cc:	f000 fc36 	bl	800713c <_init>
 80068d0:	1ba4      	subs	r4, r4, r6
 80068d2:	10a4      	asrs	r4, r4, #2
 80068d4:	2500      	movs	r5, #0
 80068d6:	42a5      	cmp	r5, r4
 80068d8:	d105      	bne.n	80068e6 <__libc_init_array+0x2e>
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068e0:	4798      	blx	r3
 80068e2:	3501      	adds	r5, #1
 80068e4:	e7ee      	b.n	80068c4 <__libc_init_array+0xc>
 80068e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068ea:	4798      	blx	r3
 80068ec:	3501      	adds	r5, #1
 80068ee:	e7f2      	b.n	80068d6 <__libc_init_array+0x1e>
 80068f0:	08007204 	.word	0x08007204
 80068f4:	08007204 	.word	0x08007204
 80068f8:	08007204 	.word	0x08007204
 80068fc:	08007208 	.word	0x08007208

08006900 <malloc>:
 8006900:	4b02      	ldr	r3, [pc, #8]	; (800690c <malloc+0xc>)
 8006902:	4601      	mov	r1, r0
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f000 b861 	b.w	80069cc <_malloc_r>
 800690a:	bf00      	nop
 800690c:	2000017c 	.word	0x2000017c

08006910 <free>:
 8006910:	4b02      	ldr	r3, [pc, #8]	; (800691c <free+0xc>)
 8006912:	4601      	mov	r1, r0
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	f000 b80b 	b.w	8006930 <_free_r>
 800691a:	bf00      	nop
 800691c:	2000017c 	.word	0x2000017c

08006920 <memset>:
 8006920:	4402      	add	r2, r0
 8006922:	4603      	mov	r3, r0
 8006924:	4293      	cmp	r3, r2
 8006926:	d100      	bne.n	800692a <memset+0xa>
 8006928:	4770      	bx	lr
 800692a:	f803 1b01 	strb.w	r1, [r3], #1
 800692e:	e7f9      	b.n	8006924 <memset+0x4>

08006930 <_free_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4605      	mov	r5, r0
 8006934:	2900      	cmp	r1, #0
 8006936:	d045      	beq.n	80069c4 <_free_r+0x94>
 8006938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800693c:	1f0c      	subs	r4, r1, #4
 800693e:	2b00      	cmp	r3, #0
 8006940:	bfb8      	it	lt
 8006942:	18e4      	addlt	r4, r4, r3
 8006944:	f000 f8cc 	bl	8006ae0 <__malloc_lock>
 8006948:	4a1f      	ldr	r2, [pc, #124]	; (80069c8 <_free_r+0x98>)
 800694a:	6813      	ldr	r3, [r2, #0]
 800694c:	4610      	mov	r0, r2
 800694e:	b933      	cbnz	r3, 800695e <_free_r+0x2e>
 8006950:	6063      	str	r3, [r4, #4]
 8006952:	6014      	str	r4, [r2, #0]
 8006954:	4628      	mov	r0, r5
 8006956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800695a:	f000 b8c2 	b.w	8006ae2 <__malloc_unlock>
 800695e:	42a3      	cmp	r3, r4
 8006960:	d90c      	bls.n	800697c <_free_r+0x4c>
 8006962:	6821      	ldr	r1, [r4, #0]
 8006964:	1862      	adds	r2, r4, r1
 8006966:	4293      	cmp	r3, r2
 8006968:	bf04      	itt	eq
 800696a:	681a      	ldreq	r2, [r3, #0]
 800696c:	685b      	ldreq	r3, [r3, #4]
 800696e:	6063      	str	r3, [r4, #4]
 8006970:	bf04      	itt	eq
 8006972:	1852      	addeq	r2, r2, r1
 8006974:	6022      	streq	r2, [r4, #0]
 8006976:	6004      	str	r4, [r0, #0]
 8006978:	e7ec      	b.n	8006954 <_free_r+0x24>
 800697a:	4613      	mov	r3, r2
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	b10a      	cbz	r2, 8006984 <_free_r+0x54>
 8006980:	42a2      	cmp	r2, r4
 8006982:	d9fa      	bls.n	800697a <_free_r+0x4a>
 8006984:	6819      	ldr	r1, [r3, #0]
 8006986:	1858      	adds	r0, r3, r1
 8006988:	42a0      	cmp	r0, r4
 800698a:	d10b      	bne.n	80069a4 <_free_r+0x74>
 800698c:	6820      	ldr	r0, [r4, #0]
 800698e:	4401      	add	r1, r0
 8006990:	1858      	adds	r0, r3, r1
 8006992:	4282      	cmp	r2, r0
 8006994:	6019      	str	r1, [r3, #0]
 8006996:	d1dd      	bne.n	8006954 <_free_r+0x24>
 8006998:	6810      	ldr	r0, [r2, #0]
 800699a:	6852      	ldr	r2, [r2, #4]
 800699c:	605a      	str	r2, [r3, #4]
 800699e:	4401      	add	r1, r0
 80069a0:	6019      	str	r1, [r3, #0]
 80069a2:	e7d7      	b.n	8006954 <_free_r+0x24>
 80069a4:	d902      	bls.n	80069ac <_free_r+0x7c>
 80069a6:	230c      	movs	r3, #12
 80069a8:	602b      	str	r3, [r5, #0]
 80069aa:	e7d3      	b.n	8006954 <_free_r+0x24>
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	1821      	adds	r1, r4, r0
 80069b0:	428a      	cmp	r2, r1
 80069b2:	bf04      	itt	eq
 80069b4:	6811      	ldreq	r1, [r2, #0]
 80069b6:	6852      	ldreq	r2, [r2, #4]
 80069b8:	6062      	str	r2, [r4, #4]
 80069ba:	bf04      	itt	eq
 80069bc:	1809      	addeq	r1, r1, r0
 80069be:	6021      	streq	r1, [r4, #0]
 80069c0:	605c      	str	r4, [r3, #4]
 80069c2:	e7c7      	b.n	8006954 <_free_r+0x24>
 80069c4:	bd38      	pop	{r3, r4, r5, pc}
 80069c6:	bf00      	nop
 80069c8:	20000204 	.word	0x20000204

080069cc <_malloc_r>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	1ccd      	adds	r5, r1, #3
 80069d0:	f025 0503 	bic.w	r5, r5, #3
 80069d4:	3508      	adds	r5, #8
 80069d6:	2d0c      	cmp	r5, #12
 80069d8:	bf38      	it	cc
 80069da:	250c      	movcc	r5, #12
 80069dc:	2d00      	cmp	r5, #0
 80069de:	4606      	mov	r6, r0
 80069e0:	db01      	blt.n	80069e6 <_malloc_r+0x1a>
 80069e2:	42a9      	cmp	r1, r5
 80069e4:	d903      	bls.n	80069ee <_malloc_r+0x22>
 80069e6:	230c      	movs	r3, #12
 80069e8:	6033      	str	r3, [r6, #0]
 80069ea:	2000      	movs	r0, #0
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
 80069ee:	f000 f877 	bl	8006ae0 <__malloc_lock>
 80069f2:	4a21      	ldr	r2, [pc, #132]	; (8006a78 <_malloc_r+0xac>)
 80069f4:	6814      	ldr	r4, [r2, #0]
 80069f6:	4621      	mov	r1, r4
 80069f8:	b991      	cbnz	r1, 8006a20 <_malloc_r+0x54>
 80069fa:	4c20      	ldr	r4, [pc, #128]	; (8006a7c <_malloc_r+0xb0>)
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	b91b      	cbnz	r3, 8006a08 <_malloc_r+0x3c>
 8006a00:	4630      	mov	r0, r6
 8006a02:	f000 f83d 	bl	8006a80 <_sbrk_r>
 8006a06:	6020      	str	r0, [r4, #0]
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f000 f838 	bl	8006a80 <_sbrk_r>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d124      	bne.n	8006a5e <_malloc_r+0x92>
 8006a14:	230c      	movs	r3, #12
 8006a16:	6033      	str	r3, [r6, #0]
 8006a18:	4630      	mov	r0, r6
 8006a1a:	f000 f862 	bl	8006ae2 <__malloc_unlock>
 8006a1e:	e7e4      	b.n	80069ea <_malloc_r+0x1e>
 8006a20:	680b      	ldr	r3, [r1, #0]
 8006a22:	1b5b      	subs	r3, r3, r5
 8006a24:	d418      	bmi.n	8006a58 <_malloc_r+0x8c>
 8006a26:	2b0b      	cmp	r3, #11
 8006a28:	d90f      	bls.n	8006a4a <_malloc_r+0x7e>
 8006a2a:	600b      	str	r3, [r1, #0]
 8006a2c:	50cd      	str	r5, [r1, r3]
 8006a2e:	18cc      	adds	r4, r1, r3
 8006a30:	4630      	mov	r0, r6
 8006a32:	f000 f856 	bl	8006ae2 <__malloc_unlock>
 8006a36:	f104 000b 	add.w	r0, r4, #11
 8006a3a:	1d23      	adds	r3, r4, #4
 8006a3c:	f020 0007 	bic.w	r0, r0, #7
 8006a40:	1ac3      	subs	r3, r0, r3
 8006a42:	d0d3      	beq.n	80069ec <_malloc_r+0x20>
 8006a44:	425a      	negs	r2, r3
 8006a46:	50e2      	str	r2, [r4, r3]
 8006a48:	e7d0      	b.n	80069ec <_malloc_r+0x20>
 8006a4a:	428c      	cmp	r4, r1
 8006a4c:	684b      	ldr	r3, [r1, #4]
 8006a4e:	bf16      	itet	ne
 8006a50:	6063      	strne	r3, [r4, #4]
 8006a52:	6013      	streq	r3, [r2, #0]
 8006a54:	460c      	movne	r4, r1
 8006a56:	e7eb      	b.n	8006a30 <_malloc_r+0x64>
 8006a58:	460c      	mov	r4, r1
 8006a5a:	6849      	ldr	r1, [r1, #4]
 8006a5c:	e7cc      	b.n	80069f8 <_malloc_r+0x2c>
 8006a5e:	1cc4      	adds	r4, r0, #3
 8006a60:	f024 0403 	bic.w	r4, r4, #3
 8006a64:	42a0      	cmp	r0, r4
 8006a66:	d005      	beq.n	8006a74 <_malloc_r+0xa8>
 8006a68:	1a21      	subs	r1, r4, r0
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	f000 f808 	bl	8006a80 <_sbrk_r>
 8006a70:	3001      	adds	r0, #1
 8006a72:	d0cf      	beq.n	8006a14 <_malloc_r+0x48>
 8006a74:	6025      	str	r5, [r4, #0]
 8006a76:	e7db      	b.n	8006a30 <_malloc_r+0x64>
 8006a78:	20000204 	.word	0x20000204
 8006a7c:	20000208 	.word	0x20000208

08006a80 <_sbrk_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4c06      	ldr	r4, [pc, #24]	; (8006a9c <_sbrk_r+0x1c>)
 8006a84:	2300      	movs	r3, #0
 8006a86:	4605      	mov	r5, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	6023      	str	r3, [r4, #0]
 8006a8c:	f7ff f982 	bl	8005d94 <_sbrk>
 8006a90:	1c43      	adds	r3, r0, #1
 8006a92:	d102      	bne.n	8006a9a <_sbrk_r+0x1a>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	b103      	cbz	r3, 8006a9a <_sbrk_r+0x1a>
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	bd38      	pop	{r3, r4, r5, pc}
 8006a9c:	20001b18 	.word	0x20001b18

08006aa0 <siprintf>:
 8006aa0:	b40e      	push	{r1, r2, r3}
 8006aa2:	b500      	push	{lr}
 8006aa4:	b09c      	sub	sp, #112	; 0x70
 8006aa6:	ab1d      	add	r3, sp, #116	; 0x74
 8006aa8:	9002      	str	r0, [sp, #8]
 8006aaa:	9006      	str	r0, [sp, #24]
 8006aac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ab0:	4809      	ldr	r0, [pc, #36]	; (8006ad8 <siprintf+0x38>)
 8006ab2:	9107      	str	r1, [sp, #28]
 8006ab4:	9104      	str	r1, [sp, #16]
 8006ab6:	4909      	ldr	r1, [pc, #36]	; (8006adc <siprintf+0x3c>)
 8006ab8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006abc:	9105      	str	r1, [sp, #20]
 8006abe:	6800      	ldr	r0, [r0, #0]
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	a902      	add	r1, sp, #8
 8006ac4:	f000 f868 	bl	8006b98 <_svfiprintf_r>
 8006ac8:	9b02      	ldr	r3, [sp, #8]
 8006aca:	2200      	movs	r2, #0
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	b01c      	add	sp, #112	; 0x70
 8006ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ad4:	b003      	add	sp, #12
 8006ad6:	4770      	bx	lr
 8006ad8:	2000017c 	.word	0x2000017c
 8006adc:	ffff0208 	.word	0xffff0208

08006ae0 <__malloc_lock>:
 8006ae0:	4770      	bx	lr

08006ae2 <__malloc_unlock>:
 8006ae2:	4770      	bx	lr

08006ae4 <__ssputs_r>:
 8006ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae8:	688e      	ldr	r6, [r1, #8]
 8006aea:	429e      	cmp	r6, r3
 8006aec:	4682      	mov	sl, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	4690      	mov	r8, r2
 8006af2:	4699      	mov	r9, r3
 8006af4:	d837      	bhi.n	8006b66 <__ssputs_r+0x82>
 8006af6:	898a      	ldrh	r2, [r1, #12]
 8006af8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006afc:	d031      	beq.n	8006b62 <__ssputs_r+0x7e>
 8006afe:	6825      	ldr	r5, [r4, #0]
 8006b00:	6909      	ldr	r1, [r1, #16]
 8006b02:	1a6f      	subs	r7, r5, r1
 8006b04:	6965      	ldr	r5, [r4, #20]
 8006b06:	2302      	movs	r3, #2
 8006b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b10:	f109 0301 	add.w	r3, r9, #1
 8006b14:	443b      	add	r3, r7
 8006b16:	429d      	cmp	r5, r3
 8006b18:	bf38      	it	cc
 8006b1a:	461d      	movcc	r5, r3
 8006b1c:	0553      	lsls	r3, r2, #21
 8006b1e:	d530      	bpl.n	8006b82 <__ssputs_r+0x9e>
 8006b20:	4629      	mov	r1, r5
 8006b22:	f7ff ff53 	bl	80069cc <_malloc_r>
 8006b26:	4606      	mov	r6, r0
 8006b28:	b950      	cbnz	r0, 8006b40 <__ssputs_r+0x5c>
 8006b2a:	230c      	movs	r3, #12
 8006b2c:	f8ca 3000 	str.w	r3, [sl]
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b40:	463a      	mov	r2, r7
 8006b42:	6921      	ldr	r1, [r4, #16]
 8006b44:	f000 faa8 	bl	8007098 <memcpy>
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b52:	81a3      	strh	r3, [r4, #12]
 8006b54:	6126      	str	r6, [r4, #16]
 8006b56:	6165      	str	r5, [r4, #20]
 8006b58:	443e      	add	r6, r7
 8006b5a:	1bed      	subs	r5, r5, r7
 8006b5c:	6026      	str	r6, [r4, #0]
 8006b5e:	60a5      	str	r5, [r4, #8]
 8006b60:	464e      	mov	r6, r9
 8006b62:	454e      	cmp	r6, r9
 8006b64:	d900      	bls.n	8006b68 <__ssputs_r+0x84>
 8006b66:	464e      	mov	r6, r9
 8006b68:	4632      	mov	r2, r6
 8006b6a:	4641      	mov	r1, r8
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	f000 fa9e 	bl	80070ae <memmove>
 8006b72:	68a3      	ldr	r3, [r4, #8]
 8006b74:	1b9b      	subs	r3, r3, r6
 8006b76:	60a3      	str	r3, [r4, #8]
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	441e      	add	r6, r3
 8006b7c:	6026      	str	r6, [r4, #0]
 8006b7e:	2000      	movs	r0, #0
 8006b80:	e7dc      	b.n	8006b3c <__ssputs_r+0x58>
 8006b82:	462a      	mov	r2, r5
 8006b84:	f000 faac 	bl	80070e0 <_realloc_r>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d1e2      	bne.n	8006b54 <__ssputs_r+0x70>
 8006b8e:	6921      	ldr	r1, [r4, #16]
 8006b90:	4650      	mov	r0, sl
 8006b92:	f7ff fecd 	bl	8006930 <_free_r>
 8006b96:	e7c8      	b.n	8006b2a <__ssputs_r+0x46>

08006b98 <_svfiprintf_r>:
 8006b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	461d      	mov	r5, r3
 8006b9e:	898b      	ldrh	r3, [r1, #12]
 8006ba0:	061f      	lsls	r7, r3, #24
 8006ba2:	b09d      	sub	sp, #116	; 0x74
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	4616      	mov	r6, r2
 8006baa:	d50f      	bpl.n	8006bcc <_svfiprintf_r+0x34>
 8006bac:	690b      	ldr	r3, [r1, #16]
 8006bae:	b96b      	cbnz	r3, 8006bcc <_svfiprintf_r+0x34>
 8006bb0:	2140      	movs	r1, #64	; 0x40
 8006bb2:	f7ff ff0b 	bl	80069cc <_malloc_r>
 8006bb6:	6020      	str	r0, [r4, #0]
 8006bb8:	6120      	str	r0, [r4, #16]
 8006bba:	b928      	cbnz	r0, 8006bc8 <_svfiprintf_r+0x30>
 8006bbc:	230c      	movs	r3, #12
 8006bbe:	f8c8 3000 	str.w	r3, [r8]
 8006bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc6:	e0c8      	b.n	8006d5a <_svfiprintf_r+0x1c2>
 8006bc8:	2340      	movs	r3, #64	; 0x40
 8006bca:	6163      	str	r3, [r4, #20]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd0:	2320      	movs	r3, #32
 8006bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bd6:	2330      	movs	r3, #48	; 0x30
 8006bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bdc:	9503      	str	r5, [sp, #12]
 8006bde:	f04f 0b01 	mov.w	fp, #1
 8006be2:	4637      	mov	r7, r6
 8006be4:	463d      	mov	r5, r7
 8006be6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006bea:	b10b      	cbz	r3, 8006bf0 <_svfiprintf_r+0x58>
 8006bec:	2b25      	cmp	r3, #37	; 0x25
 8006bee:	d13e      	bne.n	8006c6e <_svfiprintf_r+0xd6>
 8006bf0:	ebb7 0a06 	subs.w	sl, r7, r6
 8006bf4:	d00b      	beq.n	8006c0e <_svfiprintf_r+0x76>
 8006bf6:	4653      	mov	r3, sl
 8006bf8:	4632      	mov	r2, r6
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4640      	mov	r0, r8
 8006bfe:	f7ff ff71 	bl	8006ae4 <__ssputs_r>
 8006c02:	3001      	adds	r0, #1
 8006c04:	f000 80a4 	beq.w	8006d50 <_svfiprintf_r+0x1b8>
 8006c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c0a:	4453      	add	r3, sl
 8006c0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c0e:	783b      	ldrb	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 809d 	beq.w	8006d50 <_svfiprintf_r+0x1b8>
 8006c16:	2300      	movs	r3, #0
 8006c18:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c20:	9304      	str	r3, [sp, #16]
 8006c22:	9307      	str	r3, [sp, #28]
 8006c24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c28:	931a      	str	r3, [sp, #104]	; 0x68
 8006c2a:	462f      	mov	r7, r5
 8006c2c:	2205      	movs	r2, #5
 8006c2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006c32:	4850      	ldr	r0, [pc, #320]	; (8006d74 <_svfiprintf_r+0x1dc>)
 8006c34:	f7f9 fadc 	bl	80001f0 <memchr>
 8006c38:	9b04      	ldr	r3, [sp, #16]
 8006c3a:	b9d0      	cbnz	r0, 8006c72 <_svfiprintf_r+0xda>
 8006c3c:	06d9      	lsls	r1, r3, #27
 8006c3e:	bf44      	itt	mi
 8006c40:	2220      	movmi	r2, #32
 8006c42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c46:	071a      	lsls	r2, r3, #28
 8006c48:	bf44      	itt	mi
 8006c4a:	222b      	movmi	r2, #43	; 0x2b
 8006c4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c50:	782a      	ldrb	r2, [r5, #0]
 8006c52:	2a2a      	cmp	r2, #42	; 0x2a
 8006c54:	d015      	beq.n	8006c82 <_svfiprintf_r+0xea>
 8006c56:	9a07      	ldr	r2, [sp, #28]
 8006c58:	462f      	mov	r7, r5
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	250a      	movs	r5, #10
 8006c5e:	4639      	mov	r1, r7
 8006c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c64:	3b30      	subs	r3, #48	; 0x30
 8006c66:	2b09      	cmp	r3, #9
 8006c68:	d94d      	bls.n	8006d06 <_svfiprintf_r+0x16e>
 8006c6a:	b1b8      	cbz	r0, 8006c9c <_svfiprintf_r+0x104>
 8006c6c:	e00f      	b.n	8006c8e <_svfiprintf_r+0xf6>
 8006c6e:	462f      	mov	r7, r5
 8006c70:	e7b8      	b.n	8006be4 <_svfiprintf_r+0x4c>
 8006c72:	4a40      	ldr	r2, [pc, #256]	; (8006d74 <_svfiprintf_r+0x1dc>)
 8006c74:	1a80      	subs	r0, r0, r2
 8006c76:	fa0b f000 	lsl.w	r0, fp, r0
 8006c7a:	4318      	orrs	r0, r3
 8006c7c:	9004      	str	r0, [sp, #16]
 8006c7e:	463d      	mov	r5, r7
 8006c80:	e7d3      	b.n	8006c2a <_svfiprintf_r+0x92>
 8006c82:	9a03      	ldr	r2, [sp, #12]
 8006c84:	1d11      	adds	r1, r2, #4
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	9103      	str	r1, [sp, #12]
 8006c8a:	2a00      	cmp	r2, #0
 8006c8c:	db01      	blt.n	8006c92 <_svfiprintf_r+0xfa>
 8006c8e:	9207      	str	r2, [sp, #28]
 8006c90:	e004      	b.n	8006c9c <_svfiprintf_r+0x104>
 8006c92:	4252      	negs	r2, r2
 8006c94:	f043 0302 	orr.w	r3, r3, #2
 8006c98:	9207      	str	r2, [sp, #28]
 8006c9a:	9304      	str	r3, [sp, #16]
 8006c9c:	783b      	ldrb	r3, [r7, #0]
 8006c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8006ca0:	d10c      	bne.n	8006cbc <_svfiprintf_r+0x124>
 8006ca2:	787b      	ldrb	r3, [r7, #1]
 8006ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ca6:	d133      	bne.n	8006d10 <_svfiprintf_r+0x178>
 8006ca8:	9b03      	ldr	r3, [sp, #12]
 8006caa:	1d1a      	adds	r2, r3, #4
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	9203      	str	r2, [sp, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	bfb8      	it	lt
 8006cb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cb8:	3702      	adds	r7, #2
 8006cba:	9305      	str	r3, [sp, #20]
 8006cbc:	4d2e      	ldr	r5, [pc, #184]	; (8006d78 <_svfiprintf_r+0x1e0>)
 8006cbe:	7839      	ldrb	r1, [r7, #0]
 8006cc0:	2203      	movs	r2, #3
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f7f9 fa94 	bl	80001f0 <memchr>
 8006cc8:	b138      	cbz	r0, 8006cda <_svfiprintf_r+0x142>
 8006cca:	2340      	movs	r3, #64	; 0x40
 8006ccc:	1b40      	subs	r0, r0, r5
 8006cce:	fa03 f000 	lsl.w	r0, r3, r0
 8006cd2:	9b04      	ldr	r3, [sp, #16]
 8006cd4:	4303      	orrs	r3, r0
 8006cd6:	3701      	adds	r7, #1
 8006cd8:	9304      	str	r3, [sp, #16]
 8006cda:	7839      	ldrb	r1, [r7, #0]
 8006cdc:	4827      	ldr	r0, [pc, #156]	; (8006d7c <_svfiprintf_r+0x1e4>)
 8006cde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ce2:	2206      	movs	r2, #6
 8006ce4:	1c7e      	adds	r6, r7, #1
 8006ce6:	f7f9 fa83 	bl	80001f0 <memchr>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d038      	beq.n	8006d60 <_svfiprintf_r+0x1c8>
 8006cee:	4b24      	ldr	r3, [pc, #144]	; (8006d80 <_svfiprintf_r+0x1e8>)
 8006cf0:	bb13      	cbnz	r3, 8006d38 <_svfiprintf_r+0x1a0>
 8006cf2:	9b03      	ldr	r3, [sp, #12]
 8006cf4:	3307      	adds	r3, #7
 8006cf6:	f023 0307 	bic.w	r3, r3, #7
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	9303      	str	r3, [sp, #12]
 8006cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d00:	444b      	add	r3, r9
 8006d02:	9309      	str	r3, [sp, #36]	; 0x24
 8006d04:	e76d      	b.n	8006be2 <_svfiprintf_r+0x4a>
 8006d06:	fb05 3202 	mla	r2, r5, r2, r3
 8006d0a:	2001      	movs	r0, #1
 8006d0c:	460f      	mov	r7, r1
 8006d0e:	e7a6      	b.n	8006c5e <_svfiprintf_r+0xc6>
 8006d10:	2300      	movs	r3, #0
 8006d12:	3701      	adds	r7, #1
 8006d14:	9305      	str	r3, [sp, #20]
 8006d16:	4619      	mov	r1, r3
 8006d18:	250a      	movs	r5, #10
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d20:	3a30      	subs	r2, #48	; 0x30
 8006d22:	2a09      	cmp	r2, #9
 8006d24:	d903      	bls.n	8006d2e <_svfiprintf_r+0x196>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0c8      	beq.n	8006cbc <_svfiprintf_r+0x124>
 8006d2a:	9105      	str	r1, [sp, #20]
 8006d2c:	e7c6      	b.n	8006cbc <_svfiprintf_r+0x124>
 8006d2e:	fb05 2101 	mla	r1, r5, r1, r2
 8006d32:	2301      	movs	r3, #1
 8006d34:	4607      	mov	r7, r0
 8006d36:	e7f0      	b.n	8006d1a <_svfiprintf_r+0x182>
 8006d38:	ab03      	add	r3, sp, #12
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	4b11      	ldr	r3, [pc, #68]	; (8006d84 <_svfiprintf_r+0x1ec>)
 8006d40:	a904      	add	r1, sp, #16
 8006d42:	4640      	mov	r0, r8
 8006d44:	f3af 8000 	nop.w
 8006d48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d4c:	4681      	mov	r9, r0
 8006d4e:	d1d6      	bne.n	8006cfe <_svfiprintf_r+0x166>
 8006d50:	89a3      	ldrh	r3, [r4, #12]
 8006d52:	065b      	lsls	r3, r3, #25
 8006d54:	f53f af35 	bmi.w	8006bc2 <_svfiprintf_r+0x2a>
 8006d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d5a:	b01d      	add	sp, #116	; 0x74
 8006d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d60:	ab03      	add	r3, sp, #12
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	4622      	mov	r2, r4
 8006d66:	4b07      	ldr	r3, [pc, #28]	; (8006d84 <_svfiprintf_r+0x1ec>)
 8006d68:	a904      	add	r1, sp, #16
 8006d6a:	4640      	mov	r0, r8
 8006d6c:	f000 f882 	bl	8006e74 <_printf_i>
 8006d70:	e7ea      	b.n	8006d48 <_svfiprintf_r+0x1b0>
 8006d72:	bf00      	nop
 8006d74:	080071c8 	.word	0x080071c8
 8006d78:	080071ce 	.word	0x080071ce
 8006d7c:	080071d2 	.word	0x080071d2
 8006d80:	00000000 	.word	0x00000000
 8006d84:	08006ae5 	.word	0x08006ae5

08006d88 <_printf_common>:
 8006d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8c:	4691      	mov	r9, r2
 8006d8e:	461f      	mov	r7, r3
 8006d90:	688a      	ldr	r2, [r1, #8]
 8006d92:	690b      	ldr	r3, [r1, #16]
 8006d94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	bfb8      	it	lt
 8006d9c:	4613      	movlt	r3, r2
 8006d9e:	f8c9 3000 	str.w	r3, [r9]
 8006da2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006da6:	4606      	mov	r6, r0
 8006da8:	460c      	mov	r4, r1
 8006daa:	b112      	cbz	r2, 8006db2 <_printf_common+0x2a>
 8006dac:	3301      	adds	r3, #1
 8006dae:	f8c9 3000 	str.w	r3, [r9]
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	0699      	lsls	r1, r3, #26
 8006db6:	bf42      	ittt	mi
 8006db8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006dbc:	3302      	addmi	r3, #2
 8006dbe:	f8c9 3000 	strmi.w	r3, [r9]
 8006dc2:	6825      	ldr	r5, [r4, #0]
 8006dc4:	f015 0506 	ands.w	r5, r5, #6
 8006dc8:	d107      	bne.n	8006dda <_printf_common+0x52>
 8006dca:	f104 0a19 	add.w	sl, r4, #25
 8006dce:	68e3      	ldr	r3, [r4, #12]
 8006dd0:	f8d9 2000 	ldr.w	r2, [r9]
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	42ab      	cmp	r3, r5
 8006dd8:	dc28      	bgt.n	8006e2c <_printf_common+0xa4>
 8006dda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006dde:	6822      	ldr	r2, [r4, #0]
 8006de0:	3300      	adds	r3, #0
 8006de2:	bf18      	it	ne
 8006de4:	2301      	movne	r3, #1
 8006de6:	0692      	lsls	r2, r2, #26
 8006de8:	d42d      	bmi.n	8006e46 <_printf_common+0xbe>
 8006dea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dee:	4639      	mov	r1, r7
 8006df0:	4630      	mov	r0, r6
 8006df2:	47c0      	blx	r8
 8006df4:	3001      	adds	r0, #1
 8006df6:	d020      	beq.n	8006e3a <_printf_common+0xb2>
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	68e5      	ldr	r5, [r4, #12]
 8006dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8006e00:	f003 0306 	and.w	r3, r3, #6
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	bf08      	it	eq
 8006e08:	1aad      	subeq	r5, r5, r2
 8006e0a:	68a3      	ldr	r3, [r4, #8]
 8006e0c:	6922      	ldr	r2, [r4, #16]
 8006e0e:	bf0c      	ite	eq
 8006e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e14:	2500      	movne	r5, #0
 8006e16:	4293      	cmp	r3, r2
 8006e18:	bfc4      	itt	gt
 8006e1a:	1a9b      	subgt	r3, r3, r2
 8006e1c:	18ed      	addgt	r5, r5, r3
 8006e1e:	f04f 0900 	mov.w	r9, #0
 8006e22:	341a      	adds	r4, #26
 8006e24:	454d      	cmp	r5, r9
 8006e26:	d11a      	bne.n	8006e5e <_printf_common+0xd6>
 8006e28:	2000      	movs	r0, #0
 8006e2a:	e008      	b.n	8006e3e <_printf_common+0xb6>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	4652      	mov	r2, sl
 8006e30:	4639      	mov	r1, r7
 8006e32:	4630      	mov	r0, r6
 8006e34:	47c0      	blx	r8
 8006e36:	3001      	adds	r0, #1
 8006e38:	d103      	bne.n	8006e42 <_printf_common+0xba>
 8006e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e42:	3501      	adds	r5, #1
 8006e44:	e7c3      	b.n	8006dce <_printf_common+0x46>
 8006e46:	18e1      	adds	r1, r4, r3
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	2030      	movs	r0, #48	; 0x30
 8006e4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e50:	4422      	add	r2, r4
 8006e52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e5a:	3302      	adds	r3, #2
 8006e5c:	e7c5      	b.n	8006dea <_printf_common+0x62>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	4622      	mov	r2, r4
 8006e62:	4639      	mov	r1, r7
 8006e64:	4630      	mov	r0, r6
 8006e66:	47c0      	blx	r8
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d0e6      	beq.n	8006e3a <_printf_common+0xb2>
 8006e6c:	f109 0901 	add.w	r9, r9, #1
 8006e70:	e7d8      	b.n	8006e24 <_printf_common+0x9c>
	...

08006e74 <_printf_i>:
 8006e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	7e09      	ldrb	r1, [r1, #24]
 8006e80:	b085      	sub	sp, #20
 8006e82:	296e      	cmp	r1, #110	; 0x6e
 8006e84:	4617      	mov	r7, r2
 8006e86:	4606      	mov	r6, r0
 8006e88:	4698      	mov	r8, r3
 8006e8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e8c:	f000 80b3 	beq.w	8006ff6 <_printf_i+0x182>
 8006e90:	d822      	bhi.n	8006ed8 <_printf_i+0x64>
 8006e92:	2963      	cmp	r1, #99	; 0x63
 8006e94:	d036      	beq.n	8006f04 <_printf_i+0x90>
 8006e96:	d80a      	bhi.n	8006eae <_printf_i+0x3a>
 8006e98:	2900      	cmp	r1, #0
 8006e9a:	f000 80b9 	beq.w	8007010 <_printf_i+0x19c>
 8006e9e:	2958      	cmp	r1, #88	; 0x58
 8006ea0:	f000 8083 	beq.w	8006faa <_printf_i+0x136>
 8006ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ea8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006eac:	e032      	b.n	8006f14 <_printf_i+0xa0>
 8006eae:	2964      	cmp	r1, #100	; 0x64
 8006eb0:	d001      	beq.n	8006eb6 <_printf_i+0x42>
 8006eb2:	2969      	cmp	r1, #105	; 0x69
 8006eb4:	d1f6      	bne.n	8006ea4 <_printf_i+0x30>
 8006eb6:	6820      	ldr	r0, [r4, #0]
 8006eb8:	6813      	ldr	r3, [r2, #0]
 8006eba:	0605      	lsls	r5, r0, #24
 8006ebc:	f103 0104 	add.w	r1, r3, #4
 8006ec0:	d52a      	bpl.n	8006f18 <_printf_i+0xa4>
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6011      	str	r1, [r2, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	da03      	bge.n	8006ed2 <_printf_i+0x5e>
 8006eca:	222d      	movs	r2, #45	; 0x2d
 8006ecc:	425b      	negs	r3, r3
 8006ece:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006ed2:	486f      	ldr	r0, [pc, #444]	; (8007090 <_printf_i+0x21c>)
 8006ed4:	220a      	movs	r2, #10
 8006ed6:	e039      	b.n	8006f4c <_printf_i+0xd8>
 8006ed8:	2973      	cmp	r1, #115	; 0x73
 8006eda:	f000 809d 	beq.w	8007018 <_printf_i+0x1a4>
 8006ede:	d808      	bhi.n	8006ef2 <_printf_i+0x7e>
 8006ee0:	296f      	cmp	r1, #111	; 0x6f
 8006ee2:	d020      	beq.n	8006f26 <_printf_i+0xb2>
 8006ee4:	2970      	cmp	r1, #112	; 0x70
 8006ee6:	d1dd      	bne.n	8006ea4 <_printf_i+0x30>
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	f043 0320 	orr.w	r3, r3, #32
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	e003      	b.n	8006efa <_printf_i+0x86>
 8006ef2:	2975      	cmp	r1, #117	; 0x75
 8006ef4:	d017      	beq.n	8006f26 <_printf_i+0xb2>
 8006ef6:	2978      	cmp	r1, #120	; 0x78
 8006ef8:	d1d4      	bne.n	8006ea4 <_printf_i+0x30>
 8006efa:	2378      	movs	r3, #120	; 0x78
 8006efc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f00:	4864      	ldr	r0, [pc, #400]	; (8007094 <_printf_i+0x220>)
 8006f02:	e055      	b.n	8006fb0 <_printf_i+0x13c>
 8006f04:	6813      	ldr	r3, [r2, #0]
 8006f06:	1d19      	adds	r1, r3, #4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6011      	str	r1, [r2, #0]
 8006f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f14:	2301      	movs	r3, #1
 8006f16:	e08c      	b.n	8007032 <_printf_i+0x1be>
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6011      	str	r1, [r2, #0]
 8006f1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f20:	bf18      	it	ne
 8006f22:	b21b      	sxthne	r3, r3
 8006f24:	e7cf      	b.n	8006ec6 <_printf_i+0x52>
 8006f26:	6813      	ldr	r3, [r2, #0]
 8006f28:	6825      	ldr	r5, [r4, #0]
 8006f2a:	1d18      	adds	r0, r3, #4
 8006f2c:	6010      	str	r0, [r2, #0]
 8006f2e:	0628      	lsls	r0, r5, #24
 8006f30:	d501      	bpl.n	8006f36 <_printf_i+0xc2>
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	e002      	b.n	8006f3c <_printf_i+0xc8>
 8006f36:	0668      	lsls	r0, r5, #25
 8006f38:	d5fb      	bpl.n	8006f32 <_printf_i+0xbe>
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	4854      	ldr	r0, [pc, #336]	; (8007090 <_printf_i+0x21c>)
 8006f3e:	296f      	cmp	r1, #111	; 0x6f
 8006f40:	bf14      	ite	ne
 8006f42:	220a      	movne	r2, #10
 8006f44:	2208      	moveq	r2, #8
 8006f46:	2100      	movs	r1, #0
 8006f48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f4c:	6865      	ldr	r5, [r4, #4]
 8006f4e:	60a5      	str	r5, [r4, #8]
 8006f50:	2d00      	cmp	r5, #0
 8006f52:	f2c0 8095 	blt.w	8007080 <_printf_i+0x20c>
 8006f56:	6821      	ldr	r1, [r4, #0]
 8006f58:	f021 0104 	bic.w	r1, r1, #4
 8006f5c:	6021      	str	r1, [r4, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d13d      	bne.n	8006fde <_printf_i+0x16a>
 8006f62:	2d00      	cmp	r5, #0
 8006f64:	f040 808e 	bne.w	8007084 <_printf_i+0x210>
 8006f68:	4665      	mov	r5, ip
 8006f6a:	2a08      	cmp	r2, #8
 8006f6c:	d10b      	bne.n	8006f86 <_printf_i+0x112>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	07db      	lsls	r3, r3, #31
 8006f72:	d508      	bpl.n	8006f86 <_printf_i+0x112>
 8006f74:	6923      	ldr	r3, [r4, #16]
 8006f76:	6862      	ldr	r2, [r4, #4]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	bfde      	ittt	le
 8006f7c:	2330      	movle	r3, #48	; 0x30
 8006f7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f86:	ebac 0305 	sub.w	r3, ip, r5
 8006f8a:	6123      	str	r3, [r4, #16]
 8006f8c:	f8cd 8000 	str.w	r8, [sp]
 8006f90:	463b      	mov	r3, r7
 8006f92:	aa03      	add	r2, sp, #12
 8006f94:	4621      	mov	r1, r4
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7ff fef6 	bl	8006d88 <_printf_common>
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d14d      	bne.n	800703c <_printf_i+0x1c8>
 8006fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa4:	b005      	add	sp, #20
 8006fa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006faa:	4839      	ldr	r0, [pc, #228]	; (8007090 <_printf_i+0x21c>)
 8006fac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006fb0:	6813      	ldr	r3, [r2, #0]
 8006fb2:	6821      	ldr	r1, [r4, #0]
 8006fb4:	1d1d      	adds	r5, r3, #4
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6015      	str	r5, [r2, #0]
 8006fba:	060a      	lsls	r2, r1, #24
 8006fbc:	d50b      	bpl.n	8006fd6 <_printf_i+0x162>
 8006fbe:	07ca      	lsls	r2, r1, #31
 8006fc0:	bf44      	itt	mi
 8006fc2:	f041 0120 	orrmi.w	r1, r1, #32
 8006fc6:	6021      	strmi	r1, [r4, #0]
 8006fc8:	b91b      	cbnz	r3, 8006fd2 <_printf_i+0x15e>
 8006fca:	6822      	ldr	r2, [r4, #0]
 8006fcc:	f022 0220 	bic.w	r2, r2, #32
 8006fd0:	6022      	str	r2, [r4, #0]
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	e7b7      	b.n	8006f46 <_printf_i+0xd2>
 8006fd6:	064d      	lsls	r5, r1, #25
 8006fd8:	bf48      	it	mi
 8006fda:	b29b      	uxthmi	r3, r3
 8006fdc:	e7ef      	b.n	8006fbe <_printf_i+0x14a>
 8006fde:	4665      	mov	r5, ip
 8006fe0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fe4:	fb02 3311 	mls	r3, r2, r1, r3
 8006fe8:	5cc3      	ldrb	r3, [r0, r3]
 8006fea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006fee:	460b      	mov	r3, r1
 8006ff0:	2900      	cmp	r1, #0
 8006ff2:	d1f5      	bne.n	8006fe0 <_printf_i+0x16c>
 8006ff4:	e7b9      	b.n	8006f6a <_printf_i+0xf6>
 8006ff6:	6813      	ldr	r3, [r2, #0]
 8006ff8:	6825      	ldr	r5, [r4, #0]
 8006ffa:	6961      	ldr	r1, [r4, #20]
 8006ffc:	1d18      	adds	r0, r3, #4
 8006ffe:	6010      	str	r0, [r2, #0]
 8007000:	0628      	lsls	r0, r5, #24
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	d501      	bpl.n	800700a <_printf_i+0x196>
 8007006:	6019      	str	r1, [r3, #0]
 8007008:	e002      	b.n	8007010 <_printf_i+0x19c>
 800700a:	066a      	lsls	r2, r5, #25
 800700c:	d5fb      	bpl.n	8007006 <_printf_i+0x192>
 800700e:	8019      	strh	r1, [r3, #0]
 8007010:	2300      	movs	r3, #0
 8007012:	6123      	str	r3, [r4, #16]
 8007014:	4665      	mov	r5, ip
 8007016:	e7b9      	b.n	8006f8c <_printf_i+0x118>
 8007018:	6813      	ldr	r3, [r2, #0]
 800701a:	1d19      	adds	r1, r3, #4
 800701c:	6011      	str	r1, [r2, #0]
 800701e:	681d      	ldr	r5, [r3, #0]
 8007020:	6862      	ldr	r2, [r4, #4]
 8007022:	2100      	movs	r1, #0
 8007024:	4628      	mov	r0, r5
 8007026:	f7f9 f8e3 	bl	80001f0 <memchr>
 800702a:	b108      	cbz	r0, 8007030 <_printf_i+0x1bc>
 800702c:	1b40      	subs	r0, r0, r5
 800702e:	6060      	str	r0, [r4, #4]
 8007030:	6863      	ldr	r3, [r4, #4]
 8007032:	6123      	str	r3, [r4, #16]
 8007034:	2300      	movs	r3, #0
 8007036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800703a:	e7a7      	b.n	8006f8c <_printf_i+0x118>
 800703c:	6923      	ldr	r3, [r4, #16]
 800703e:	462a      	mov	r2, r5
 8007040:	4639      	mov	r1, r7
 8007042:	4630      	mov	r0, r6
 8007044:	47c0      	blx	r8
 8007046:	3001      	adds	r0, #1
 8007048:	d0aa      	beq.n	8006fa0 <_printf_i+0x12c>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	079b      	lsls	r3, r3, #30
 800704e:	d413      	bmi.n	8007078 <_printf_i+0x204>
 8007050:	68e0      	ldr	r0, [r4, #12]
 8007052:	9b03      	ldr	r3, [sp, #12]
 8007054:	4298      	cmp	r0, r3
 8007056:	bfb8      	it	lt
 8007058:	4618      	movlt	r0, r3
 800705a:	e7a3      	b.n	8006fa4 <_printf_i+0x130>
 800705c:	2301      	movs	r3, #1
 800705e:	464a      	mov	r2, r9
 8007060:	4639      	mov	r1, r7
 8007062:	4630      	mov	r0, r6
 8007064:	47c0      	blx	r8
 8007066:	3001      	adds	r0, #1
 8007068:	d09a      	beq.n	8006fa0 <_printf_i+0x12c>
 800706a:	3501      	adds	r5, #1
 800706c:	68e3      	ldr	r3, [r4, #12]
 800706e:	9a03      	ldr	r2, [sp, #12]
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	42ab      	cmp	r3, r5
 8007074:	dcf2      	bgt.n	800705c <_printf_i+0x1e8>
 8007076:	e7eb      	b.n	8007050 <_printf_i+0x1dc>
 8007078:	2500      	movs	r5, #0
 800707a:	f104 0919 	add.w	r9, r4, #25
 800707e:	e7f5      	b.n	800706c <_printf_i+0x1f8>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1ac      	bne.n	8006fde <_printf_i+0x16a>
 8007084:	7803      	ldrb	r3, [r0, #0]
 8007086:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800708a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800708e:	e76c      	b.n	8006f6a <_printf_i+0xf6>
 8007090:	080071d9 	.word	0x080071d9
 8007094:	080071ea 	.word	0x080071ea

08007098 <memcpy>:
 8007098:	b510      	push	{r4, lr}
 800709a:	1e43      	subs	r3, r0, #1
 800709c:	440a      	add	r2, r1
 800709e:	4291      	cmp	r1, r2
 80070a0:	d100      	bne.n	80070a4 <memcpy+0xc>
 80070a2:	bd10      	pop	{r4, pc}
 80070a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ac:	e7f7      	b.n	800709e <memcpy+0x6>

080070ae <memmove>:
 80070ae:	4288      	cmp	r0, r1
 80070b0:	b510      	push	{r4, lr}
 80070b2:	eb01 0302 	add.w	r3, r1, r2
 80070b6:	d807      	bhi.n	80070c8 <memmove+0x1a>
 80070b8:	1e42      	subs	r2, r0, #1
 80070ba:	4299      	cmp	r1, r3
 80070bc:	d00a      	beq.n	80070d4 <memmove+0x26>
 80070be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80070c6:	e7f8      	b.n	80070ba <memmove+0xc>
 80070c8:	4283      	cmp	r3, r0
 80070ca:	d9f5      	bls.n	80070b8 <memmove+0xa>
 80070cc:	1881      	adds	r1, r0, r2
 80070ce:	1ad2      	subs	r2, r2, r3
 80070d0:	42d3      	cmn	r3, r2
 80070d2:	d100      	bne.n	80070d6 <memmove+0x28>
 80070d4:	bd10      	pop	{r4, pc}
 80070d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80070de:	e7f7      	b.n	80070d0 <memmove+0x22>

080070e0 <_realloc_r>:
 80070e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e2:	4607      	mov	r7, r0
 80070e4:	4614      	mov	r4, r2
 80070e6:	460e      	mov	r6, r1
 80070e8:	b921      	cbnz	r1, 80070f4 <_realloc_r+0x14>
 80070ea:	4611      	mov	r1, r2
 80070ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070f0:	f7ff bc6c 	b.w	80069cc <_malloc_r>
 80070f4:	b922      	cbnz	r2, 8007100 <_realloc_r+0x20>
 80070f6:	f7ff fc1b 	bl	8006930 <_free_r>
 80070fa:	4625      	mov	r5, r4
 80070fc:	4628      	mov	r0, r5
 80070fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007100:	f000 f814 	bl	800712c <_malloc_usable_size_r>
 8007104:	42a0      	cmp	r0, r4
 8007106:	d20f      	bcs.n	8007128 <_realloc_r+0x48>
 8007108:	4621      	mov	r1, r4
 800710a:	4638      	mov	r0, r7
 800710c:	f7ff fc5e 	bl	80069cc <_malloc_r>
 8007110:	4605      	mov	r5, r0
 8007112:	2800      	cmp	r0, #0
 8007114:	d0f2      	beq.n	80070fc <_realloc_r+0x1c>
 8007116:	4631      	mov	r1, r6
 8007118:	4622      	mov	r2, r4
 800711a:	f7ff ffbd 	bl	8007098 <memcpy>
 800711e:	4631      	mov	r1, r6
 8007120:	4638      	mov	r0, r7
 8007122:	f7ff fc05 	bl	8006930 <_free_r>
 8007126:	e7e9      	b.n	80070fc <_realloc_r+0x1c>
 8007128:	4635      	mov	r5, r6
 800712a:	e7e7      	b.n	80070fc <_realloc_r+0x1c>

0800712c <_malloc_usable_size_r>:
 800712c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007130:	1f18      	subs	r0, r3, #4
 8007132:	2b00      	cmp	r3, #0
 8007134:	bfbc      	itt	lt
 8007136:	580b      	ldrlt	r3, [r1, r0]
 8007138:	18c0      	addlt	r0, r0, r3
 800713a:	4770      	bx	lr

0800713c <_init>:
 800713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713e:	bf00      	nop
 8007140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007142:	bc08      	pop	{r3}
 8007144:	469e      	mov	lr, r3
 8007146:	4770      	bx	lr

08007148 <_fini>:
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714a:	bf00      	nop
 800714c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800714e:	bc08      	pop	{r3}
 8007150:	469e      	mov	lr, r3
 8007152:	4770      	bx	lr
