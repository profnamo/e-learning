
10_usbcdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cbc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004e6c  08004e6c  00014e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f14  08004f14  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f1c  08004f1c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08004f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001938  200001e0  08005104  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b18  08005104  00021b18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001275d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c01  00000000  00000000  0003296d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  00035570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  00036258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025f23  00000000  00000000  00036de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d2e7  00000000  00000000  0005cd0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d487e  00000000  00000000  00069ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e870  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003710  00000000  00000000  0013e8ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004e54 	.word	0x08004e54

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08004e54 	.word	0x08004e54

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f92f 	bl	800081c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f003 fb38 	bl	8003c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f939 	bl	800086a <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 f90f 	bl	8000832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000118 	.word	0x20000118
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	20000208 	.word	0x20000208

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000208 	.word	0x20000208

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff ffee 	bl	800065c <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_Delay+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffde 	bl	800065c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8f7      	bhi.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000004 	.word	0x20000004

080006b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db0a      	blt.n	8000746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	490c      	ldr	r1, [pc, #48]	; (8000768 <__NVIC_SetPriority+0x4c>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	0112      	lsls	r2, r2, #4
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	440b      	add	r3, r1
 8000740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000744:	e00a      	b.n	800075c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4908      	ldr	r1, [pc, #32]	; (800076c <__NVIC_SetPriority+0x50>)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	3b04      	subs	r3, #4
 8000754:	0112      	lsls	r2, r2, #4
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	440b      	add	r3, r1
 800075a:	761a      	strb	r2, [r3, #24]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000e100 	.word	0xe000e100
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	; 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	2b04      	cmp	r3, #4
 800078c:	bf28      	it	cs
 800078e:	2304      	movcs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3304      	adds	r3, #4
 8000796:	2b06      	cmp	r3, #6
 8000798:	d902      	bls.n	80007a0 <NVIC_EncodePriority+0x30>
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3b03      	subs	r3, #3
 800079e:	e000      	b.n	80007a2 <NVIC_EncodePriority+0x32>
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43da      	mvns	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	401a      	ands	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	4313      	orrs	r3, r2
         );
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	; 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e8:	d301      	bcc.n	80007ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00f      	b.n	800080e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ee:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <SysTick_Config+0x40>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f6:	210f      	movs	r1, #15
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f7ff ff8e 	bl	800071c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <SysTick_Config+0x40>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <SysTick_Config+0x40>)
 8000808:	2207      	movs	r2, #7
 800080a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	e000e010 	.word	0xe000e010

0800081c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ff47 	bl	80006b8 <__NVIC_SetPriorityGrouping>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000832:	b580      	push	{r7, lr}
 8000834:	b086      	sub	sp, #24
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000844:	f7ff ff5c 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	6978      	ldr	r0, [r7, #20]
 8000850:	f7ff ff8e 	bl	8000770 <NVIC_EncodePriority>
 8000854:	4602      	mov	r2, r0
 8000856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff5d 	bl	800071c <__NVIC_SetPriority>
}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ffb0 	bl	80007d8 <SysTick_Config>
 8000878:	4603      	mov	r3, r0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000884:	b480      	push	{r7}
 8000886:	b089      	sub	sp, #36	; 0x24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
 800089e:	e177      	b.n	8000b90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008a0:	2201      	movs	r2, #1
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	4013      	ands	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	f040 8166 	bne.w	8000b8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d003      	beq.n	80008ce <HAL_GPIO_Init+0x4a>
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d123      	bne.n	8000916 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	08da      	lsrs	r2, r3, #3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3208      	adds	r2, #8
 80008d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	220f      	movs	r2, #15
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43db      	mvns	r3, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4013      	ands	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	691a      	ldr	r2, [r3, #16]
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	f003 0307 	and.w	r3, r3, #7
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4313      	orrs	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	08da      	lsrs	r2, r3, #3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3208      	adds	r2, #8
 8000910:	69b9      	ldr	r1, [r7, #24]
 8000912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	2203      	movs	r2, #3
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4013      	ands	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f003 0203 	and.w	r2, r3, #3
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4313      	orrs	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	69ba      	ldr	r2, [r7, #24]
 8000948:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d00b      	beq.n	800096a <HAL_GPIO_Init+0xe6>
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d007      	beq.n	800096a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800095e:	2b11      	cmp	r3, #17
 8000960:	d003      	beq.n	800096a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2b12      	cmp	r3, #18
 8000968:	d130      	bne.n	80009cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4013      	ands	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	68da      	ldr	r2, [r3, #12]
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009a0:	2201      	movs	r2, #1
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	4013      	ands	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	091b      	lsrs	r3, r3, #4
 80009b6:	f003 0201 	and.w	r2, r3, #1
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f000 80c0 	beq.w	8000b8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b65      	ldr	r3, [pc, #404]	; (8000ba4 <HAL_GPIO_Init+0x320>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a64      	ldr	r2, [pc, #400]	; (8000ba4 <HAL_GPIO_Init+0x320>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b62      	ldr	r3, [pc, #392]	; (8000ba4 <HAL_GPIO_Init+0x320>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a26:	4a60      	ldr	r2, [pc, #384]	; (8000ba8 <HAL_GPIO_Init+0x324>)
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	089b      	lsrs	r3, r3, #2
 8000a2c:	3302      	adds	r3, #2
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f003 0303 	and.w	r3, r3, #3
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a57      	ldr	r2, [pc, #348]	; (8000bac <HAL_GPIO_Init+0x328>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d037      	beq.n	8000ac2 <HAL_GPIO_Init+0x23e>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a56      	ldr	r2, [pc, #344]	; (8000bb0 <HAL_GPIO_Init+0x32c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d031      	beq.n	8000abe <HAL_GPIO_Init+0x23a>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a55      	ldr	r2, [pc, #340]	; (8000bb4 <HAL_GPIO_Init+0x330>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d02b      	beq.n	8000aba <HAL_GPIO_Init+0x236>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a54      	ldr	r2, [pc, #336]	; (8000bb8 <HAL_GPIO_Init+0x334>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d025      	beq.n	8000ab6 <HAL_GPIO_Init+0x232>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a53      	ldr	r2, [pc, #332]	; (8000bbc <HAL_GPIO_Init+0x338>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d01f      	beq.n	8000ab2 <HAL_GPIO_Init+0x22e>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a52      	ldr	r2, [pc, #328]	; (8000bc0 <HAL_GPIO_Init+0x33c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d019      	beq.n	8000aae <HAL_GPIO_Init+0x22a>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a51      	ldr	r2, [pc, #324]	; (8000bc4 <HAL_GPIO_Init+0x340>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d013      	beq.n	8000aaa <HAL_GPIO_Init+0x226>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a50      	ldr	r2, [pc, #320]	; (8000bc8 <HAL_GPIO_Init+0x344>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d00d      	beq.n	8000aa6 <HAL_GPIO_Init+0x222>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4f      	ldr	r2, [pc, #316]	; (8000bcc <HAL_GPIO_Init+0x348>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d007      	beq.n	8000aa2 <HAL_GPIO_Init+0x21e>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4e      	ldr	r2, [pc, #312]	; (8000bd0 <HAL_GPIO_Init+0x34c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_GPIO_Init+0x21a>
 8000a9a:	2309      	movs	r3, #9
 8000a9c:	e012      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	e010      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	e00e      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	e00c      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000aaa:	2306      	movs	r3, #6
 8000aac:	e00a      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000aae:	2305      	movs	r3, #5
 8000ab0:	e008      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000ab2:	2304      	movs	r3, #4
 8000ab4:	e006      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	e004      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000aba:	2302      	movs	r3, #2
 8000abc:	e002      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <HAL_GPIO_Init+0x240>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	69fa      	ldr	r2, [r7, #28]
 8000ac6:	f002 0203 	and.w	r2, r2, #3
 8000aca:	0092      	lsls	r2, r2, #2
 8000acc:	4093      	lsls	r3, r2
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ad4:	4934      	ldr	r1, [pc, #208]	; (8000ba8 <HAL_GPIO_Init+0x324>)
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	3302      	adds	r3, #2
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ae2:	4b3c      	ldr	r3, [pc, #240]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	4013      	ands	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b06:	4a33      	ldr	r2, [pc, #204]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b0c:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	43db      	mvns	r3, r3
 8000b16:	69ba      	ldr	r2, [r7, #24]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d003      	beq.n	8000b30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b30:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	4013      	ands	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	693b      	ldr	r3, [r7, #16]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b5a:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <HAL_GPIO_Init+0x350>)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	2b0f      	cmp	r3, #15
 8000b94:	f67f ae84 	bls.w	80008a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3724      	adds	r7, #36	; 0x24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020c00 	.word	0x40020c00
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40021400 	.word	0x40021400
 8000bc4:	40021800 	.word	0x40021800
 8000bc8:	40021c00 	.word	0x40021c00
 8000bcc:	40022000 	.word	0x40022000
 8000bd0:	40022400 	.word	0x40022400
 8000bd4:	40013c00 	.word	0x40013c00

08000bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	807b      	strh	r3, [r7, #2]
 8000be4:	4613      	mov	r3, r2
 8000be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000be8:	787b      	ldrb	r3, [r7, #1]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bee:	887a      	ldrh	r2, [r7, #2]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bf4:	e003      	b.n	8000bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bf6:	887b      	ldrh	r3, [r7, #2]
 8000bf8:	041a      	lsls	r2, r3, #16
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	619a      	str	r2, [r3, #24]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0c:	b08f      	sub	sp, #60	; 0x3c
 8000c0e:	af0a      	add	r7, sp, #40	; 0x28
 8000c10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d101      	bne.n	8000c1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e10f      	b.n	8000e3c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d106      	bne.n	8000c3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f003 f9e2 	bl	8004000 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fa3a 	bl	80020d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	687e      	ldr	r6, [r7, #4]
 8000c68:	466d      	mov	r5, sp
 8000c6a:	f106 0410 	add.w	r4, r6, #16
 8000c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c7e:	1d33      	adds	r3, r6, #4
 8000c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c82:	6838      	ldr	r0, [r7, #0]
 8000c84:	f001 f9b4 	bl	8001ff0 <USB_CoreInit>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d005      	beq.n	8000c9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2202      	movs	r2, #2
 8000c92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e0d0      	b.n	8000e3c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fa28 	bl	80020f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e04a      	b.n	8000d42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000cac:	7bfa      	ldrb	r2, [r7, #15]
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	1a9b      	subs	r3, r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	440b      	add	r3, r1
 8000cba:	333d      	adds	r3, #61	; 0x3d
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cc0:	7bfa      	ldrb	r2, [r7, #15]
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	1a9b      	subs	r3, r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	440b      	add	r3, r1
 8000cce:	333c      	adds	r3, #60	; 0x3c
 8000cd0:	7bfa      	ldrb	r2, [r7, #15]
 8000cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cd4:	7bfa      	ldrb	r2, [r7, #15]
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	b298      	uxth	r0, r3
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	1a9b      	subs	r3, r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	3342      	adds	r3, #66	; 0x42
 8000ce8:	4602      	mov	r2, r0
 8000cea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cec:	7bfa      	ldrb	r2, [r7, #15]
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	1a9b      	subs	r3, r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	333f      	adds	r3, #63	; 0x3f
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	4613      	mov	r3, r2
 8000d06:	00db      	lsls	r3, r3, #3
 8000d08:	1a9b      	subs	r3, r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	3344      	adds	r3, #68	; 0x44
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d14:	7bfa      	ldrb	r2, [r7, #15]
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	1a9b      	subs	r3, r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	440b      	add	r3, r1
 8000d22:	3348      	adds	r3, #72	; 0x48
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d28:	7bfa      	ldrb	r2, [r7, #15]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	3350      	adds	r3, #80	; 0x50
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	7bfa      	ldrb	r2, [r7, #15]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d3af      	bcc.n	8000cac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]
 8000d50:	e044      	b.n	8000ddc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	1a9b      	subs	r3, r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000d7a:	7bfa      	ldrb	r2, [r7, #15]
 8000d7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d7e:	7bfa      	ldrb	r2, [r7, #15]
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	1a9b      	subs	r3, r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	440b      	add	r3, r1
 8000da2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000daa:	7bfa      	ldrb	r2, [r7, #15]
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	440b      	add	r3, r1
 8000db8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	7bfa      	ldrb	r2, [r7, #15]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d3b5      	bcc.n	8000d52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	687e      	ldr	r6, [r7, #4]
 8000dee:	466d      	mov	r5, sp
 8000df0:	f106 0410 	add.w	r4, r6, #16
 8000df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e00:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e04:	1d33      	adds	r3, r6, #4
 8000e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e08:	6838      	ldr	r0, [r7, #0]
 8000e0a:	f001 f99f 	bl	800214c <USB_DevInit>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d005      	beq.n	8000e20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2202      	movs	r2, #2
 8000e18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e00d      	b.n	8000e3c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f002 f8b9 	bl	8002fac <USB_DevDisconnect>

  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d101      	bne.n	8000e60 <HAL_PCD_Start+0x1c>
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	e020      	b.n	8000ea2 <HAL_PCD_Start+0x5e>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d109      	bne.n	8000e84 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d005      	beq.n	8000e84 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 f877 	bl	8002f7c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 f90d 	bl	80020b2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	4608      	mov	r0, r1
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4603      	mov	r3, r0
 8000eba:	70fb      	strb	r3, [r7, #3]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	803b      	strh	r3, [r7, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	da0f      	bge.n	8000ef0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	f003 020f 	and.w	r2, r3, #15
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	3338      	adds	r3, #56	; 0x38
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2201      	movs	r2, #1
 8000eec:	705a      	strb	r2, [r3, #1]
 8000eee:	e00f      	b.n	8000f10 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	f003 020f 	and.w	r2, r3, #15
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	3304      	adds	r3, #4
 8000f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000f1c:	883a      	ldrh	r2, [r7, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	78ba      	ldrb	r2, [r7, #2]
 8000f26:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	785b      	ldrb	r3, [r3, #1]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000f3a:	78bb      	ldrb	r3, [r7, #2]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d102      	bne.n	8000f46 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d101      	bne.n	8000f54 <HAL_PCD_EP_Open+0xaa>
 8000f50:	2302      	movs	r3, #2
 8000f52:	e00e      	b.n	8000f72 <HAL_PCD_EP_Open+0xc8>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fac5 	bl	80024f2 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8000f70:	7afb      	ldrb	r3, [r7, #11]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da0f      	bge.n	8000fae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	f003 020f 	and.w	r2, r3, #15
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	1a9b      	subs	r3, r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	3338      	adds	r3, #56	; 0x38
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	705a      	strb	r2, [r3, #1]
 8000fac:	e00f      	b.n	8000fce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	f003 020f 	and.w	r2, r3, #15
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	f003 030f 	and.w	r3, r3, #15
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <HAL_PCD_EP_Close+0x6e>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e00e      	b.n	8001006 <HAL_PCD_EP_Close+0x8c>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	68f9      	ldr	r1, [r7, #12]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fb02 	bl	8002600 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	460b      	mov	r3, r1
 800101c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800101e:	7afb      	ldrb	r3, [r7, #11]
 8001020:	f003 020f 	and.w	r2, r3, #15
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	1a9b      	subs	r3, r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	3304      	adds	r3, #4
 8001036:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2200      	movs	r2, #0
 800104e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	b2da      	uxtb	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d102      	bne.n	800106a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800106a:	7afb      	ldrb	r3, [r7, #11]
 800106c:	f003 030f 	and.w	r3, r3, #15
 8001070:	2b00      	cmp	r3, #0
 8001072:	d109      	bne.n	8001088 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	6979      	ldr	r1, [r7, #20]
 8001082:	f001 fd85 	bl	8002b90 <USB_EP0StartXfer>
 8001086:	e008      	b.n	800109a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	461a      	mov	r2, r3
 8001094:	6979      	ldr	r1, [r7, #20]
 8001096:	f001 fb37 	bl	8002708 <USB_EPStartXfer>
  }

  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	f003 020f 	and.w	r2, r3, #15
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	460b      	mov	r3, r1
 80010e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010e4:	7afb      	ldrb	r3, [r7, #11]
 80010e6:	f003 020f 	and.w	r2, r3, #15
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	3338      	adds	r3, #56	; 0x38
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	3304      	adds	r3, #4
 80010fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2201      	movs	r2, #1
 8001112:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001114:	7afb      	ldrb	r3, [r7, #11]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	b2da      	uxtb	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d102      	bne.n	800112e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	2b00      	cmp	r3, #0
 8001136:	d109      	bne.n	800114c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	6979      	ldr	r1, [r7, #20]
 8001146:	f001 fd23 	bl	8002b90 <USB_EP0StartXfer>
 800114a:	e008      	b.n	800115e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	461a      	mov	r2, r3
 8001158:	6979      	ldr	r1, [r7, #20]
 800115a:	f001 fad5 	bl	8002708 <USB_EPStartXfer>
  }

  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	f003 020f 	and.w	r2, r3, #15
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	d901      	bls.n	8001186 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e050      	b.n	8001228 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001186:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800118a:	2b00      	cmp	r3, #0
 800118c:	da0f      	bge.n	80011ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	f003 020f 	and.w	r2, r3, #15
 8001194:	4613      	mov	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	3338      	adds	r3, #56	; 0x38
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	3304      	adds	r3, #4
 80011a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2201      	movs	r2, #1
 80011aa:	705a      	strb	r2, [r3, #1]
 80011ac:	e00d      	b.n	80011ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80011ae:	78fa      	ldrb	r2, [r7, #3]
 80011b0:	4613      	mov	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	1a9b      	subs	r3, r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	3304      	adds	r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2200      	movs	r2, #0
 80011c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2201      	movs	r2, #1
 80011ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_PCD_EP_SetStall+0x82>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e01e      	b.n	8001228 <HAL_PCD_EP_SetStall+0xc0>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68f9      	ldr	r1, [r7, #12]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 fe51 	bl	8002ea0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011fe:	78fb      	ldrb	r3, [r7, #3]
 8001200:	f003 030f 	and.w	r3, r3, #15
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10a      	bne.n	800121e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	b2d9      	uxtb	r1, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001218:	461a      	mov	r2, r3
 800121a:	f001 fedf 	bl	8002fdc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
 800123c:	4613      	mov	r3, r2
 800123e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d107      	bne.n	800125e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800124e:	883b      	ldrh	r3, [r7, #0]
 8001250:	0419      	lsls	r1, r3, #16
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	430a      	orrs	r2, r1
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
 800125c:	e028      	b.n	80012b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001264:	0c1b      	lsrs	r3, r3, #16
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	4413      	add	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e00d      	b.n	800128e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	3340      	adds	r3, #64	; 0x40
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	0c1b      	lsrs	r3, r3, #16
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	4413      	add	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	3301      	adds	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	3b01      	subs	r3, #1
 8001294:	429a      	cmp	r2, r3
 8001296:	d3ec      	bcc.n	8001272 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001298:	883b      	ldrh	r3, [r7, #0]
 800129a:	0418      	lsls	r0, r3, #16
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6819      	ldr	r1, [r3, #0]
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	4302      	orrs	r2, r0
 80012a8:	3340      	adds	r3, #64	; 0x40
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	887a      	ldrh	r2, [r7, #2]
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e22d      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d075      	beq.n	80013ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012fe:	4ba3      	ldr	r3, [pc, #652]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b04      	cmp	r3, #4
 8001308:	d00c      	beq.n	8001324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130a:	4ba0      	ldr	r3, [pc, #640]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001312:	2b08      	cmp	r3, #8
 8001314:	d112      	bne.n	800133c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001316:	4b9d      	ldr	r3, [pc, #628]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001322:	d10b      	bne.n	800133c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	4b99      	ldr	r3, [pc, #612]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d05b      	beq.n	80013e8 <HAL_RCC_OscConfig+0x108>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d157      	bne.n	80013e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e208      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d106      	bne.n	8001354 <HAL_RCC_OscConfig+0x74>
 8001346:	4b91      	ldr	r3, [pc, #580]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a90      	ldr	r2, [pc, #576]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e01d      	b.n	8001390 <HAL_RCC_OscConfig+0xb0>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x98>
 800135e:	4b8b      	ldr	r3, [pc, #556]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a8a      	ldr	r2, [pc, #552]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b88      	ldr	r3, [pc, #544]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a87      	ldr	r2, [pc, #540]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0xb0>
 8001378:	4b84      	ldr	r3, [pc, #528]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a83      	ldr	r2, [pc, #524]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800137e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b81      	ldr	r3, [pc, #516]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a80      	ldr	r2, [pc, #512]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff f960 	bl	800065c <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff f95c 	bl	800065c <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1cd      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0xc0>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff f94c 	bl	800065c <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff f948 	bl	800065c <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1b9      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	4b6c      	ldr	r3, [pc, #432]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0xe8>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d063      	beq.n	80014be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00b      	beq.n	800141a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001402:	4b62      	ldr	r3, [pc, #392]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140a:	2b08      	cmp	r3, #8
 800140c:	d11c      	bne.n	8001448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d116      	bne.n	8001448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	4b5c      	ldr	r3, [pc, #368]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_RCC_OscConfig+0x152>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e18d      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b56      	ldr	r3, [pc, #344]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4952      	ldr	r1, [pc, #328]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	e03a      	b.n	80014be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001450:	4b4f      	ldr	r3, [pc, #316]	; (8001590 <HAL_RCC_OscConfig+0x2b0>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff f901 	bl	800065c <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff f8fd 	bl	800065c <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e16e      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	4b46      	ldr	r3, [pc, #280]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4940      	ldr	r1, [pc, #256]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
 8001490:	e015      	b.n	80014be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_RCC_OscConfig+0x2b0>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff f8e0 	bl	800065c <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff f8dc 	bl	800065c <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e14d      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d030      	beq.n	800152c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d016      	beq.n	8001500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d2:	4b30      	ldr	r3, [pc, #192]	; (8001594 <HAL_RCC_OscConfig+0x2b4>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff f8c0 	bl	800065c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff f8bc 	bl	800065c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e12d      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x200>
 80014fe:	e015      	b.n	800152c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_RCC_OscConfig+0x2b4>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff f8a9 	bl	800065c <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150e:	f7ff f8a5 	bl	800065c <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e116      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	4b1a      	ldr	r3, [pc, #104]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f0      	bne.n	800150e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80a0 	beq.w	800167a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10f      	bne.n	800156a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 8001554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_RCC_OscConfig+0x2ac>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_RCC_OscConfig+0x2b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d121      	bne.n	80015ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_RCC_OscConfig+0x2b8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_RCC_OscConfig+0x2b8>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001582:	f7ff f86b 	bl	800065c <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	e011      	b.n	80015ae <HAL_RCC_OscConfig+0x2ce>
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	42470000 	.word	0x42470000
 8001594:	42470e80 	.word	0x42470e80
 8001598:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159c:	f7ff f85e 	bl	800065c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0cf      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ae:	4b6a      	ldr	r3, [pc, #424]	; (8001758 <HAL_RCC_OscConfig+0x478>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0f0      	beq.n	800159c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d106      	bne.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
 80015c2:	4b66      	ldr	r3, [pc, #408]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a65      	ldr	r2, [pc, #404]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	e01c      	b.n	800160a <HAL_RCC_OscConfig+0x32a>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d10c      	bne.n	80015f2 <HAL_RCC_OscConfig+0x312>
 80015d8:	4b60      	ldr	r3, [pc, #384]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a5f      	ldr	r2, [pc, #380]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
 80015e4:	4b5d      	ldr	r3, [pc, #372]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e8:	4a5c      	ldr	r2, [pc, #368]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6713      	str	r3, [r2, #112]	; 0x70
 80015f0:	e00b      	b.n	800160a <HAL_RCC_OscConfig+0x32a>
 80015f2:	4b5a      	ldr	r3, [pc, #360]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	4a59      	ldr	r2, [pc, #356]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 80015f8:	f023 0301 	bic.w	r3, r3, #1
 80015fc:	6713      	str	r3, [r2, #112]	; 0x70
 80015fe:	4b57      	ldr	r3, [pc, #348]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001602:	4a56      	ldr	r2, [pc, #344]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 8001604:	f023 0304 	bic.w	r3, r3, #4
 8001608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d015      	beq.n	800163e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff f823 	bl	800065c <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	e00a      	b.n	8001630 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161a:	f7ff f81f 	bl	800065c <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	f241 3288 	movw	r2, #5000	; 0x1388
 8001628:	4293      	cmp	r3, r2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e08e      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001630:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0ee      	beq.n	800161a <HAL_RCC_OscConfig+0x33a>
 800163c:	e014      	b.n	8001668 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163e:	f7ff f80d 	bl	800065c <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001646:	f7ff f809 	bl	800065c <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f241 3288 	movw	r2, #5000	; 0x1388
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e078      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165c:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 800165e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1ee      	bne.n	8001646 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001668:	7dfb      	ldrb	r3, [r7, #23]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d105      	bne.n	800167a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a3a      	ldr	r2, [pc, #232]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 8001674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d064      	beq.n	800174c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001682:	4b36      	ldr	r3, [pc, #216]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
 800168a:	2b08      	cmp	r3, #8
 800168c:	d05c      	beq.n	8001748 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d141      	bne.n	800171a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	4b32      	ldr	r3, [pc, #200]	; (8001760 <HAL_RCC_OscConfig+0x480>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169c:	f7fe ffde 	bl	800065c <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7fe ffda 	bl	800065c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e04b      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	4b29      	ldr	r3, [pc, #164]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69da      	ldr	r2, [r3, #28]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	085b      	lsrs	r3, r3, #1
 80016da:	3b01      	subs	r3, #1
 80016dc:	041b      	lsls	r3, r3, #16
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	061b      	lsls	r3, r3, #24
 80016e6:	491d      	ldr	r1, [pc, #116]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <HAL_RCC_OscConfig+0x480>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7fe ffb3 	bl	800065c <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fa:	f7fe ffaf 	bl	800065c <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e020      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x41a>
 8001718:	e018      	b.n	800174c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_RCC_OscConfig+0x480>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7fe ff9c 	bl	800065c <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001728:	f7fe ff98 	bl	800065c <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e009      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_RCC_OscConfig+0x47c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x448>
 8001746:	e001      	b.n	800174c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40007000 	.word	0x40007000
 800175c:	40023800 	.word	0x40023800
 8001760:	42470060 	.word	0x42470060

08001764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0ca      	b.n	800190e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b67      	ldr	r3, [pc, #412]	; (8001918 <HAL_RCC_ClockConfig+0x1b4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d90c      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b64      	ldr	r3, [pc, #400]	; (8001918 <HAL_RCC_ClockConfig+0x1b4>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b62      	ldr	r3, [pc, #392]	; (8001918 <HAL_RCC_ClockConfig+0x1b4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0b6      	b.n	800190e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b8:	4b58      	ldr	r3, [pc, #352]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a57      	ldr	r2, [pc, #348]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 80017be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d0:	4b52      	ldr	r3, [pc, #328]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a51      	ldr	r2, [pc, #324]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 80017d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017dc:	4b4f      	ldr	r3, [pc, #316]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	494c      	ldr	r1, [pc, #304]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d044      	beq.n	8001884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b46      	ldr	r3, [pc, #280]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d119      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e07d      	b.n	800190e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d003      	beq.n	8001822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	2b03      	cmp	r3, #3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06d      	b.n	800190e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b3a      	ldr	r3, [pc, #232]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e065      	b.n	800190e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b36      	ldr	r3, [pc, #216]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4933      	ldr	r1, [pc, #204]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001854:	f7fe ff02 	bl	800065c <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7fe fefe 	bl	800065c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e04d      	b.n	800190e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <HAL_RCC_ClockConfig+0x1b4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d20c      	bcs.n	80018ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <HAL_RCC_ClockConfig+0x1b4>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <HAL_RCC_ClockConfig+0x1b4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e030      	b.n	800190e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4915      	ldr	r1, [pc, #84]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	490d      	ldr	r1, [pc, #52]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ea:	f000 f81d 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018ee:	4601      	mov	r1, r0
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	fa21 f303 	lsr.w	r3, r1, r3
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001906:	2000      	movs	r0, #0
 8001908:	f7fe fe64 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00
 800191c:	40023800 	.word	0x40023800
 8001920:	08004ec8 	.word	0x08004ec8
 8001924:	20000118 	.word	0x20000118

08001928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800193e:	4b63      	ldr	r3, [pc, #396]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b04      	cmp	r3, #4
 8001948:	d007      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x32>
 800194a:	2b08      	cmp	r3, #8
 800194c:	d008      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x38>
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 80b4 	bne.w	8001abc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b5e      	ldr	r3, [pc, #376]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001956:	60bb      	str	r3, [r7, #8]
       break;
 8001958:	e0b3      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800195a:	4b5e      	ldr	r3, [pc, #376]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800195c:	60bb      	str	r3, [r7, #8]
      break;
 800195e:	e0b0      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001960:	4b5a      	ldr	r3, [pc, #360]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001968:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196a:	4b58      	ldr	r3, [pc, #352]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d04a      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001976:	4b55      	ldr	r3, [pc, #340]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	099b      	lsrs	r3, r3, #6
 800197c:	f04f 0400 	mov.w	r4, #0
 8001980:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	ea03 0501 	and.w	r5, r3, r1
 800198c:	ea04 0602 	and.w	r6, r4, r2
 8001990:	4629      	mov	r1, r5
 8001992:	4632      	mov	r2, r6
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	f04f 0400 	mov.w	r4, #0
 800199c:	0154      	lsls	r4, r2, #5
 800199e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019a2:	014b      	lsls	r3, r1, #5
 80019a4:	4619      	mov	r1, r3
 80019a6:	4622      	mov	r2, r4
 80019a8:	1b49      	subs	r1, r1, r5
 80019aa:	eb62 0206 	sbc.w	r2, r2, r6
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	f04f 0400 	mov.w	r4, #0
 80019b6:	0194      	lsls	r4, r2, #6
 80019b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019bc:	018b      	lsls	r3, r1, #6
 80019be:	1a5b      	subs	r3, r3, r1
 80019c0:	eb64 0402 	sbc.w	r4, r4, r2
 80019c4:	f04f 0100 	mov.w	r1, #0
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	00e2      	lsls	r2, r4, #3
 80019ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019d2:	00d9      	lsls	r1, r3, #3
 80019d4:	460b      	mov	r3, r1
 80019d6:	4614      	mov	r4, r2
 80019d8:	195b      	adds	r3, r3, r5
 80019da:	eb44 0406 	adc.w	r4, r4, r6
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	0262      	lsls	r2, r4, #9
 80019e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80019ec:	0259      	lsls	r1, r3, #9
 80019ee:	460b      	mov	r3, r1
 80019f0:	4614      	mov	r4, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	4621      	mov	r1, r4
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f04f 0400 	mov.w	r4, #0
 80019fc:	461a      	mov	r2, r3
 80019fe:	4623      	mov	r3, r4
 8001a00:	f7fe fc46 	bl	8000290 <__aeabi_uldivmod>
 8001a04:	4603      	mov	r3, r0
 8001a06:	460c      	mov	r4, r1
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e049      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0c:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	f04f 0400 	mov.w	r4, #0
 8001a16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	ea03 0501 	and.w	r5, r3, r1
 8001a22:	ea04 0602 	and.w	r6, r4, r2
 8001a26:	4629      	mov	r1, r5
 8001a28:	4632      	mov	r2, r6
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	f04f 0400 	mov.w	r4, #0
 8001a32:	0154      	lsls	r4, r2, #5
 8001a34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a38:	014b      	lsls	r3, r1, #5
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	1b49      	subs	r1, r1, r5
 8001a40:	eb62 0206 	sbc.w	r2, r2, r6
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	f04f 0400 	mov.w	r4, #0
 8001a4c:	0194      	lsls	r4, r2, #6
 8001a4e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a52:	018b      	lsls	r3, r1, #6
 8001a54:	1a5b      	subs	r3, r3, r1
 8001a56:	eb64 0402 	sbc.w	r4, r4, r2
 8001a5a:	f04f 0100 	mov.w	r1, #0
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	00e2      	lsls	r2, r4, #3
 8001a64:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a68:	00d9      	lsls	r1, r3, #3
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	195b      	adds	r3, r3, r5
 8001a70:	eb44 0406 	adc.w	r4, r4, r6
 8001a74:	f04f 0100 	mov.w	r1, #0
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	02a2      	lsls	r2, r4, #10
 8001a7e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a82:	0299      	lsls	r1, r3, #10
 8001a84:	460b      	mov	r3, r1
 8001a86:	4614      	mov	r4, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f04f 0400 	mov.w	r4, #0
 8001a92:	461a      	mov	r2, r3
 8001a94:	4623      	mov	r3, r4
 8001a96:	f7fe fbfb 	bl	8000290 <__aeabi_uldivmod>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	460c      	mov	r4, r1
 8001a9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	0c1b      	lsrs	r3, r3, #16
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab8:	60bb      	str	r3, [r7, #8]
      break;
 8001aba:	e002      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001abe:	60bb      	str	r3, [r7, #8]
      break;
 8001ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	00f42400 	.word	0x00f42400
 8001ad4:	007a1200 	.word	0x007a1200

08001ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_RCC_GetHCLKFreq+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000118 	.word	0x20000118

08001af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001af4:	f7ff fff0 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001af8:	4601      	mov	r1, r0
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	0a9b      	lsrs	r3, r3, #10
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	4a03      	ldr	r2, [pc, #12]	; (8001b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b06:	5cd3      	ldrb	r3, [r2, r3]
 8001b08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	08004ed8 	.word	0x08004ed8

08001b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b1c:	f7ff ffdc 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001b20:	4601      	mov	r1, r0
 8001b22:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	0b5b      	lsrs	r3, r3, #13
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4a03      	ldr	r2, [pc, #12]	; (8001b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	08004ed8 	.word	0x08004ed8

08001b40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e03f      	b.n	8001bd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f002 f88e 	bl	8003c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2224      	movs	r2, #36	; 0x24
 8001b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f829 	bl	8001bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ba8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001c1c:	f023 030c 	bic.w	r3, r3, #12
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	430b      	orrs	r3, r1
 8001c28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c48:	f040 80e4 	bne.w	8001e14 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4aab      	ldr	r2, [pc, #684]	; (8001f00 <UART_SetConfig+0x324>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d004      	beq.n	8001c60 <UART_SetConfig+0x84>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4aaa      	ldr	r2, [pc, #680]	; (8001f04 <UART_SetConfig+0x328>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d16c      	bne.n	8001d3a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c60:	f7ff ff5a 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009a      	lsls	r2, r3, #2
 8001c6e:	441a      	add	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4aa3      	ldr	r2, [pc, #652]	; (8001f08 <UART_SetConfig+0x32c>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	095b      	lsrs	r3, r3, #5
 8001c82:	011c      	lsls	r4, r3, #4
 8001c84:	f7ff ff48 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	009a      	lsls	r2, r3, #2
 8001c92:	441a      	add	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fbb2 f5f3 	udiv	r5, r2, r3
 8001c9e:	f7ff ff3b 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	009a      	lsls	r2, r3, #2
 8001cac:	441a      	add	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	4a93      	ldr	r2, [pc, #588]	; (8001f08 <UART_SetConfig+0x32c>)
 8001cba:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2264      	movs	r2, #100	; 0x64
 8001cc2:	fb02 f303 	mul.w	r3, r2, r3
 8001cc6:	1aeb      	subs	r3, r5, r3
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	3332      	adds	r3, #50	; 0x32
 8001ccc:	4a8e      	ldr	r2, [pc, #568]	; (8001f08 <UART_SetConfig+0x32c>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001cda:	441c      	add	r4, r3
 8001cdc:	f7ff ff1c 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009a      	lsls	r2, r3, #2
 8001cea:	441a      	add	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fbb2 f5f3 	udiv	r5, r2, r3
 8001cf6:	f7ff ff0f 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	009a      	lsls	r2, r3, #2
 8001d04:	441a      	add	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	4a7d      	ldr	r2, [pc, #500]	; (8001f08 <UART_SetConfig+0x32c>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2264      	movs	r2, #100	; 0x64
 8001d1a:	fb02 f303 	mul.w	r3, r2, r3
 8001d1e:	1aeb      	subs	r3, r5, r3
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	3332      	adds	r3, #50	; 0x32
 8001d24:	4a78      	ldr	r2, [pc, #480]	; (8001f08 <UART_SetConfig+0x32c>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	f003 0207 	and.w	r2, r3, #7
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4422      	add	r2, r4
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	e154      	b.n	8001fe4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d3a:	f7ff fed9 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	009a      	lsls	r2, r3, #2
 8001d48:	441a      	add	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	4a6c      	ldr	r2, [pc, #432]	; (8001f08 <UART_SetConfig+0x32c>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	011c      	lsls	r4, r3, #4
 8001d5e:	f7ff fec7 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8001d62:	4602      	mov	r2, r0
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	009a      	lsls	r2, r3, #2
 8001d6c:	441a      	add	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fbb2 f5f3 	udiv	r5, r2, r3
 8001d78:	f7ff feba 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	009a      	lsls	r2, r3, #2
 8001d86:	441a      	add	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4a5d      	ldr	r2, [pc, #372]	; (8001f08 <UART_SetConfig+0x32c>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	095b      	lsrs	r3, r3, #5
 8001d9a:	2264      	movs	r2, #100	; 0x64
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	1aeb      	subs	r3, r5, r3
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	3332      	adds	r3, #50	; 0x32
 8001da6:	4a58      	ldr	r2, [pc, #352]	; (8001f08 <UART_SetConfig+0x32c>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001db4:	441c      	add	r4, r3
 8001db6:	f7ff fe9b 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009a      	lsls	r2, r3, #2
 8001dc4:	441a      	add	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fbb2 f5f3 	udiv	r5, r2, r3
 8001dd0:	f7ff fe8e 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	009a      	lsls	r2, r3, #2
 8001dde:	441a      	add	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4a47      	ldr	r2, [pc, #284]	; (8001f08 <UART_SetConfig+0x32c>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	2264      	movs	r2, #100	; 0x64
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	1aeb      	subs	r3, r5, r3
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	3332      	adds	r3, #50	; 0x32
 8001dfe:	4a42      	ldr	r2, [pc, #264]	; (8001f08 <UART_SetConfig+0x32c>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	095b      	lsrs	r3, r3, #5
 8001e06:	f003 0207 	and.w	r2, r3, #7
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4422      	add	r2, r4
 8001e10:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001e12:	e0e7      	b.n	8001fe4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a39      	ldr	r2, [pc, #228]	; (8001f00 <UART_SetConfig+0x324>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d004      	beq.n	8001e28 <UART_SetConfig+0x24c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a38      	ldr	r2, [pc, #224]	; (8001f04 <UART_SetConfig+0x328>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d171      	bne.n	8001f0c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001e28:	f7ff fe76 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	009a      	lsls	r2, r3, #2
 8001e36:	441a      	add	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <UART_SetConfig+0x32c>)
 8001e44:	fba2 2303 	umull	r2, r3, r2, r3
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	011c      	lsls	r4, r3, #4
 8001e4c:	f7ff fe64 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	009a      	lsls	r2, r3, #2
 8001e5a:	441a      	add	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	fbb2 f5f3 	udiv	r5, r2, r3
 8001e66:	f7ff fe57 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	009a      	lsls	r2, r3, #2
 8001e74:	441a      	add	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e80:	4a21      	ldr	r2, [pc, #132]	; (8001f08 <UART_SetConfig+0x32c>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2264      	movs	r2, #100	; 0x64
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	1aeb      	subs	r3, r5, r3
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	3332      	adds	r3, #50	; 0x32
 8001e94:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <UART_SetConfig+0x32c>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea0:	441c      	add	r4, r3
 8001ea2:	f7ff fe39 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	009a      	lsls	r2, r3, #2
 8001eb0:	441a      	add	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	fbb2 f5f3 	udiv	r5, r2, r3
 8001ebc:	f7ff fe2c 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009a      	lsls	r2, r3, #2
 8001eca:	441a      	add	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <UART_SetConfig+0x32c>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	2264      	movs	r2, #100	; 0x64
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	1aeb      	subs	r3, r5, r3
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	3332      	adds	r3, #50	; 0x32
 8001eea:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <UART_SetConfig+0x32c>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	f003 020f 	and.w	r2, r3, #15
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4422      	add	r2, r4
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	e071      	b.n	8001fe4 <UART_SetConfig+0x408>
 8001f00:	40011000 	.word	0x40011000
 8001f04:	40011400 	.word	0x40011400
 8001f08:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f0c:	f7ff fdf0 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	009a      	lsls	r2, r3, #2
 8001f1a:	441a      	add	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4a31      	ldr	r2, [pc, #196]	; (8001fec <UART_SetConfig+0x410>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	011c      	lsls	r4, r3, #4
 8001f30:	f7ff fdde 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009a      	lsls	r2, r3, #2
 8001f3e:	441a      	add	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f4a:	f7ff fdd1 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009a      	lsls	r2, r3, #2
 8001f58:	441a      	add	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	4a21      	ldr	r2, [pc, #132]	; (8001fec <UART_SetConfig+0x410>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2264      	movs	r2, #100	; 0x64
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	1aeb      	subs	r3, r5, r3
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	3332      	adds	r3, #50	; 0x32
 8001f78:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <UART_SetConfig+0x410>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f84:	441c      	add	r4, r3
 8001f86:	f7ff fdb3 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	009a      	lsls	r2, r3, #2
 8001f94:	441a      	add	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001fa0:	f7ff fda6 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	009a      	lsls	r2, r3, #2
 8001fae:	441a      	add	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <UART_SetConfig+0x410>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	2264      	movs	r2, #100	; 0x64
 8001fc4:	fb02 f303 	mul.w	r3, r2, r3
 8001fc8:	1aeb      	subs	r3, r5, r3
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	3332      	adds	r3, #50	; 0x32
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <UART_SetConfig+0x410>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	f003 020f 	and.w	r2, r3, #15
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4422      	add	r2, r4
 8001fe0:	609a      	str	r2, [r3, #8]
}
 8001fe2:	e7ff      	b.n	8001fe4 <UART_SetConfig+0x408>
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bdb0      	pop	{r4, r5, r7, pc}
 8001fec:	51eb851f 	.word	0x51eb851f

08001ff0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	f107 001c 	add.w	r0, r7, #28
 8001ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002004:	2b01      	cmp	r3, #1
 8002006:	d122      	bne.n	800204e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800201c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002032:	2b01      	cmp	r3, #1
 8002034:	d105      	bne.n	8002042 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f001 f828 	bl	8003098 <USB_CoreReset>
 8002048:	4603      	mov	r3, r0
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	e01a      	b.n	8002084 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f001 f81c 	bl	8003098 <USB_CoreReset>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	639a      	str	r2, [r3, #56]	; 0x38
 8002076:	e005      	b.n	8002084 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	2b01      	cmp	r3, #1
 8002088:	d10b      	bne.n	80020a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f043 0206 	orr.w	r2, r3, #6
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f043 0220 	orr.w	r2, r3, #32
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020ae:	b004      	add	sp, #16
 80020b0:	4770      	bx	lr

080020b2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f043 0201 	orr.w	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 0201 	bic.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d106      	bne.n	8002122 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	e00b      	b.n	800213a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d106      	bne.n	8002136 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	e001      	b.n	800213a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e003      	b.n	8002142 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800213a:	2032      	movs	r0, #50	; 0x32
 800213c:	f7fe fa9a 	bl	8000674 <HAL_Delay>

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800214c:	b084      	sub	sp, #16
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800215a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	e009      	b.n	8002180 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	3340      	adds	r3, #64	; 0x40
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	2200      	movs	r2, #0
 8002178:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	3301      	adds	r3, #1
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b0e      	cmp	r3, #14
 8002184:	d9f2      	bls.n	800216c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d112      	bne.n	80021b2 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
 80021b0:	e00b      	b.n	80021ca <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80021d0:	461a      	mov	r2, r3
 80021d2:	2300      	movs	r3, #0
 80021d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021dc:	4619      	mov	r1, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e4:	461a      	mov	r2, r3
 80021e6:	680b      	ldr	r3, [r1, #0]
 80021e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80021ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d10c      	bne.n	800220a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80021f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d104      	bne.n	8002200 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80021f6:	2100      	movs	r1, #0
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f961 	bl	80024c0 <USB_SetDevSpeed>
 80021fe:	e008      	b.n	8002212 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002200:	2101      	movs	r1, #1
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f95c 	bl	80024c0 <USB_SetDevSpeed>
 8002208:	e003      	b.n	8002212 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800220a:	2103      	movs	r1, #3
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f957 	bl	80024c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002212:	2110      	movs	r1, #16
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f90b 	bl	8002430 <USB_FlushTxFifo>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f929 	bl	800247c <USB_FlushRxFifo>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800223a:	461a      	mov	r2, r3
 800223c:	2300      	movs	r3, #0
 800223e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002246:	461a      	mov	r2, r3
 8002248:	2300      	movs	r3, #0
 800224a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002252:	461a      	mov	r2, r3
 8002254:	2300      	movs	r3, #0
 8002256:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002258:	2300      	movs	r3, #0
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e043      	b.n	80022e6 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	015a      	lsls	r2, r3, #5
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4413      	add	r3, r2
 8002266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002274:	d118      	bne.n	80022a8 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10a      	bne.n	8002292 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002288:	461a      	mov	r2, r3
 800228a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e013      	b.n	80022ba <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229e:	461a      	mov	r2, r3
 80022a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e008      	b.n	80022ba <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b4:	461a      	mov	r2, r3
 80022b6:	2300      	movs	r3, #0
 80022b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	015a      	lsls	r2, r3, #5
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4413      	add	r3, r2
 80022c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c6:	461a      	mov	r2, r3
 80022c8:	2300      	movs	r3, #0
 80022ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022d8:	461a      	mov	r2, r3
 80022da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	3301      	adds	r3, #1
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d3b7      	bcc.n	800225e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	e043      	b.n	800237c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800230a:	d118      	bne.n	800233e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10a      	bne.n	8002328 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800231e:	461a      	mov	r2, r3
 8002320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e013      	b.n	8002350 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002334:	461a      	mov	r2, r3
 8002336:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	e008      	b.n	8002350 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234a:	461a      	mov	r2, r3
 800234c:	2300      	movs	r3, #0
 800234e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235c:	461a      	mov	r2, r3
 800235e:	2300      	movs	r3, #0
 8002360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	015a      	lsls	r2, r3, #5
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4413      	add	r3, r2
 800236a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800236e:	461a      	mov	r2, r3
 8002370:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002374:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	3301      	adds	r3, #1
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	429a      	cmp	r2, r3
 8002382:	d3b7      	bcc.n	80022f4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002396:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8002398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239a:	2b01      	cmp	r3, #1
 800239c:	d111      	bne.n	80023c2 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <USB_DevInit+0x2dc>)
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	f043 0303 	orr.w	r3, r3, #3
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80023ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f043 0210 	orr.w	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <USB_DevInit+0x2e0>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80023ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f043 0208 	orr.w	r2, r3, #8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002402:	2b01      	cmp	r3, #1
 8002404:	d107      	bne.n	8002416 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002416:	7dfb      	ldrb	r3, [r7, #23]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002422:	b004      	add	sp, #16
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	00800100 	.word	0x00800100
 800242c:	803c3800 	.word	0x803c3800

08002430 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	019b      	lsls	r3, r3, #6
 8002442:	f043 0220 	orr.w	r2, r3, #32
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3301      	adds	r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <USB_FlushTxFifo+0x48>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e006      	b.n	800246a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b20      	cmp	r3, #32
 8002466:	d0f0      	beq.n	800244a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	00030d40 	.word	0x00030d40

0800247c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2210      	movs	r2, #16
 800248c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3301      	adds	r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4a09      	ldr	r2, [pc, #36]	; (80024bc <USB_FlushRxFifo+0x40>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e006      	b.n	80024ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d0f0      	beq.n	800248e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	00030d40 	.word	0x00030d40

080024c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	68f9      	ldr	r1, [r7, #12]
 80024dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	785b      	ldrb	r3, [r3, #1]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d13a      	bne.n	8002584 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	b29b      	uxth	r3, r3
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800252c:	4313      	orrs	r3, r2
 800252e:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d155      	bne.n	80025f2 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	78db      	ldrb	r3, [r3, #3]
 8002560:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002562:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	059b      	lsls	r3, r3, #22
 8002568:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800256a:	4313      	orrs	r3, r2
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	0151      	lsls	r1, r2, #5
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	440a      	add	r2, r1
 8002574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e036      	b.n	80025f2 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	2101      	movs	r1, #1
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	68f9      	ldr	r1, [r7, #12]
 800259e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	015a      	lsls	r2, r3, #5
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4413      	add	r3, r2
 80025ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d11a      	bne.n	80025f2 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	78db      	ldrb	r3, [r3, #3]
 80025d6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80025d8:	430b      	orrs	r3, r1
 80025da:	4313      	orrs	r3, r2
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	0151      	lsls	r1, r2, #5
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	440a      	add	r2, r1
 80025e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f0:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	785b      	ldrb	r3, [r3, #1]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d135      	bne.n	8002688 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	b29b      	uxth	r3, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	68f9      	ldr	r1, [r7, #12]
 8002638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800263c:	4013      	ands	r3, r2
 800263e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002646:	69da      	ldr	r2, [r3, #28]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	b29b      	uxth	r3, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	68f9      	ldr	r1, [r7, #12]
 800265c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002660:	4013      	ands	r3, r2
 8002662:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4413      	add	r3, r2
 800266c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	0159      	lsls	r1, r3, #5
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	440b      	add	r3, r1
 800267a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267e:	4619      	mov	r1, r3
 8002680:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <USB_DeactivateEndpoint+0x100>)
 8002682:	4013      	ands	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
 8002686:	e034      	b.n	80026f2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800268e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	041b      	lsls	r3, r3, #16
 80026a0:	43db      	mvns	r3, r3
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026a8:	4013      	ands	r3, r2
 80026aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	041b      	lsls	r3, r3, #16
 80026c4:	43db      	mvns	r3, r3
 80026c6:	68f9      	ldr	r1, [r7, #12]
 80026c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026cc:	4013      	ands	r3, r2
 80026ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	0159      	lsls	r1, r3, #5
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	440b      	add	r3, r1
 80026e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ea:	4619      	mov	r1, r3
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <USB_DeactivateEndpoint+0x104>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	ec337800 	.word	0xec337800
 8002704:	eff37800 	.word	0xeff37800

08002708 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	4613      	mov	r3, r2
 8002714:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	785b      	ldrb	r3, [r3, #1]
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 815c 	bne.w	80029e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d132      	bne.n	8002798 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	4413      	add	r3, r2
 800273a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	0151      	lsls	r1, r2, #5
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	440a      	add	r2, r1
 8002748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800274c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002750:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002754:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	4413      	add	r3, r2
 800275e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	0151      	lsls	r1, r2, #5
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	440a      	add	r2, r1
 800276c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002774:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	0151      	lsls	r1, r2, #5
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	440a      	add	r2, r1
 800278c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002790:	0cdb      	lsrs	r3, r3, #19
 8002792:	04db      	lsls	r3, r3, #19
 8002794:	6113      	str	r3, [r2, #16]
 8002796:	e074      	b.n	8002882 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	0151      	lsls	r1, r2, #5
 80027aa:	69fa      	ldr	r2, [r7, #28]
 80027ac:	440a      	add	r2, r1
 80027ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027b2:	0cdb      	lsrs	r3, r3, #19
 80027b4:	04db      	lsls	r3, r3, #19
 80027b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	0151      	lsls	r1, r2, #5
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	440a      	add	r2, r1
 80027ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80027d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80027da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	6959      	ldr	r1, [r3, #20]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	440b      	add	r3, r1
 80027f4:	1e59      	subs	r1, r3, #1
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80027fe:	04d9      	lsls	r1, r3, #19
 8002800:	4b9d      	ldr	r3, [pc, #628]	; (8002a78 <USB_EPStartXfer+0x370>)
 8002802:	400b      	ands	r3, r1
 8002804:	69b9      	ldr	r1, [r7, #24]
 8002806:	0148      	lsls	r0, r1, #5
 8002808:	69f9      	ldr	r1, [r7, #28]
 800280a:	4401      	add	r1, r0
 800280c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8002810:	4313      	orrs	r3, r2
 8002812:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282a:	69b9      	ldr	r1, [r7, #24]
 800282c:	0148      	lsls	r0, r1, #5
 800282e:	69f9      	ldr	r1, [r7, #28]
 8002830:	4401      	add	r1, r0
 8002832:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8002836:	4313      	orrs	r3, r2
 8002838:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	78db      	ldrb	r3, [r3, #3]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d11f      	bne.n	8002882 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	0151      	lsls	r1, r2, #5
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	440a      	add	r2, r1
 8002858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800285c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002860:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	0151      	lsls	r1, r2, #5
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	440a      	add	r2, r1
 8002878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800287c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002880:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d14b      	bne.n	8002920 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d009      	beq.n	80028a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4413      	add	r3, r2
 8002898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289c:	461a      	mov	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	78db      	ldrb	r3, [r3, #3]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d128      	bne.n	80028fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d110      	bne.n	80028de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	0151      	lsls	r1, r2, #5
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	440a      	add	r2, r1
 80028d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	e00f      	b.n	80028fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	0151      	lsls	r1, r2, #5
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	440a      	add	r2, r1
 80028f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	4413      	add	r3, r2
 8002906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	0151      	lsls	r1, r2, #5
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	440a      	add	r2, r1
 8002914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002918:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e12f      	b.n	8002b80 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	0151      	lsls	r1, r2, #5
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	440a      	add	r2, r1
 8002936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800293a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800293e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	78db      	ldrb	r3, [r3, #3]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d015      	beq.n	8002974 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8117 	beq.w	8002b80 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f303 	lsl.w	r3, r1, r3
 8002968:	69f9      	ldr	r1, [r7, #28]
 800296a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800296e:	4313      	orrs	r3, r2
 8002970:	634b      	str	r3, [r1, #52]	; 0x34
 8002972:	e105      	b.n	8002b80 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d110      	bne.n	80029a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	0151      	lsls	r1, r2, #5
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	440a      	add	r2, r1
 800299a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800299e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	e00f      	b.n	80029c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	0151      	lsls	r1, r2, #5
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	440a      	add	r2, r1
 80029bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	68d9      	ldr	r1, [r3, #12]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	b298      	uxth	r0, r3
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	4603      	mov	r3, r0
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fa2b 	bl	8002e36 <USB_WritePacket>
 80029e0:	e0ce      	b.n	8002b80 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	015a      	lsls	r2, r3, #5
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	4413      	add	r3, r2
 80029ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	0151      	lsls	r1, r2, #5
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	440a      	add	r2, r1
 80029f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80029fc:	0cdb      	lsrs	r3, r3, #19
 80029fe:	04db      	lsls	r3, r3, #19
 8002a00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	0151      	lsls	r1, r2, #5
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	440a      	add	r2, r1
 8002a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002a20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002a24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d126      	bne.n	8002a7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a44:	69b9      	ldr	r1, [r7, #24]
 8002a46:	0148      	lsls	r0, r1, #5
 8002a48:	69f9      	ldr	r1, [r7, #28]
 8002a4a:	4401      	add	r1, r0
 8002a4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002a50:	4313      	orrs	r3, r2
 8002a52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a72:	6113      	str	r3, [r2, #16]
 8002a74:	e036      	b.n	8002ae4 <USB_EPStartXfer+0x3dc>
 8002a76:	bf00      	nop
 8002a78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4413      	add	r3, r2
 8002a86:	1e5a      	subs	r2, r3, #1
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	015a      	lsls	r2, r3, #5
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	8afb      	ldrh	r3, [r7, #22]
 8002aa2:	04d9      	lsls	r1, r3, #19
 8002aa4:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <USB_EPStartXfer+0x484>)
 8002aa6:	400b      	ands	r3, r1
 8002aa8:	69b9      	ldr	r1, [r7, #24]
 8002aaa:	0148      	lsls	r0, r1, #5
 8002aac:	69f9      	ldr	r1, [r7, #28]
 8002aae:	4401      	add	r1, r0
 8002ab0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	8af9      	ldrh	r1, [r7, #22]
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad4:	69b9      	ldr	r1, [r7, #24]
 8002ad6:	0148      	lsls	r0, r1, #5
 8002ad8:	69f9      	ldr	r1, [r7, #28]
 8002ada:	4401      	add	r1, r0
 8002adc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d10d      	bne.n	8002b06 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	68d9      	ldr	r1, [r3, #12]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b02:	460a      	mov	r2, r1
 8002b04:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	78db      	ldrb	r3, [r3, #3]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d128      	bne.n	8002b60 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d110      	bne.n	8002b40 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	0151      	lsls	r1, r2, #5
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	440a      	add	r2, r1
 8002b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e00f      	b.n	8002b60 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	0151      	lsls	r1, r2, #5
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	440a      	add	r2, r1
 8002b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	0151      	lsls	r1, r2, #5
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	440a      	add	r2, r1
 8002b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002b7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	1ff80000 	.word	0x1ff80000

08002b90 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	785b      	ldrb	r3, [r3, #1]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	f040 80cd 	bne.w	8002d4c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d132      	bne.n	8002c20 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	0151      	lsls	r1, r2, #5
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	440a      	add	r2, r1
 8002bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002bd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002bd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	0151      	lsls	r1, r2, #5
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	440a      	add	r2, r1
 8002bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002bf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	0151      	lsls	r1, r2, #5
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	440a      	add	r2, r1
 8002c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c18:	0cdb      	lsrs	r3, r3, #19
 8002c1a:	04db      	lsls	r3, r3, #19
 8002c1c:	6113      	str	r3, [r2, #16]
 8002c1e:	e04e      	b.n	8002cbe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	0151      	lsls	r1, r2, #5
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	440a      	add	r2, r1
 8002c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c3a:	0cdb      	lsrs	r3, r3, #19
 8002c3c:	04db      	lsls	r3, r3, #19
 8002c3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	0151      	lsls	r1, r2, #5
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	440a      	add	r2, r1
 8002c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002c5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002c62:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d903      	bls.n	8002c78 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	0151      	lsls	r1, r2, #5
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	440a      	add	r2, r1
 8002c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cae:	6939      	ldr	r1, [r7, #16]
 8002cb0:	0148      	lsls	r0, r1, #5
 8002cb2:	6979      	ldr	r1, [r7, #20]
 8002cb4:	4401      	add	r1, r0
 8002cb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d11e      	bne.n	8002d02 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d009      	beq.n	8002ce0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	0151      	lsls	r1, r2, #5
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	440a      	add	r2, r1
 8002cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	e092      	b.n	8002e28 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	0151      	lsls	r1, r2, #5
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	440a      	add	r2, r1
 8002d18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002d20:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d07e      	beq.n	8002e28 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	6979      	ldr	r1, [r7, #20]
 8002d42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d46:	4313      	orrs	r3, r2
 8002d48:	634b      	str	r3, [r1, #52]	; 0x34
 8002d4a:	e06d      	b.n	8002e28 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	0151      	lsls	r1, r2, #5
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	440a      	add	r2, r1
 8002d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d66:	0cdb      	lsrs	r3, r3, #19
 8002d68:	04db      	lsls	r3, r3, #19
 8002d6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	0151      	lsls	r1, r2, #5
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	440a      	add	r2, r1
 8002d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002d8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002d8e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	0151      	lsls	r1, r2, #5
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	440a      	add	r2, r1
 8002db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002dbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd6:	6939      	ldr	r1, [r7, #16]
 8002dd8:	0148      	lsls	r0, r1, #5
 8002dda:	6979      	ldr	r1, [r7, #20]
 8002ddc:	4401      	add	r1, r0
 8002dde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8002de2:	4313      	orrs	r3, r2
 8002de4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d10d      	bne.n	8002e08 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d009      	beq.n	8002e08 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	68d9      	ldr	r1, [r3, #12]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e04:	460a      	mov	r2, r1
 8002e06:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	0151      	lsls	r1, r2, #5
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	440a      	add	r2, r1
 8002e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002e26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b089      	sub	sp, #36	; 0x24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	4611      	mov	r1, r2
 8002e42:	461a      	mov	r2, r3
 8002e44:	460b      	mov	r3, r1
 8002e46:	71fb      	strb	r3, [r7, #7]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8002e54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d11a      	bne.n	8002e92 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8002e5c:	88bb      	ldrh	r3, [r7, #4]
 8002e5e:	3303      	adds	r3, #3
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	e00f      	b.n	8002e8a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	031a      	lsls	r2, r3, #12
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e76:	461a      	mov	r2, r3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3304      	adds	r3, #4
 8002e82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	3301      	adds	r3, #1
 8002e88:	61bb      	str	r3, [r7, #24]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d3eb      	bcc.n	8002e6a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3724      	adds	r7, #36	; 0x24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	785b      	ldrb	r3, [r3, #1]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d12c      	bne.n	8002f16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db12      	blt.n	8002ef4 <USB_EPSetStall+0x54>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00f      	beq.n	8002ef4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	0151      	lsls	r1, r2, #5
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	440a      	add	r2, r1
 8002eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002eee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ef2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	0151      	lsls	r1, r2, #5
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	440a      	add	r2, r1
 8002f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	e02b      	b.n	8002f6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	db12      	blt.n	8002f4e <USB_EPSetStall+0xae>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00f      	beq.n	8002f4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	0151      	lsls	r1, r2, #5
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	440a      	add	r2, r1
 8002f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	0151      	lsls	r1, r2, #5
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	440a      	add	r2, r1
 8002f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f96:	f023 0302 	bic.w	r3, r3, #2
 8002f9a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	f7fd fb69 	bl	8000674 <HAL_Delay>

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fc6:	f043 0302 	orr.w	r3, r3, #2
 8002fca:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8002fcc:	2003      	movs	r0, #3
 8002fce:	f7fd fb51 	bl	8000674 <HAL_Delay>

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	333c      	adds	r3, #60	; 0x3c
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4a26      	ldr	r2, [pc, #152]	; (8003094 <USB_EP0_OutStart+0xb8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d90a      	bls.n	8003016 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800300c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003010:	d101      	bne.n	8003016 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e037      	b.n	8003086 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301c:	461a      	mov	r2, r3
 800301e:	2300      	movs	r3, #0
 8003020:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003044:	f043 0318 	orr.w	r3, r3, #24
 8003048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003058:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800305c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800305e:	7afb      	ldrb	r3, [r7, #11]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10f      	bne.n	8003084 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800307e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003082:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	4f54300a 	.word	0x4f54300a

08003098 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3301      	adds	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4a13      	ldr	r2, [pc, #76]	; (80030fc <USB_CoreReset+0x64>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e01b      	b.n	80030ee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	daf2      	bge.n	80030a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3301      	adds	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <USB_CoreReset+0x64>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e006      	b.n	80030ee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d0f0      	beq.n	80030ce <USB_CoreReset+0x36>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	00030d40 	.word	0x00030d40

08003100 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7c1b      	ldrb	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d115      	bne.n	8003144 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800311c:	2202      	movs	r2, #2
 800311e:	2181      	movs	r1, #129	; 0x81
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f001 f82e 	bl	8004182 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800312c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003130:	2202      	movs	r2, #2
 8003132:	2101      	movs	r1, #1
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f001 f824 	bl	8004182 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8003142:	e012      	b.n	800316a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003144:	2340      	movs	r3, #64	; 0x40
 8003146:	2202      	movs	r2, #2
 8003148:	2181      	movs	r1, #129	; 0x81
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f001 f819 	bl	8004182 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003156:	2340      	movs	r3, #64	; 0x40
 8003158:	2202      	movs	r2, #2
 800315a:	2101      	movs	r1, #1
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f001 f810 	bl	8004182 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800316a:	2308      	movs	r3, #8
 800316c:	2203      	movs	r2, #3
 800316e:	2182      	movs	r1, #130	; 0x82
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f001 f806 	bl	8004182 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800317c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003180:	f001 fa4a 	bl	8004618 <malloc>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	e026      	b.n	80031ec <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80031a4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7c1b      	ldrb	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031d2:	2101      	movs	r1, #1
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f001 f85b 	bl	8004290 <USBD_LL_PrepareReceive>
 80031da:	e007      	b.n	80031ec <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031e2:	2340      	movs	r3, #64	; 0x40
 80031e4:	2101      	movs	r1, #1
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f001 f852 	bl	8004290 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003206:	2181      	movs	r1, #129	; 0x81
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 ffe0 	bl	80041ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003214:	2101      	movs	r1, #1
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 ffd9 	bl	80041ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003224:	2182      	movs	r1, #130	; 0x82
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 ffd1 	bl	80041ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00e      	beq.n	800325a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800324c:	4618      	mov	r0, r3
 800324e:	f001 f9eb 	bl	8004628 <free>
    pdev->pClassData = NULL;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003274:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800328a:	2b00      	cmp	r3, #0
 800328c:	d039      	beq.n	8003302 <USBD_CDC_Setup+0x9e>
 800328e:	2b20      	cmp	r3, #32
 8003290:	d17c      	bne.n	800338c <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	88db      	ldrh	r3, [r3, #6]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d029      	beq.n	80032ee <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	b25b      	sxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	da11      	bge.n	80032c8 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80032b0:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	88d2      	ldrh	r2, [r2, #6]
 80032b6:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80032b8:	6939      	ldr	r1, [r7, #16]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	88db      	ldrh	r3, [r3, #6]
 80032be:	461a      	mov	r2, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 faaf 	bl	8003824 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80032c6:	e068      	b.n	800339a <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	785a      	ldrb	r2, [r3, #1]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	88db      	ldrh	r3, [r3, #6]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80032de:	6939      	ldr	r1, [r7, #16]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	88db      	ldrh	r3, [r3, #6]
 80032e4:	461a      	mov	r2, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 fab8 	bl	800385c <USBD_CtlPrepareRx>
    break;
 80032ec:	e055      	b.n	800339a <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	7850      	ldrb	r0, [r2, #1]
 80032fa:	2200      	movs	r2, #0
 80032fc:	6839      	ldr	r1, [r7, #0]
 80032fe:	4798      	blx	r3
    break;
 8003300:	e04b      	b.n	800339a <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	2b0a      	cmp	r3, #10
 8003308:	d017      	beq.n	800333a <USBD_CDC_Setup+0xd6>
 800330a:	2b0b      	cmp	r3, #11
 800330c:	d029      	beq.n	8003362 <USBD_CDC_Setup+0xfe>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d133      	bne.n	800337a <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003318:	2b03      	cmp	r3, #3
 800331a:	d107      	bne.n	800332c <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800331c:	f107 030c 	add.w	r3, r7, #12
 8003320:	2202      	movs	r2, #2
 8003322:	4619      	mov	r1, r3
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fa7d 	bl	8003824 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800332a:	e02e      	b.n	800338a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800332c:	6839      	ldr	r1, [r7, #0]
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fa0d 	bl	800374e <USBD_CtlError>
			  ret = USBD_FAIL;
 8003334:	2302      	movs	r3, #2
 8003336:	75fb      	strb	r3, [r7, #23]
      break;
 8003338:	e027      	b.n	800338a <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003340:	2b03      	cmp	r3, #3
 8003342:	d107      	bne.n	8003354 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8003344:	f107 030f 	add.w	r3, r7, #15
 8003348:	2201      	movs	r2, #1
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fa69 	bl	8003824 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8003352:	e01a      	b.n	800338a <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8003354:	6839      	ldr	r1, [r7, #0]
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f9f9 	bl	800374e <USBD_CtlError>
			  ret = USBD_FAIL;
 800335c:	2302      	movs	r3, #2
 800335e:	75fb      	strb	r3, [r7, #23]
      break;
 8003360:	e013      	b.n	800338a <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8003368:	2b03      	cmp	r3, #3
 800336a:	d00d      	beq.n	8003388 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800336c:	6839      	ldr	r1, [r7, #0]
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f9ed 	bl	800374e <USBD_CtlError>
			  ret = USBD_FAIL;
 8003374:	2302      	movs	r3, #2
 8003376:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003378:	e006      	b.n	8003388 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800337a:	6839      	ldr	r1, [r7, #0]
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f9e6 	bl	800374e <USBD_CtlError>
      ret = USBD_FAIL;
 8003382:	2302      	movs	r3, #2
 8003384:	75fb      	strb	r3, [r7, #23]
      break;
 8003386:	e000      	b.n	800338a <USBD_CDC_Setup+0x126>
      break;
 8003388:	bf00      	nop
    }
    break;
 800338a:	e006      	b.n	800339a <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800338c:	6839      	ldr	r1, [r7, #0]
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f9dd 	bl	800374e <USBD_CtlError>
    ret = USBD_FAIL;
 8003394:	2302      	movs	r3, #2
 8003396:	75fb      	strb	r3, [r7, #23]
    break;
 8003398:	bf00      	nop
  }

  return ret;
 800339a:	7dfb      	ldrb	r3, [r7, #23]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80033b6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80033be:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d03a      	beq.n	8003440 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	331c      	adds	r3, #28
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d029      	beq.n	8003434 <USBD_CDC_DataIn+0x90>
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	331c      	adds	r3, #28
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	78f9      	ldrb	r1, [r7, #3]
 80033f4:	68b8      	ldr	r0, [r7, #8]
 80033f6:	460b      	mov	r3, r1
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	1a5b      	subs	r3, r3, r1
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4403      	add	r3, r0
 8003400:	3344      	adds	r3, #68	; 0x44
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fbb2 f1f3 	udiv	r1, r2, r3
 8003408:	fb03 f301 	mul.w	r3, r3, r1
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d110      	bne.n	8003434 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	331c      	adds	r3, #28
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8003426:	78f9      	ldrb	r1, [r7, #3]
 8003428:	2300      	movs	r3, #0
 800342a:	2200      	movs	r2, #0
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 ff0c 	bl	800424a <USBD_LL_Transmit>
 8003432:	e003      	b.n	800343c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e000      	b.n	8003442 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8003440:	2302      	movs	r3, #2
  }
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	460b      	mov	r3, r1
 8003454:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800345c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	4619      	mov	r1, r3
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 ff37 	bl	80042d6 <USBD_LL_GetRxDataSize>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800348e:	4611      	mov	r1, r2
 8003490:	4798      	blx	r3

    return USBD_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80034ae:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d015      	beq.n	80034e6 <USBD_CDC_EP0_RxReady+0x46>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80034c0:	2bff      	cmp	r3, #255	; 0xff
 80034c2:	d010      	beq.n	80034e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80034d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80034da:	b292      	uxth	r2, r2
 80034dc:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	22ff      	movs	r2, #255	; 0xff
 80034e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2243      	movs	r2, #67	; 0x43
 80034fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80034fe:	4b03      	ldr	r3, [pc, #12]	; (800350c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	20000090 	.word	0x20000090

08003510 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2243      	movs	r2, #67	; 0x43
 800351c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800351e:	4b03      	ldr	r3, [pc, #12]	; (800352c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	2000004c 	.word	0x2000004c

08003530 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2243      	movs	r2, #67	; 0x43
 800353c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800353e:	4b03      	ldr	r3, [pc, #12]	; (800354c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	200000d4 	.word	0x200000d4

08003550 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	220a      	movs	r2, #10
 800355c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800355e:	4b03      	ldr	r3, [pc, #12]	; (800356c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	20000008 	.word	0x20000008

08003570 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800357a:	2302      	movs	r3, #2
 800357c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800359e:	b480      	push	{r7}
 80035a0:	b087      	sub	sp, #28
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	4613      	mov	r3, r2
 80035aa:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80035b2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	371c      	adds	r7, #28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b085      	sub	sp, #20
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80035e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003608:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01c      	beq.n	800364e <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800361a:	2b00      	cmp	r3, #0
 800361c:	d115      	bne.n	800364a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800363c:	b29b      	uxth	r3, r3
 800363e:	2181      	movs	r1, #129	; 0x81
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fe02 	bl	800424a <USBD_LL_Transmit>

      return USBD_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	e002      	b.n	8003650 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800364e:	2302      	movs	r3, #2
  }
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003666:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800366e:	2b00      	cmp	r3, #0
 8003670:	d017      	beq.n	80036a2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	7c1b      	ldrb	r3, [r3, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003684:	2101      	movs	r1, #1
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fe02 	bl	8004290 <USBD_LL_PrepareReceive>
 800368c:	e007      	b.n	800369e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003694:	2340      	movs	r3, #64	; 0x40
 8003696:	2101      	movs	r1, #1
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fdf9 	bl	8004290 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e000      	b.n	80036a4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80036a2:	2302      	movs	r3, #2
  }
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80036c0:	2302      	movs	r3, #2
 80036c2:	e01a      	b.n	80036fa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	79fa      	ldrb	r2, [r7, #7]
 80036f0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fcde 	bl	80040b4 <USBD_LL_Init>

  return USBD_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
 8003722:	e001      	b.n	8003728 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003724:	2302      	movs	r3, #2
 8003726:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fd04 	bl	800414c <USBD_LL_Start>

  return USBD_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fd56 	bl	800420c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8003760:	2100      	movs	r1, #0
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fd52 	bl	800420c <USBD_LL_StallEP>
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d032      	beq.n	80037ec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f834 	bl	80037f4 <USBD_GetLen>
 800378c:	4603      	mov	r3, r0
 800378e:	3301      	adds	r3, #1
 8003790:	b29b      	uxth	r3, r3
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	75fa      	strb	r2, [r7, #23]
 80037a0:	461a      	mov	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4413      	add	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	7812      	ldrb	r2, [r2, #0]
 80037aa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	75fa      	strb	r2, [r7, #23]
 80037b2:	461a      	mov	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4413      	add	r3, r2
 80037b8:	2203      	movs	r2, #3
 80037ba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80037bc:	e012      	b.n	80037e4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	60fa      	str	r2, [r7, #12]
 80037c4:	7dfa      	ldrb	r2, [r7, #23]
 80037c6:	1c51      	adds	r1, r2, #1
 80037c8:	75f9      	strb	r1, [r7, #23]
 80037ca:	4611      	mov	r1, r2
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	440a      	add	r2, r1
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	75fa      	strb	r2, [r7, #23]
 80037da:	461a      	mov	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4413      	add	r3, r2
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1e8      	bne.n	80037be <USBD_GetString+0x4e>
    }
  }
}
 80037ec:	bf00      	nop
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8003800:	e005      	b.n	800380e <USBD_GetLen+0x1a>
    {
        len++;
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	3301      	adds	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
        buf++;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3301      	adds	r3, #1
 800380c:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f5      	bne.n	8003802 <USBD_GetLen+0xe>
    }

    return len;
 8003816:	7bfb      	ldrb	r3, [r7, #15]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2202      	movs	r2, #2
 8003836:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8003840:	88fa      	ldrh	r2, [r7, #6]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	2100      	movs	r1, #0
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fcfc 	bl	800424a <USBD_LL_Transmit>

  return USBD_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2203      	movs	r2, #3
 800386e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8003872:	88fa      	ldrh	r2, [r7, #6]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	2100      	movs	r1, #0
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fd01 	bl	8004290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800389c:	f7fc fe78 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038a0:	f000 f826 	bl	80038f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038a4:	f000 f8b8 	bl	8003a18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80038a8:	f000 f88c 	bl	80039c4 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80038ac:	f000 fac4 	bl	8003e38 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	sprintf(usb_buf,"USB CDC Test %d\r\n",count);
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <main+0x4c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	490c      	ldr	r1, [pc, #48]	; (80038e8 <main+0x50>)
 80038b8:	480c      	ldr	r0, [pc, #48]	; (80038ec <main+0x54>)
 80038ba:	f000 ff7d 	bl	80047b8 <siprintf>
	CDC_Transmit_FS(usb_buf,BUF_SIZE);
 80038be:	211e      	movs	r1, #30
 80038c0:	480a      	ldr	r0, [pc, #40]	; (80038ec <main+0x54>)
 80038c2:	f000 fb77 	bl	8003fb4 <CDC_Transmit_FS>
	HAL_Delay(1000);
 80038c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038ca:	f7fc fed3 	bl	8000674 <HAL_Delay>
	memset(usb_buf,0,BUF_SIZE);
 80038ce:	221e      	movs	r2, #30
 80038d0:	2100      	movs	r1, #0
 80038d2:	4806      	ldr	r0, [pc, #24]	; (80038ec <main+0x54>)
 80038d4:	f000 feb0 	bl	8004638 <memset>
	count++;
 80038d8:	4b02      	ldr	r3, [pc, #8]	; (80038e4 <main+0x4c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	4a01      	ldr	r2, [pc, #4]	; (80038e4 <main+0x4c>)
 80038e0:	6013      	str	r3, [r2, #0]
  {
 80038e2:	e7e5      	b.n	80038b0 <main+0x18>
 80038e4:	2000026c 	.word	0x2000026c
 80038e8:	08004e6c 	.word	0x08004e6c
 80038ec:	2000020c 	.word	0x2000020c

080038f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b094      	sub	sp, #80	; 0x50
 80038f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038f6:	f107 0320 	add.w	r3, r7, #32
 80038fa:	2230      	movs	r2, #48	; 0x30
 80038fc:	2100      	movs	r1, #0
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fe9a 	bl	8004638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003904:	f107 030c 	add.w	r3, r7, #12
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	605a      	str	r2, [r3, #4]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003914:	2300      	movs	r3, #0
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	4b28      	ldr	r3, [pc, #160]	; (80039bc <SystemClock_Config+0xcc>)
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	4a27      	ldr	r2, [pc, #156]	; (80039bc <SystemClock_Config+0xcc>)
 800391e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003922:	6413      	str	r3, [r2, #64]	; 0x40
 8003924:	4b25      	ldr	r3, [pc, #148]	; (80039bc <SystemClock_Config+0xcc>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003930:	2300      	movs	r3, #0
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <SystemClock_Config+0xd0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a21      	ldr	r2, [pc, #132]	; (80039c0 <SystemClock_Config+0xd0>)
 800393a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <SystemClock_Config+0xd0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800394c:	2301      	movs	r3, #1
 800394e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003950:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003956:	2302      	movs	r3, #2
 8003958:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800395a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003960:	2304      	movs	r3, #4
 8003962:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003964:	23a8      	movs	r3, #168	; 0xa8
 8003966:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003968:	2302      	movs	r3, #2
 800396a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800396c:	2307      	movs	r3, #7
 800396e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003970:	f107 0320 	add.w	r3, r7, #32
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd fcb3 	bl	80012e0 <HAL_RCC_OscConfig>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003980:	f000 f952 	bl	8003c28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003984:	230f      	movs	r3, #15
 8003986:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003988:	2302      	movs	r3, #2
 800398a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003990:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003994:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800399a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800399c:	f107 030c 	add.w	r3, r7, #12
 80039a0:	2105      	movs	r1, #5
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd fede 	bl	8001764 <HAL_RCC_ClockConfig>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80039ae:	f000 f93b 	bl	8003c28 <Error_Handler>
  }
}
 80039b2:	bf00      	nop
 80039b4:	3750      	adds	r7, #80	; 0x50
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40007000 	.word	0x40007000

080039c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <MX_USART3_UART_Init+0x4c>)
 80039ca:	4a12      	ldr	r2, [pc, #72]	; (8003a14 <MX_USART3_UART_Init+0x50>)
 80039cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <MX_USART3_UART_Init+0x4c>)
 80039d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80039d6:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <MX_USART3_UART_Init+0x4c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80039dc:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <MX_USART3_UART_Init+0x4c>)
 80039de:	2200      	movs	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80039e2:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <MX_USART3_UART_Init+0x4c>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <MX_USART3_UART_Init+0x4c>)
 80039ea:	220c      	movs	r2, #12
 80039ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <MX_USART3_UART_Init+0x4c>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <MX_USART3_UART_Init+0x4c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80039fa:	4805      	ldr	r0, [pc, #20]	; (8003a10 <MX_USART3_UART_Init+0x4c>)
 80039fc:	f7fe f8a0 	bl	8001b40 <HAL_UART_Init>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a06:	f000 f90f 	bl	8003c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	2000022c 	.word	0x2000022c
 8003a14:	40004800 	.word	0x40004800

08003a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08c      	sub	sp, #48	; 0x30
 8003a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1e:	f107 031c 	add.w	r3, r7, #28
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	605a      	str	r2, [r3, #4]
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	60da      	str	r2, [r3, #12]
 8003a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61bb      	str	r3, [r7, #24]
 8003a32:	4b77      	ldr	r3, [pc, #476]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	4a76      	ldr	r2, [pc, #472]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003a38:	f043 0304 	orr.w	r3, r3, #4
 8003a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3e:	4b74      	ldr	r3, [pc, #464]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	4b70      	ldr	r3, [pc, #448]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	4a6f      	ldr	r2, [pc, #444]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a58:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5a:	4b6d      	ldr	r3, [pc, #436]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	4b69      	ldr	r3, [pc, #420]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a68      	ldr	r2, [pc, #416]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b66      	ldr	r3, [pc, #408]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b62      	ldr	r3, [pc, #392]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a61      	ldr	r2, [pc, #388]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003a8c:	f043 0302 	orr.w	r3, r3, #2
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b5f      	ldr	r3, [pc, #380]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	4b5b      	ldr	r3, [pc, #364]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	4a5a      	ldr	r2, [pc, #360]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003aa8:	f043 0308 	orr.w	r3, r3, #8
 8003aac:	6313      	str	r3, [r2, #48]	; 0x30
 8003aae:	4b58      	ldr	r3, [pc, #352]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	4b54      	ldr	r3, [pc, #336]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	4a53      	ldr	r2, [pc, #332]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aca:	4b51      	ldr	r3, [pc, #324]	; (8003c10 <MX_GPIO_Init+0x1f8>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8003adc:	484d      	ldr	r0, [pc, #308]	; (8003c14 <MX_GPIO_Init+0x1fc>)
 8003ade:	f7fd f87b 	bl	8000bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2140      	movs	r1, #64	; 0x40
 8003ae6:	484c      	ldr	r0, [pc, #304]	; (8003c18 <MX_GPIO_Init+0x200>)
 8003ae8:	f7fd f876 	bl	8000bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003af2:	484a      	ldr	r0, [pc, #296]	; (8003c1c <MX_GPIO_Init+0x204>)
 8003af4:	f7fd f870 	bl	8000bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003afe:	4b48      	ldr	r3, [pc, #288]	; (8003c20 <MX_GPIO_Init+0x208>)
 8003b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003b06:	f107 031c 	add.w	r3, r7, #28
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4843      	ldr	r0, [pc, #268]	; (8003c1c <MX_GPIO_Init+0x204>)
 8003b0e:	f7fc feb9 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003b12:	2332      	movs	r3, #50	; 0x32
 8003b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b16:	2302      	movs	r3, #2
 8003b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b22:	230b      	movs	r3, #11
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b26:	f107 031c 	add.w	r3, r7, #28
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	483b      	ldr	r0, [pc, #236]	; (8003c1c <MX_GPIO_Init+0x204>)
 8003b2e:	f7fc fea9 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003b32:	2386      	movs	r3, #134	; 0x86
 8003b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b36:	2302      	movs	r3, #2
 8003b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b42:	230b      	movs	r3, #11
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b46:	f107 031c 	add.w	r3, r7, #28
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4835      	ldr	r0, [pc, #212]	; (8003c24 <MX_GPIO_Init+0x20c>)
 8003b4e:	f7fc fe99 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003b52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b60:	2303      	movs	r3, #3
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b64:	230b      	movs	r3, #11
 8003b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003b68:	f107 031c 	add.w	r3, r7, #28
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4829      	ldr	r0, [pc, #164]	; (8003c14 <MX_GPIO_Init+0x1fc>)
 8003b70:	f7fc fe88 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003b74:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8003b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b82:	2300      	movs	r3, #0
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b86:	f107 031c 	add.w	r3, r7, #28
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4821      	ldr	r0, [pc, #132]	; (8003c14 <MX_GPIO_Init+0x1fc>)
 8003b8e:	f7fc fe79 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8003b92:	2340      	movs	r3, #64	; 0x40
 8003b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b96:	2301      	movs	r3, #1
 8003b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003ba2:	f107 031c 	add.w	r3, r7, #28
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	481b      	ldr	r0, [pc, #108]	; (8003c18 <MX_GPIO_Init+0x200>)
 8003baa:	f7fc fe6b 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003bae:	2380      	movs	r3, #128	; 0x80
 8003bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003bba:	f107 031c 	add.w	r3, r7, #28
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4815      	ldr	r0, [pc, #84]	; (8003c18 <MX_GPIO_Init+0x200>)
 8003bc2:	f7fc fe5f 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8003bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8003bd8:	f107 031c 	add.w	r3, r7, #28
 8003bdc:	4619      	mov	r1, r3
 8003bde:	480f      	ldr	r0, [pc, #60]	; (8003c1c <MX_GPIO_Init+0x204>)
 8003be0:	f7fc fe50 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003be4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bea:	2302      	movs	r3, #2
 8003bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bf6:	230b      	movs	r3, #11
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bfa:	f107 031c 	add.w	r3, r7, #28
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4805      	ldr	r0, [pc, #20]	; (8003c18 <MX_GPIO_Init+0x200>)
 8003c02:	f7fc fe3f 	bl	8000884 <HAL_GPIO_Init>

}
 8003c06:	bf00      	nop
 8003c08:	3730      	adds	r7, #48	; 0x30
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40020400 	.word	0x40020400
 8003c18:	40021800 	.word	0x40021800
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	10110000 	.word	0x10110000
 8003c24:	40020000 	.word	0x40020000

08003c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_MspInit+0x4c>)
 8003c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c46:	4a0f      	ldr	r2, [pc, #60]	; (8003c84 <HAL_MspInit+0x4c>)
 8003c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <HAL_MspInit+0x4c>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	603b      	str	r3, [r7, #0]
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <HAL_MspInit+0x4c>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4a08      	ldr	r2, [pc, #32]	; (8003c84 <HAL_MspInit+0x4c>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_MspInit+0x4c>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	603b      	str	r3, [r7, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800

08003c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	; 0x28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a19      	ldr	r2, [pc, #100]	; (8003d0c <HAL_UART_MspInit+0x84>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d12c      	bne.n	8003d04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	4b18      	ldr	r3, [pc, #96]	; (8003d10 <HAL_UART_MspInit+0x88>)
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	4a17      	ldr	r2, [pc, #92]	; (8003d10 <HAL_UART_MspInit+0x88>)
 8003cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cba:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_UART_MspInit+0x88>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_UART_MspInit+0x88>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <HAL_UART_MspInit+0x88>)
 8003cd0:	f043 0308 	orr.w	r3, r3, #8
 8003cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd6:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <HAL_UART_MspInit+0x88>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003ce2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce8:	2302      	movs	r3, #2
 8003cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cec:	2301      	movs	r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003cf4:	2307      	movs	r3, #7
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4805      	ldr	r0, [pc, #20]	; (8003d14 <HAL_UART_MspInit+0x8c>)
 8003d00:	f7fc fdc0 	bl	8000884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003d04:	bf00      	nop
 8003d06:	3728      	adds	r7, #40	; 0x28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40004800 	.word	0x40004800
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40020c00 	.word	0x40020c00

08003d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d2a:	e7fe      	b.n	8003d2a <HardFault_Handler+0x4>

08003d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d30:	e7fe      	b.n	8003d30 <MemManage_Handler+0x4>

08003d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d36:	e7fe      	b.n	8003d36 <BusFault_Handler+0x4>

08003d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d3c:	e7fe      	b.n	8003d3c <UsageFault_Handler+0x4>

08003d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d42:	bf00      	nop
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d6c:	f7fc fc62 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <_sbrk+0x50>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d102      	bne.n	8003d8a <_sbrk+0x16>
		heap_end = &end;
 8003d84:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <_sbrk+0x50>)
 8003d86:	4a10      	ldr	r2, [pc, #64]	; (8003dc8 <_sbrk+0x54>)
 8003d88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <_sbrk+0x50>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <_sbrk+0x50>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4413      	add	r3, r2
 8003d98:	466a      	mov	r2, sp
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d907      	bls.n	8003dae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003d9e:	f000 fc11 	bl	80045c4 <__errno>
 8003da2:	4602      	mov	r2, r0
 8003da4:	230c      	movs	r3, #12
 8003da6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003da8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dac:	e006      	b.n	8003dbc <_sbrk+0x48>
	}

	heap_end += incr;
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <_sbrk+0x50>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	4a03      	ldr	r2, [pc, #12]	; (8003dc4 <_sbrk+0x50>)
 8003db8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003dba:	68fb      	ldr	r3, [r7, #12]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	200001fc 	.word	0x200001fc
 8003dc8:	20001b18 	.word	0x20001b18

08003dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003dd0:	4b16      	ldr	r3, [pc, #88]	; (8003e2c <SystemInit+0x60>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <SystemInit+0x60>)
 8003dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003de0:	4b13      	ldr	r3, [pc, #76]	; (8003e30 <SystemInit+0x64>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a12      	ldr	r2, [pc, #72]	; (8003e30 <SystemInit+0x64>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <SystemInit+0x64>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003df2:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <SystemInit+0x64>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <SystemInit+0x64>)
 8003df8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003e02:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <SystemInit+0x64>)
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <SystemInit+0x68>)
 8003e06:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <SystemInit+0x64>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <SystemInit+0x64>)
 8003e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <SystemInit+0x64>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <SystemInit+0x60>)
 8003e1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e20:	609a      	str	r2, [r3, #8]
#endif
}
 8003e22:	bf00      	nop
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000ed00 	.word	0xe000ed00
 8003e30:	40023800 	.word	0x40023800
 8003e34:	24003010 	.word	0x24003010

08003e38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	4912      	ldr	r1, [pc, #72]	; (8003e88 <MX_USB_DEVICE_Init+0x50>)
 8003e40:	4812      	ldr	r0, [pc, #72]	; (8003e8c <MX_USB_DEVICE_Init+0x54>)
 8003e42:	f7ff fc33 	bl	80036ac <USBD_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8003e4c:	f7ff feec 	bl	8003c28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8003e50:	490f      	ldr	r1, [pc, #60]	; (8003e90 <MX_USB_DEVICE_Init+0x58>)
 8003e52:	480e      	ldr	r0, [pc, #56]	; (8003e8c <MX_USB_DEVICE_Init+0x54>)
 8003e54:	f7ff fc55 	bl	8003702 <USBD_RegisterClass>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8003e5e:	f7ff fee3 	bl	8003c28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8003e62:	490c      	ldr	r1, [pc, #48]	; (8003e94 <MX_USB_DEVICE_Init+0x5c>)
 8003e64:	4809      	ldr	r0, [pc, #36]	; (8003e8c <MX_USB_DEVICE_Init+0x54>)
 8003e66:	f7ff fb83 	bl	8003570 <USBD_CDC_RegisterInterface>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8003e70:	f7ff feda 	bl	8003c28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003e74:	4805      	ldr	r0, [pc, #20]	; (8003e8c <MX_USB_DEVICE_Init+0x54>)
 8003e76:	f7ff fc5e 	bl	8003736 <USBD_Start>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8003e80:	f7ff fed2 	bl	8003c28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003e84:	bf00      	nop
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	2000012c 	.word	0x2000012c
 8003e8c:	20000270 	.word	0x20000270
 8003e90:	20000014 	.word	0x20000014
 8003e94:	2000011c 	.word	0x2000011c

08003e98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	4905      	ldr	r1, [pc, #20]	; (8003eb4 <CDC_Init_FS+0x1c>)
 8003ea0:	4805      	ldr	r0, [pc, #20]	; (8003eb8 <CDC_Init_FS+0x20>)
 8003ea2:	f7ff fb7c 	bl	800359e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003ea6:	4905      	ldr	r1, [pc, #20]	; (8003ebc <CDC_Init_FS+0x24>)
 8003ea8:	4803      	ldr	r0, [pc, #12]	; (8003eb8 <CDC_Init_FS+0x20>)
 8003eaa:	f7ff fb92 	bl	80035d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8003eae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000d0c 	.word	0x20000d0c
 8003eb8:	20000270 	.word	0x20000270
 8003ebc:	2000050c 	.word	0x2000050c

08003ec0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8003ec4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	6039      	str	r1, [r7, #0]
 8003eda:	71fb      	strb	r3, [r7, #7]
 8003edc:	4613      	mov	r3, r2
 8003ede:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	2b23      	cmp	r3, #35	; 0x23
 8003ee4:	d84a      	bhi.n	8003f7c <CDC_Control_FS+0xac>
 8003ee6:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <CDC_Control_FS+0x1c>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f7d 	.word	0x08003f7d
 8003ef0:	08003f7d 	.word	0x08003f7d
 8003ef4:	08003f7d 	.word	0x08003f7d
 8003ef8:	08003f7d 	.word	0x08003f7d
 8003efc:	08003f7d 	.word	0x08003f7d
 8003f00:	08003f7d 	.word	0x08003f7d
 8003f04:	08003f7d 	.word	0x08003f7d
 8003f08:	08003f7d 	.word	0x08003f7d
 8003f0c:	08003f7d 	.word	0x08003f7d
 8003f10:	08003f7d 	.word	0x08003f7d
 8003f14:	08003f7d 	.word	0x08003f7d
 8003f18:	08003f7d 	.word	0x08003f7d
 8003f1c:	08003f7d 	.word	0x08003f7d
 8003f20:	08003f7d 	.word	0x08003f7d
 8003f24:	08003f7d 	.word	0x08003f7d
 8003f28:	08003f7d 	.word	0x08003f7d
 8003f2c:	08003f7d 	.word	0x08003f7d
 8003f30:	08003f7d 	.word	0x08003f7d
 8003f34:	08003f7d 	.word	0x08003f7d
 8003f38:	08003f7d 	.word	0x08003f7d
 8003f3c:	08003f7d 	.word	0x08003f7d
 8003f40:	08003f7d 	.word	0x08003f7d
 8003f44:	08003f7d 	.word	0x08003f7d
 8003f48:	08003f7d 	.word	0x08003f7d
 8003f4c:	08003f7d 	.word	0x08003f7d
 8003f50:	08003f7d 	.word	0x08003f7d
 8003f54:	08003f7d 	.word	0x08003f7d
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003f7d 	.word	0x08003f7d
 8003f60:	08003f7d 	.word	0x08003f7d
 8003f64:	08003f7d 	.word	0x08003f7d
 8003f68:	08003f7d 	.word	0x08003f7d
 8003f6c:	08003f7d 	.word	0x08003f7d
 8003f70:	08003f7d 	.word	0x08003f7d
 8003f74:	08003f7d 	.word	0x08003f7d
 8003f78:	08003f7d 	.word	0x08003f7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8003f7c:	bf00      	nop
  }

  return (USBD_OK);
 8003f7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4805      	ldr	r0, [pc, #20]	; (8003fb0 <CDC_Receive_FS+0x24>)
 8003f9a:	f7ff fb1a 	bl	80035d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003f9e:	4804      	ldr	r0, [pc, #16]	; (8003fb0 <CDC_Receive_FS+0x24>)
 8003fa0:	f7ff fb5a 	bl	8003658 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8003fa4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000270 	.word	0x20000270

08003fb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003fc4:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <CDC_Transmit_FS+0x48>)
 8003fc6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8003fca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e00b      	b.n	8003ff2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003fda:	887b      	ldrh	r3, [r7, #2]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4806      	ldr	r0, [pc, #24]	; (8003ffc <CDC_Transmit_FS+0x48>)
 8003fe2:	f7ff fadc 	bl	800359e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003fe6:	4805      	ldr	r0, [pc, #20]	; (8003ffc <CDC_Transmit_FS+0x48>)
 8003fe8:	f7ff fb07 	bl	80035fa <USBD_CDC_TransmitPacket>
 8003fec:	4603      	mov	r3, r0
 8003fee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000270 	.word	0x20000270

08004000 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	; 0x28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004008:	f107 0314 	add.w	r3, r7, #20
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	60da      	str	r2, [r3, #12]
 8004016:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004020:	d13f      	bne.n	80040a2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	4b21      	ldr	r3, [pc, #132]	; (80040ac <HAL_PCD_MspInit+0xac>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a20      	ldr	r2, [pc, #128]	; (80040ac <HAL_PCD_MspInit+0xac>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <HAL_PCD_MspInit+0xac>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	613b      	str	r3, [r7, #16]
 800403c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800403e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8004042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004044:	2302      	movs	r3, #2
 8004046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404c:	2303      	movs	r3, #3
 800404e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004050:	230a      	movs	r3, #10
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004054:	f107 0314 	add.w	r3, r7, #20
 8004058:	4619      	mov	r1, r3
 800405a:	4815      	ldr	r0, [pc, #84]	; (80040b0 <HAL_PCD_MspInit+0xb0>)
 800405c:	f7fc fc12 	bl	8000884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004066:	2300      	movs	r3, #0
 8004068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800406e:	f107 0314 	add.w	r3, r7, #20
 8004072:	4619      	mov	r1, r3
 8004074:	480e      	ldr	r0, [pc, #56]	; (80040b0 <HAL_PCD_MspInit+0xb0>)
 8004076:	f7fc fc05 	bl	8000884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <HAL_PCD_MspInit+0xac>)
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	4a0b      	ldr	r2, [pc, #44]	; (80040ac <HAL_PCD_MspInit+0xac>)
 8004080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004084:	6353      	str	r3, [r2, #52]	; 0x34
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <HAL_PCD_MspInit+0xac>)
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	4a07      	ldr	r2, [pc, #28]	; (80040ac <HAL_PCD_MspInit+0xac>)
 8004090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004094:	6453      	str	r3, [r2, #68]	; 0x44
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_PCD_MspInit+0xac>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80040a2:	bf00      	nop
 80040a4:	3728      	adds	r7, #40	; 0x28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40020000 	.word	0x40020000

080040b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d13c      	bne.n	800413e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80040c4:	4a20      	ldr	r2, [pc, #128]	; (8004148 <USBD_LL_Init+0x94>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <USBD_LL_Init+0x94>)
 80040d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80040d4:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <USBD_LL_Init+0x94>)
 80040d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80040da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80040dc:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <USBD_LL_Init+0x94>)
 80040de:	2204      	movs	r2, #4
 80040e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80040e2:	4b19      	ldr	r3, [pc, #100]	; (8004148 <USBD_LL_Init+0x94>)
 80040e4:	2202      	movs	r2, #2
 80040e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80040e8:	4b17      	ldr	r3, [pc, #92]	; (8004148 <USBD_LL_Init+0x94>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80040ee:	4b16      	ldr	r3, [pc, #88]	; (8004148 <USBD_LL_Init+0x94>)
 80040f0:	2202      	movs	r2, #2
 80040f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80040f4:	4b14      	ldr	r3, [pc, #80]	; (8004148 <USBD_LL_Init+0x94>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80040fa:	4b13      	ldr	r3, [pc, #76]	; (8004148 <USBD_LL_Init+0x94>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <USBD_LL_Init+0x94>)
 8004102:	2200      	movs	r2, #0
 8004104:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <USBD_LL_Init+0x94>)
 8004108:	2201      	movs	r2, #1
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800410c:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <USBD_LL_Init+0x94>)
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004112:	480d      	ldr	r0, [pc, #52]	; (8004148 <USBD_LL_Init+0x94>)
 8004114:	f7fc fd79 	bl	8000c0a <HAL_PCD_Init>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800411e:	f7ff fd83 	bl	8003c28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004122:	2180      	movs	r1, #128	; 0x80
 8004124:	4808      	ldr	r0, [pc, #32]	; (8004148 <USBD_LL_Init+0x94>)
 8004126:	f7fd f8ca 	bl	80012be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800412a:	2240      	movs	r2, #64	; 0x40
 800412c:	2100      	movs	r1, #0
 800412e:	4806      	ldr	r0, [pc, #24]	; (8004148 <USBD_LL_Init+0x94>)
 8004130:	f7fd f87e 	bl	8001230 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004134:	2280      	movs	r2, #128	; 0x80
 8004136:	2101      	movs	r1, #1
 8004138:	4803      	ldr	r0, [pc, #12]	; (8004148 <USBD_LL_Init+0x94>)
 800413a:	f7fd f879 	bl	8001230 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	2000150c 	.word	0x2000150c

0800414c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8004162:	4618      	mov	r0, r3
 8004164:	f7fc fe6e 	bl	8000e44 <HAL_PCD_Start>
 8004168:	4603      	mov	r3, r0
 800416a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f8c4 	bl	80042fc <USBD_Get_USB_Status>
 8004174:	4603      	mov	r3, r0
 8004176:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8004178:	7bbb      	ldrb	r3, [r7, #14]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	4608      	mov	r0, r1
 800418c:	4611      	mov	r1, r2
 800418e:	461a      	mov	r2, r3
 8004190:	4603      	mov	r3, r0
 8004192:	70fb      	strb	r3, [r7, #3]
 8004194:	460b      	mov	r3, r1
 8004196:	70bb      	strb	r3, [r7, #2]
 8004198:	4613      	mov	r3, r2
 800419a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80041aa:	78bb      	ldrb	r3, [r7, #2]
 80041ac:	883a      	ldrh	r2, [r7, #0]
 80041ae:	78f9      	ldrb	r1, [r7, #3]
 80041b0:	f7fc fe7b 	bl	8000eaa <HAL_PCD_EP_Open>
 80041b4:	4603      	mov	r3, r0
 80041b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f89e 	bl	80042fc <USBD_Get_USB_Status>
 80041c0:	4603      	mov	r3, r0
 80041c2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80041c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fc fec4 	bl	8000f7a <HAL_PCD_EP_Close>
 80041f2:	4603      	mov	r3, r0
 80041f4:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 f87f 	bl	80042fc <USBD_Get_USB_Status>
 80041fe:	4603      	mov	r3, r0
 8004200:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8004202:	7bbb      	ldrb	r3, [r7, #14]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f7fc ff9c 	bl	8001168 <HAL_PCD_EP_SetStall>
 8004230:	4603      	mov	r3, r0
 8004232:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f860 	bl	80042fc <USBD_Get_USB_Status>
 800423c:	4603      	mov	r3, r0
 800423e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8004240:	7bbb      	ldrb	r3, [r7, #14]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b086      	sub	sp, #24
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	461a      	mov	r2, r3
 8004256:	460b      	mov	r3, r1
 8004258:	72fb      	strb	r3, [r7, #11]
 800425a:	4613      	mov	r3, r2
 800425c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800426c:	893b      	ldrh	r3, [r7, #8]
 800426e:	7af9      	ldrb	r1, [r7, #11]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	f7fc ff2f 	bl	80010d4 <HAL_PCD_EP_Transmit>
 8004276:	4603      	mov	r3, r0
 8004278:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800427a:	7dfb      	ldrb	r3, [r7, #23]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 f83d 	bl	80042fc <USBD_Get_USB_Status>
 8004282:	4603      	mov	r3, r0
 8004284:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8004286:	7dbb      	ldrb	r3, [r7, #22]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	461a      	mov	r2, r3
 800429c:	460b      	mov	r3, r1
 800429e:	72fb      	strb	r3, [r7, #11]
 80042a0:	4613      	mov	r3, r2
 80042a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80042b2:	893b      	ldrh	r3, [r7, #8]
 80042b4:	7af9      	ldrb	r1, [r7, #11]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	f7fc fea9 	bl	800100e <HAL_PCD_EP_Receive>
 80042bc:	4603      	mov	r3, r0
 80042be:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f81a 	bl	80042fc <USBD_Get_USB_Status>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80042cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	460b      	mov	r3, r1
 80042e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	4611      	mov	r1, r2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc fed9 	bl	80010a4 <HAL_PCD_EP_GetRxCount>
 80042f2:	4603      	mov	r3, r0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	2b03      	cmp	r3, #3
 800430e:	d817      	bhi.n	8004340 <USBD_Get_USB_Status+0x44>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <USBD_Get_USB_Status+0x1c>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	08004329 	.word	0x08004329
 800431c:	0800432f 	.word	0x0800432f
 8004320:	08004335 	.word	0x08004335
 8004324:	0800433b 	.word	0x0800433b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	73fb      	strb	r3, [r7, #15]
    break;
 800432c:	e00b      	b.n	8004346 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800432e:	2302      	movs	r3, #2
 8004330:	73fb      	strb	r3, [r7, #15]
    break;
 8004332:	e008      	b.n	8004346 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
    break;
 8004338:	e005      	b.n	8004346 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800433a:	2302      	movs	r3, #2
 800433c:	73fb      	strb	r3, [r7, #15]
    break;
 800433e:	e002      	b.n	8004346 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8004340:	2302      	movs	r3, #2
 8004342:	73fb      	strb	r3, [r7, #15]
    break;
 8004344:	bf00      	nop
  }
  return usb_status;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	6039      	str	r1, [r7, #0]
 800435e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2212      	movs	r2, #18
 8004364:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8004366:	4b03      	ldr	r3, [pc, #12]	; (8004374 <USBD_FS_DeviceDescriptor+0x20>)
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	20000148 	.word	0x20000148

08004378 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	6039      	str	r1, [r7, #0]
 8004382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2204      	movs	r2, #4
 8004388:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800438a:	4b03      	ldr	r3, [pc, #12]	; (8004398 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	2000015c 	.word	0x2000015c

0800439c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	6039      	str	r1, [r7, #0]
 80043a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d105      	bne.n	80043ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	4907      	ldr	r1, [pc, #28]	; (80043d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80043b2:	4808      	ldr	r0, [pc, #32]	; (80043d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80043b4:	f7ff f9dc 	bl	8003770 <USBD_GetString>
 80043b8:	e004      	b.n	80043c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	4904      	ldr	r1, [pc, #16]	; (80043d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80043be:	4805      	ldr	r0, [pc, #20]	; (80043d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80043c0:	f7ff f9d6 	bl	8003770 <USBD_GetString>
  }
  return USBD_StrDesc;
 80043c4:	4b02      	ldr	r3, [pc, #8]	; (80043d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20001914 	.word	0x20001914
 80043d4:	08004e80 	.word	0x08004e80

080043d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	6039      	str	r1, [r7, #0]
 80043e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	4904      	ldr	r1, [pc, #16]	; (80043f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80043e8:	4804      	ldr	r0, [pc, #16]	; (80043fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80043ea:	f7ff f9c1 	bl	8003770 <USBD_GetString>
  return USBD_StrDesc;
 80043ee:	4b02      	ldr	r3, [pc, #8]	; (80043f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20001914 	.word	0x20001914
 80043fc:	08004e98 	.word	0x08004e98

08004400 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	6039      	str	r1, [r7, #0]
 800440a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	221a      	movs	r2, #26
 8004410:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8004412:	f000 f843 	bl	800449c <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 8004416:	4b02      	ldr	r3, [pc, #8]	; (8004420 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000160 	.word	0x20000160

08004424 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	6039      	str	r1, [r7, #0]
 800442e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d105      	bne.n	8004442 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	4907      	ldr	r1, [pc, #28]	; (8004458 <USBD_FS_ConfigStrDescriptor+0x34>)
 800443a:	4808      	ldr	r0, [pc, #32]	; (800445c <USBD_FS_ConfigStrDescriptor+0x38>)
 800443c:	f7ff f998 	bl	8003770 <USBD_GetString>
 8004440:	e004      	b.n	800444c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	4904      	ldr	r1, [pc, #16]	; (8004458 <USBD_FS_ConfigStrDescriptor+0x34>)
 8004446:	4805      	ldr	r0, [pc, #20]	; (800445c <USBD_FS_ConfigStrDescriptor+0x38>)
 8004448:	f7ff f992 	bl	8003770 <USBD_GetString>
  }
  return USBD_StrDesc;
 800444c:	4b02      	ldr	r3, [pc, #8]	; (8004458 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	20001914 	.word	0x20001914
 800445c:	08004eac 	.word	0x08004eac

08004460 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	6039      	str	r1, [r7, #0]
 800446a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d105      	bne.n	800447e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	4907      	ldr	r1, [pc, #28]	; (8004494 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004476:	4808      	ldr	r0, [pc, #32]	; (8004498 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004478:	f7ff f97a 	bl	8003770 <USBD_GetString>
 800447c:	e004      	b.n	8004488 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	4904      	ldr	r1, [pc, #16]	; (8004494 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8004482:	4805      	ldr	r0, [pc, #20]	; (8004498 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8004484:	f7ff f974 	bl	8003770 <USBD_GetString>
  }
  return USBD_StrDesc;
 8004488:	4b02      	ldr	r3, [pc, #8]	; (8004494 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20001914 	.word	0x20001914
 8004498:	08004eb8 	.word	0x08004eb8

0800449c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80044a2:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <Get_SerialNum+0x44>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80044a8:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <Get_SerialNum+0x48>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80044ae:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <Get_SerialNum+0x4c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4413      	add	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80044c2:	2208      	movs	r2, #8
 80044c4:	4909      	ldr	r1, [pc, #36]	; (80044ec <Get_SerialNum+0x50>)
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f814 	bl	80044f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80044cc:	2204      	movs	r2, #4
 80044ce:	4908      	ldr	r1, [pc, #32]	; (80044f0 <Get_SerialNum+0x54>)
 80044d0:	68b8      	ldr	r0, [r7, #8]
 80044d2:	f000 f80f 	bl	80044f4 <IntToUnicode>
  }
}
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	1fff7a10 	.word	0x1fff7a10
 80044e4:	1fff7a14 	.word	0x1fff7a14
 80044e8:	1fff7a18 	.word	0x1fff7a18
 80044ec:	20000162 	.word	0x20000162
 80044f0:	20000172 	.word	0x20000172

080044f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8004506:	2300      	movs	r3, #0
 8004508:	75fb      	strb	r3, [r7, #23]
 800450a:	e027      	b.n	800455c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	0f1b      	lsrs	r3, r3, #28
 8004510:	2b09      	cmp	r3, #9
 8004512:	d80b      	bhi.n	800452c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	0f1b      	lsrs	r3, r3, #28
 8004518:	b2da      	uxtb	r2, r3
 800451a:	7dfb      	ldrb	r3, [r7, #23]
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4619      	mov	r1, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	440b      	add	r3, r1
 8004524:	3230      	adds	r2, #48	; 0x30
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e00a      	b.n	8004542 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	0f1b      	lsrs	r3, r3, #28
 8004530:	b2da      	uxtb	r2, r3
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4619      	mov	r1, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	440b      	add	r3, r1
 800453c:	3237      	adds	r2, #55	; 0x37
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	3301      	adds	r3, #1
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	4413      	add	r3, r2
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	3301      	adds	r3, #1
 800455a:	75fb      	strb	r3, [r7, #23]
 800455c:	7dfa      	ldrb	r2, [r7, #23]
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	429a      	cmp	r2, r3
 8004562:	d3d3      	bcc.n	800450c <IntToUnicode+0x18>
  }
}
 8004564:	bf00      	nop
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045a8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004574:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004576:	e003      	b.n	8004580 <LoopCopyDataInit>

08004578 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004578:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800457a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800457c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800457e:	3104      	adds	r1, #4

08004580 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004580:	480b      	ldr	r0, [pc, #44]	; (80045b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004582:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004584:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004586:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004588:	d3f6      	bcc.n	8004578 <CopyDataInit>
  ldr  r2, =_sbss
 800458a:	4a0b      	ldr	r2, [pc, #44]	; (80045b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800458c:	e002      	b.n	8004594 <LoopFillZerobss>

0800458e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800458e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004590:	f842 3b04 	str.w	r3, [r2], #4

08004594 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004596:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004598:	d3f9      	bcc.n	800458e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800459a:	f7ff fc17 	bl	8003dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800459e:	f000 f817 	bl	80045d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045a2:	f7ff f979 	bl	8003898 <main>
  bx  lr    
 80045a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80045a8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80045ac:	08004f24 	.word	0x08004f24
  ldr  r0, =_sdata
 80045b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80045b4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80045b8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80045bc:	20001b18 	.word	0x20001b18

080045c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045c0:	e7fe      	b.n	80045c0 <ADC_IRQHandler>
	...

080045c4 <__errno>:
 80045c4:	4b01      	ldr	r3, [pc, #4]	; (80045cc <__errno+0x8>)
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	2000017c 	.word	0x2000017c

080045d0 <__libc_init_array>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	4e0d      	ldr	r6, [pc, #52]	; (8004608 <__libc_init_array+0x38>)
 80045d4:	4c0d      	ldr	r4, [pc, #52]	; (800460c <__libc_init_array+0x3c>)
 80045d6:	1ba4      	subs	r4, r4, r6
 80045d8:	10a4      	asrs	r4, r4, #2
 80045da:	2500      	movs	r5, #0
 80045dc:	42a5      	cmp	r5, r4
 80045de:	d109      	bne.n	80045f4 <__libc_init_array+0x24>
 80045e0:	4e0b      	ldr	r6, [pc, #44]	; (8004610 <__libc_init_array+0x40>)
 80045e2:	4c0c      	ldr	r4, [pc, #48]	; (8004614 <__libc_init_array+0x44>)
 80045e4:	f000 fc36 	bl	8004e54 <_init>
 80045e8:	1ba4      	subs	r4, r4, r6
 80045ea:	10a4      	asrs	r4, r4, #2
 80045ec:	2500      	movs	r5, #0
 80045ee:	42a5      	cmp	r5, r4
 80045f0:	d105      	bne.n	80045fe <__libc_init_array+0x2e>
 80045f2:	bd70      	pop	{r4, r5, r6, pc}
 80045f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045f8:	4798      	blx	r3
 80045fa:	3501      	adds	r5, #1
 80045fc:	e7ee      	b.n	80045dc <__libc_init_array+0xc>
 80045fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004602:	4798      	blx	r3
 8004604:	3501      	adds	r5, #1
 8004606:	e7f2      	b.n	80045ee <__libc_init_array+0x1e>
 8004608:	08004f1c 	.word	0x08004f1c
 800460c:	08004f1c 	.word	0x08004f1c
 8004610:	08004f1c 	.word	0x08004f1c
 8004614:	08004f20 	.word	0x08004f20

08004618 <malloc>:
 8004618:	4b02      	ldr	r3, [pc, #8]	; (8004624 <malloc+0xc>)
 800461a:	4601      	mov	r1, r0
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	f000 b861 	b.w	80046e4 <_malloc_r>
 8004622:	bf00      	nop
 8004624:	2000017c 	.word	0x2000017c

08004628 <free>:
 8004628:	4b02      	ldr	r3, [pc, #8]	; (8004634 <free+0xc>)
 800462a:	4601      	mov	r1, r0
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	f000 b80b 	b.w	8004648 <_free_r>
 8004632:	bf00      	nop
 8004634:	2000017c 	.word	0x2000017c

08004638 <memset>:
 8004638:	4402      	add	r2, r0
 800463a:	4603      	mov	r3, r0
 800463c:	4293      	cmp	r3, r2
 800463e:	d100      	bne.n	8004642 <memset+0xa>
 8004640:	4770      	bx	lr
 8004642:	f803 1b01 	strb.w	r1, [r3], #1
 8004646:	e7f9      	b.n	800463c <memset+0x4>

08004648 <_free_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4605      	mov	r5, r0
 800464c:	2900      	cmp	r1, #0
 800464e:	d045      	beq.n	80046dc <_free_r+0x94>
 8004650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004654:	1f0c      	subs	r4, r1, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	bfb8      	it	lt
 800465a:	18e4      	addlt	r4, r4, r3
 800465c:	f000 f8cc 	bl	80047f8 <__malloc_lock>
 8004660:	4a1f      	ldr	r2, [pc, #124]	; (80046e0 <_free_r+0x98>)
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	4610      	mov	r0, r2
 8004666:	b933      	cbnz	r3, 8004676 <_free_r+0x2e>
 8004668:	6063      	str	r3, [r4, #4]
 800466a:	6014      	str	r4, [r2, #0]
 800466c:	4628      	mov	r0, r5
 800466e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004672:	f000 b8c2 	b.w	80047fa <__malloc_unlock>
 8004676:	42a3      	cmp	r3, r4
 8004678:	d90c      	bls.n	8004694 <_free_r+0x4c>
 800467a:	6821      	ldr	r1, [r4, #0]
 800467c:	1862      	adds	r2, r4, r1
 800467e:	4293      	cmp	r3, r2
 8004680:	bf04      	itt	eq
 8004682:	681a      	ldreq	r2, [r3, #0]
 8004684:	685b      	ldreq	r3, [r3, #4]
 8004686:	6063      	str	r3, [r4, #4]
 8004688:	bf04      	itt	eq
 800468a:	1852      	addeq	r2, r2, r1
 800468c:	6022      	streq	r2, [r4, #0]
 800468e:	6004      	str	r4, [r0, #0]
 8004690:	e7ec      	b.n	800466c <_free_r+0x24>
 8004692:	4613      	mov	r3, r2
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	b10a      	cbz	r2, 800469c <_free_r+0x54>
 8004698:	42a2      	cmp	r2, r4
 800469a:	d9fa      	bls.n	8004692 <_free_r+0x4a>
 800469c:	6819      	ldr	r1, [r3, #0]
 800469e:	1858      	adds	r0, r3, r1
 80046a0:	42a0      	cmp	r0, r4
 80046a2:	d10b      	bne.n	80046bc <_free_r+0x74>
 80046a4:	6820      	ldr	r0, [r4, #0]
 80046a6:	4401      	add	r1, r0
 80046a8:	1858      	adds	r0, r3, r1
 80046aa:	4282      	cmp	r2, r0
 80046ac:	6019      	str	r1, [r3, #0]
 80046ae:	d1dd      	bne.n	800466c <_free_r+0x24>
 80046b0:	6810      	ldr	r0, [r2, #0]
 80046b2:	6852      	ldr	r2, [r2, #4]
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	4401      	add	r1, r0
 80046b8:	6019      	str	r1, [r3, #0]
 80046ba:	e7d7      	b.n	800466c <_free_r+0x24>
 80046bc:	d902      	bls.n	80046c4 <_free_r+0x7c>
 80046be:	230c      	movs	r3, #12
 80046c0:	602b      	str	r3, [r5, #0]
 80046c2:	e7d3      	b.n	800466c <_free_r+0x24>
 80046c4:	6820      	ldr	r0, [r4, #0]
 80046c6:	1821      	adds	r1, r4, r0
 80046c8:	428a      	cmp	r2, r1
 80046ca:	bf04      	itt	eq
 80046cc:	6811      	ldreq	r1, [r2, #0]
 80046ce:	6852      	ldreq	r2, [r2, #4]
 80046d0:	6062      	str	r2, [r4, #4]
 80046d2:	bf04      	itt	eq
 80046d4:	1809      	addeq	r1, r1, r0
 80046d6:	6021      	streq	r1, [r4, #0]
 80046d8:	605c      	str	r4, [r3, #4]
 80046da:	e7c7      	b.n	800466c <_free_r+0x24>
 80046dc:	bd38      	pop	{r3, r4, r5, pc}
 80046de:	bf00      	nop
 80046e0:	20000200 	.word	0x20000200

080046e4 <_malloc_r>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	1ccd      	adds	r5, r1, #3
 80046e8:	f025 0503 	bic.w	r5, r5, #3
 80046ec:	3508      	adds	r5, #8
 80046ee:	2d0c      	cmp	r5, #12
 80046f0:	bf38      	it	cc
 80046f2:	250c      	movcc	r5, #12
 80046f4:	2d00      	cmp	r5, #0
 80046f6:	4606      	mov	r6, r0
 80046f8:	db01      	blt.n	80046fe <_malloc_r+0x1a>
 80046fa:	42a9      	cmp	r1, r5
 80046fc:	d903      	bls.n	8004706 <_malloc_r+0x22>
 80046fe:	230c      	movs	r3, #12
 8004700:	6033      	str	r3, [r6, #0]
 8004702:	2000      	movs	r0, #0
 8004704:	bd70      	pop	{r4, r5, r6, pc}
 8004706:	f000 f877 	bl	80047f8 <__malloc_lock>
 800470a:	4a21      	ldr	r2, [pc, #132]	; (8004790 <_malloc_r+0xac>)
 800470c:	6814      	ldr	r4, [r2, #0]
 800470e:	4621      	mov	r1, r4
 8004710:	b991      	cbnz	r1, 8004738 <_malloc_r+0x54>
 8004712:	4c20      	ldr	r4, [pc, #128]	; (8004794 <_malloc_r+0xb0>)
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	b91b      	cbnz	r3, 8004720 <_malloc_r+0x3c>
 8004718:	4630      	mov	r0, r6
 800471a:	f000 f83d 	bl	8004798 <_sbrk_r>
 800471e:	6020      	str	r0, [r4, #0]
 8004720:	4629      	mov	r1, r5
 8004722:	4630      	mov	r0, r6
 8004724:	f000 f838 	bl	8004798 <_sbrk_r>
 8004728:	1c43      	adds	r3, r0, #1
 800472a:	d124      	bne.n	8004776 <_malloc_r+0x92>
 800472c:	230c      	movs	r3, #12
 800472e:	6033      	str	r3, [r6, #0]
 8004730:	4630      	mov	r0, r6
 8004732:	f000 f862 	bl	80047fa <__malloc_unlock>
 8004736:	e7e4      	b.n	8004702 <_malloc_r+0x1e>
 8004738:	680b      	ldr	r3, [r1, #0]
 800473a:	1b5b      	subs	r3, r3, r5
 800473c:	d418      	bmi.n	8004770 <_malloc_r+0x8c>
 800473e:	2b0b      	cmp	r3, #11
 8004740:	d90f      	bls.n	8004762 <_malloc_r+0x7e>
 8004742:	600b      	str	r3, [r1, #0]
 8004744:	50cd      	str	r5, [r1, r3]
 8004746:	18cc      	adds	r4, r1, r3
 8004748:	4630      	mov	r0, r6
 800474a:	f000 f856 	bl	80047fa <__malloc_unlock>
 800474e:	f104 000b 	add.w	r0, r4, #11
 8004752:	1d23      	adds	r3, r4, #4
 8004754:	f020 0007 	bic.w	r0, r0, #7
 8004758:	1ac3      	subs	r3, r0, r3
 800475a:	d0d3      	beq.n	8004704 <_malloc_r+0x20>
 800475c:	425a      	negs	r2, r3
 800475e:	50e2      	str	r2, [r4, r3]
 8004760:	e7d0      	b.n	8004704 <_malloc_r+0x20>
 8004762:	428c      	cmp	r4, r1
 8004764:	684b      	ldr	r3, [r1, #4]
 8004766:	bf16      	itet	ne
 8004768:	6063      	strne	r3, [r4, #4]
 800476a:	6013      	streq	r3, [r2, #0]
 800476c:	460c      	movne	r4, r1
 800476e:	e7eb      	b.n	8004748 <_malloc_r+0x64>
 8004770:	460c      	mov	r4, r1
 8004772:	6849      	ldr	r1, [r1, #4]
 8004774:	e7cc      	b.n	8004710 <_malloc_r+0x2c>
 8004776:	1cc4      	adds	r4, r0, #3
 8004778:	f024 0403 	bic.w	r4, r4, #3
 800477c:	42a0      	cmp	r0, r4
 800477e:	d005      	beq.n	800478c <_malloc_r+0xa8>
 8004780:	1a21      	subs	r1, r4, r0
 8004782:	4630      	mov	r0, r6
 8004784:	f000 f808 	bl	8004798 <_sbrk_r>
 8004788:	3001      	adds	r0, #1
 800478a:	d0cf      	beq.n	800472c <_malloc_r+0x48>
 800478c:	6025      	str	r5, [r4, #0]
 800478e:	e7db      	b.n	8004748 <_malloc_r+0x64>
 8004790:	20000200 	.word	0x20000200
 8004794:	20000204 	.word	0x20000204

08004798 <_sbrk_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	4c06      	ldr	r4, [pc, #24]	; (80047b4 <_sbrk_r+0x1c>)
 800479c:	2300      	movs	r3, #0
 800479e:	4605      	mov	r5, r0
 80047a0:	4608      	mov	r0, r1
 80047a2:	6023      	str	r3, [r4, #0]
 80047a4:	f7ff fae6 	bl	8003d74 <_sbrk>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_sbrk_r+0x1a>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_sbrk_r+0x1a>
 80047b0:	602b      	str	r3, [r5, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	20001b14 	.word	0x20001b14

080047b8 <siprintf>:
 80047b8:	b40e      	push	{r1, r2, r3}
 80047ba:	b500      	push	{lr}
 80047bc:	b09c      	sub	sp, #112	; 0x70
 80047be:	ab1d      	add	r3, sp, #116	; 0x74
 80047c0:	9002      	str	r0, [sp, #8]
 80047c2:	9006      	str	r0, [sp, #24]
 80047c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047c8:	4809      	ldr	r0, [pc, #36]	; (80047f0 <siprintf+0x38>)
 80047ca:	9107      	str	r1, [sp, #28]
 80047cc:	9104      	str	r1, [sp, #16]
 80047ce:	4909      	ldr	r1, [pc, #36]	; (80047f4 <siprintf+0x3c>)
 80047d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d4:	9105      	str	r1, [sp, #20]
 80047d6:	6800      	ldr	r0, [r0, #0]
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	a902      	add	r1, sp, #8
 80047dc:	f000 f868 	bl	80048b0 <_svfiprintf_r>
 80047e0:	9b02      	ldr	r3, [sp, #8]
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	b01c      	add	sp, #112	; 0x70
 80047e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047ec:	b003      	add	sp, #12
 80047ee:	4770      	bx	lr
 80047f0:	2000017c 	.word	0x2000017c
 80047f4:	ffff0208 	.word	0xffff0208

080047f8 <__malloc_lock>:
 80047f8:	4770      	bx	lr

080047fa <__malloc_unlock>:
 80047fa:	4770      	bx	lr

080047fc <__ssputs_r>:
 80047fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004800:	688e      	ldr	r6, [r1, #8]
 8004802:	429e      	cmp	r6, r3
 8004804:	4682      	mov	sl, r0
 8004806:	460c      	mov	r4, r1
 8004808:	4690      	mov	r8, r2
 800480a:	4699      	mov	r9, r3
 800480c:	d837      	bhi.n	800487e <__ssputs_r+0x82>
 800480e:	898a      	ldrh	r2, [r1, #12]
 8004810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004814:	d031      	beq.n	800487a <__ssputs_r+0x7e>
 8004816:	6825      	ldr	r5, [r4, #0]
 8004818:	6909      	ldr	r1, [r1, #16]
 800481a:	1a6f      	subs	r7, r5, r1
 800481c:	6965      	ldr	r5, [r4, #20]
 800481e:	2302      	movs	r3, #2
 8004820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004824:	fb95 f5f3 	sdiv	r5, r5, r3
 8004828:	f109 0301 	add.w	r3, r9, #1
 800482c:	443b      	add	r3, r7
 800482e:	429d      	cmp	r5, r3
 8004830:	bf38      	it	cc
 8004832:	461d      	movcc	r5, r3
 8004834:	0553      	lsls	r3, r2, #21
 8004836:	d530      	bpl.n	800489a <__ssputs_r+0x9e>
 8004838:	4629      	mov	r1, r5
 800483a:	f7ff ff53 	bl	80046e4 <_malloc_r>
 800483e:	4606      	mov	r6, r0
 8004840:	b950      	cbnz	r0, 8004858 <__ssputs_r+0x5c>
 8004842:	230c      	movs	r3, #12
 8004844:	f8ca 3000 	str.w	r3, [sl]
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800484e:	81a3      	strh	r3, [r4, #12]
 8004850:	f04f 30ff 	mov.w	r0, #4294967295
 8004854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004858:	463a      	mov	r2, r7
 800485a:	6921      	ldr	r1, [r4, #16]
 800485c:	f000 faa8 	bl	8004db0 <memcpy>
 8004860:	89a3      	ldrh	r3, [r4, #12]
 8004862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486a:	81a3      	strh	r3, [r4, #12]
 800486c:	6126      	str	r6, [r4, #16]
 800486e:	6165      	str	r5, [r4, #20]
 8004870:	443e      	add	r6, r7
 8004872:	1bed      	subs	r5, r5, r7
 8004874:	6026      	str	r6, [r4, #0]
 8004876:	60a5      	str	r5, [r4, #8]
 8004878:	464e      	mov	r6, r9
 800487a:	454e      	cmp	r6, r9
 800487c:	d900      	bls.n	8004880 <__ssputs_r+0x84>
 800487e:	464e      	mov	r6, r9
 8004880:	4632      	mov	r2, r6
 8004882:	4641      	mov	r1, r8
 8004884:	6820      	ldr	r0, [r4, #0]
 8004886:	f000 fa9e 	bl	8004dc6 <memmove>
 800488a:	68a3      	ldr	r3, [r4, #8]
 800488c:	1b9b      	subs	r3, r3, r6
 800488e:	60a3      	str	r3, [r4, #8]
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	441e      	add	r6, r3
 8004894:	6026      	str	r6, [r4, #0]
 8004896:	2000      	movs	r0, #0
 8004898:	e7dc      	b.n	8004854 <__ssputs_r+0x58>
 800489a:	462a      	mov	r2, r5
 800489c:	f000 faac 	bl	8004df8 <_realloc_r>
 80048a0:	4606      	mov	r6, r0
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d1e2      	bne.n	800486c <__ssputs_r+0x70>
 80048a6:	6921      	ldr	r1, [r4, #16]
 80048a8:	4650      	mov	r0, sl
 80048aa:	f7ff fecd 	bl	8004648 <_free_r>
 80048ae:	e7c8      	b.n	8004842 <__ssputs_r+0x46>

080048b0 <_svfiprintf_r>:
 80048b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b4:	461d      	mov	r5, r3
 80048b6:	898b      	ldrh	r3, [r1, #12]
 80048b8:	061f      	lsls	r7, r3, #24
 80048ba:	b09d      	sub	sp, #116	; 0x74
 80048bc:	4680      	mov	r8, r0
 80048be:	460c      	mov	r4, r1
 80048c0:	4616      	mov	r6, r2
 80048c2:	d50f      	bpl.n	80048e4 <_svfiprintf_r+0x34>
 80048c4:	690b      	ldr	r3, [r1, #16]
 80048c6:	b96b      	cbnz	r3, 80048e4 <_svfiprintf_r+0x34>
 80048c8:	2140      	movs	r1, #64	; 0x40
 80048ca:	f7ff ff0b 	bl	80046e4 <_malloc_r>
 80048ce:	6020      	str	r0, [r4, #0]
 80048d0:	6120      	str	r0, [r4, #16]
 80048d2:	b928      	cbnz	r0, 80048e0 <_svfiprintf_r+0x30>
 80048d4:	230c      	movs	r3, #12
 80048d6:	f8c8 3000 	str.w	r3, [r8]
 80048da:	f04f 30ff 	mov.w	r0, #4294967295
 80048de:	e0c8      	b.n	8004a72 <_svfiprintf_r+0x1c2>
 80048e0:	2340      	movs	r3, #64	; 0x40
 80048e2:	6163      	str	r3, [r4, #20]
 80048e4:	2300      	movs	r3, #0
 80048e6:	9309      	str	r3, [sp, #36]	; 0x24
 80048e8:	2320      	movs	r3, #32
 80048ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048ee:	2330      	movs	r3, #48	; 0x30
 80048f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048f4:	9503      	str	r5, [sp, #12]
 80048f6:	f04f 0b01 	mov.w	fp, #1
 80048fa:	4637      	mov	r7, r6
 80048fc:	463d      	mov	r5, r7
 80048fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004902:	b10b      	cbz	r3, 8004908 <_svfiprintf_r+0x58>
 8004904:	2b25      	cmp	r3, #37	; 0x25
 8004906:	d13e      	bne.n	8004986 <_svfiprintf_r+0xd6>
 8004908:	ebb7 0a06 	subs.w	sl, r7, r6
 800490c:	d00b      	beq.n	8004926 <_svfiprintf_r+0x76>
 800490e:	4653      	mov	r3, sl
 8004910:	4632      	mov	r2, r6
 8004912:	4621      	mov	r1, r4
 8004914:	4640      	mov	r0, r8
 8004916:	f7ff ff71 	bl	80047fc <__ssputs_r>
 800491a:	3001      	adds	r0, #1
 800491c:	f000 80a4 	beq.w	8004a68 <_svfiprintf_r+0x1b8>
 8004920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004922:	4453      	add	r3, sl
 8004924:	9309      	str	r3, [sp, #36]	; 0x24
 8004926:	783b      	ldrb	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 809d 	beq.w	8004a68 <_svfiprintf_r+0x1b8>
 800492e:	2300      	movs	r3, #0
 8004930:	f04f 32ff 	mov.w	r2, #4294967295
 8004934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004938:	9304      	str	r3, [sp, #16]
 800493a:	9307      	str	r3, [sp, #28]
 800493c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004940:	931a      	str	r3, [sp, #104]	; 0x68
 8004942:	462f      	mov	r7, r5
 8004944:	2205      	movs	r2, #5
 8004946:	f817 1b01 	ldrb.w	r1, [r7], #1
 800494a:	4850      	ldr	r0, [pc, #320]	; (8004a8c <_svfiprintf_r+0x1dc>)
 800494c:	f7fb fc50 	bl	80001f0 <memchr>
 8004950:	9b04      	ldr	r3, [sp, #16]
 8004952:	b9d0      	cbnz	r0, 800498a <_svfiprintf_r+0xda>
 8004954:	06d9      	lsls	r1, r3, #27
 8004956:	bf44      	itt	mi
 8004958:	2220      	movmi	r2, #32
 800495a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800495e:	071a      	lsls	r2, r3, #28
 8004960:	bf44      	itt	mi
 8004962:	222b      	movmi	r2, #43	; 0x2b
 8004964:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004968:	782a      	ldrb	r2, [r5, #0]
 800496a:	2a2a      	cmp	r2, #42	; 0x2a
 800496c:	d015      	beq.n	800499a <_svfiprintf_r+0xea>
 800496e:	9a07      	ldr	r2, [sp, #28]
 8004970:	462f      	mov	r7, r5
 8004972:	2000      	movs	r0, #0
 8004974:	250a      	movs	r5, #10
 8004976:	4639      	mov	r1, r7
 8004978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800497c:	3b30      	subs	r3, #48	; 0x30
 800497e:	2b09      	cmp	r3, #9
 8004980:	d94d      	bls.n	8004a1e <_svfiprintf_r+0x16e>
 8004982:	b1b8      	cbz	r0, 80049b4 <_svfiprintf_r+0x104>
 8004984:	e00f      	b.n	80049a6 <_svfiprintf_r+0xf6>
 8004986:	462f      	mov	r7, r5
 8004988:	e7b8      	b.n	80048fc <_svfiprintf_r+0x4c>
 800498a:	4a40      	ldr	r2, [pc, #256]	; (8004a8c <_svfiprintf_r+0x1dc>)
 800498c:	1a80      	subs	r0, r0, r2
 800498e:	fa0b f000 	lsl.w	r0, fp, r0
 8004992:	4318      	orrs	r0, r3
 8004994:	9004      	str	r0, [sp, #16]
 8004996:	463d      	mov	r5, r7
 8004998:	e7d3      	b.n	8004942 <_svfiprintf_r+0x92>
 800499a:	9a03      	ldr	r2, [sp, #12]
 800499c:	1d11      	adds	r1, r2, #4
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	9103      	str	r1, [sp, #12]
 80049a2:	2a00      	cmp	r2, #0
 80049a4:	db01      	blt.n	80049aa <_svfiprintf_r+0xfa>
 80049a6:	9207      	str	r2, [sp, #28]
 80049a8:	e004      	b.n	80049b4 <_svfiprintf_r+0x104>
 80049aa:	4252      	negs	r2, r2
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	9207      	str	r2, [sp, #28]
 80049b2:	9304      	str	r3, [sp, #16]
 80049b4:	783b      	ldrb	r3, [r7, #0]
 80049b6:	2b2e      	cmp	r3, #46	; 0x2e
 80049b8:	d10c      	bne.n	80049d4 <_svfiprintf_r+0x124>
 80049ba:	787b      	ldrb	r3, [r7, #1]
 80049bc:	2b2a      	cmp	r3, #42	; 0x2a
 80049be:	d133      	bne.n	8004a28 <_svfiprintf_r+0x178>
 80049c0:	9b03      	ldr	r3, [sp, #12]
 80049c2:	1d1a      	adds	r2, r3, #4
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	9203      	str	r2, [sp, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bfb8      	it	lt
 80049cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80049d0:	3702      	adds	r7, #2
 80049d2:	9305      	str	r3, [sp, #20]
 80049d4:	4d2e      	ldr	r5, [pc, #184]	; (8004a90 <_svfiprintf_r+0x1e0>)
 80049d6:	7839      	ldrb	r1, [r7, #0]
 80049d8:	2203      	movs	r2, #3
 80049da:	4628      	mov	r0, r5
 80049dc:	f7fb fc08 	bl	80001f0 <memchr>
 80049e0:	b138      	cbz	r0, 80049f2 <_svfiprintf_r+0x142>
 80049e2:	2340      	movs	r3, #64	; 0x40
 80049e4:	1b40      	subs	r0, r0, r5
 80049e6:	fa03 f000 	lsl.w	r0, r3, r0
 80049ea:	9b04      	ldr	r3, [sp, #16]
 80049ec:	4303      	orrs	r3, r0
 80049ee:	3701      	adds	r7, #1
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	7839      	ldrb	r1, [r7, #0]
 80049f4:	4827      	ldr	r0, [pc, #156]	; (8004a94 <_svfiprintf_r+0x1e4>)
 80049f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049fa:	2206      	movs	r2, #6
 80049fc:	1c7e      	adds	r6, r7, #1
 80049fe:	f7fb fbf7 	bl	80001f0 <memchr>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	d038      	beq.n	8004a78 <_svfiprintf_r+0x1c8>
 8004a06:	4b24      	ldr	r3, [pc, #144]	; (8004a98 <_svfiprintf_r+0x1e8>)
 8004a08:	bb13      	cbnz	r3, 8004a50 <_svfiprintf_r+0x1a0>
 8004a0a:	9b03      	ldr	r3, [sp, #12]
 8004a0c:	3307      	adds	r3, #7
 8004a0e:	f023 0307 	bic.w	r3, r3, #7
 8004a12:	3308      	adds	r3, #8
 8004a14:	9303      	str	r3, [sp, #12]
 8004a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a18:	444b      	add	r3, r9
 8004a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a1c:	e76d      	b.n	80048fa <_svfiprintf_r+0x4a>
 8004a1e:	fb05 3202 	mla	r2, r5, r2, r3
 8004a22:	2001      	movs	r0, #1
 8004a24:	460f      	mov	r7, r1
 8004a26:	e7a6      	b.n	8004976 <_svfiprintf_r+0xc6>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	3701      	adds	r7, #1
 8004a2c:	9305      	str	r3, [sp, #20]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	250a      	movs	r5, #10
 8004a32:	4638      	mov	r0, r7
 8004a34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a38:	3a30      	subs	r2, #48	; 0x30
 8004a3a:	2a09      	cmp	r2, #9
 8004a3c:	d903      	bls.n	8004a46 <_svfiprintf_r+0x196>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0c8      	beq.n	80049d4 <_svfiprintf_r+0x124>
 8004a42:	9105      	str	r1, [sp, #20]
 8004a44:	e7c6      	b.n	80049d4 <_svfiprintf_r+0x124>
 8004a46:	fb05 2101 	mla	r1, r5, r1, r2
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	4607      	mov	r7, r0
 8004a4e:	e7f0      	b.n	8004a32 <_svfiprintf_r+0x182>
 8004a50:	ab03      	add	r3, sp, #12
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	4622      	mov	r2, r4
 8004a56:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <_svfiprintf_r+0x1ec>)
 8004a58:	a904      	add	r1, sp, #16
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	f3af 8000 	nop.w
 8004a60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a64:	4681      	mov	r9, r0
 8004a66:	d1d6      	bne.n	8004a16 <_svfiprintf_r+0x166>
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	065b      	lsls	r3, r3, #25
 8004a6c:	f53f af35 	bmi.w	80048da <_svfiprintf_r+0x2a>
 8004a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a72:	b01d      	add	sp, #116	; 0x74
 8004a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a78:	ab03      	add	r3, sp, #12
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	4622      	mov	r2, r4
 8004a7e:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <_svfiprintf_r+0x1ec>)
 8004a80:	a904      	add	r1, sp, #16
 8004a82:	4640      	mov	r0, r8
 8004a84:	f000 f882 	bl	8004b8c <_printf_i>
 8004a88:	e7ea      	b.n	8004a60 <_svfiprintf_r+0x1b0>
 8004a8a:	bf00      	nop
 8004a8c:	08004ee0 	.word	0x08004ee0
 8004a90:	08004ee6 	.word	0x08004ee6
 8004a94:	08004eea 	.word	0x08004eea
 8004a98:	00000000 	.word	0x00000000
 8004a9c:	080047fd 	.word	0x080047fd

08004aa0 <_printf_common>:
 8004aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa4:	4691      	mov	r9, r2
 8004aa6:	461f      	mov	r7, r3
 8004aa8:	688a      	ldr	r2, [r1, #8]
 8004aaa:	690b      	ldr	r3, [r1, #16]
 8004aac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	bfb8      	it	lt
 8004ab4:	4613      	movlt	r3, r2
 8004ab6:	f8c9 3000 	str.w	r3, [r9]
 8004aba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004abe:	4606      	mov	r6, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	b112      	cbz	r2, 8004aca <_printf_common+0x2a>
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f8c9 3000 	str.w	r3, [r9]
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	0699      	lsls	r1, r3, #26
 8004ace:	bf42      	ittt	mi
 8004ad0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004ad4:	3302      	addmi	r3, #2
 8004ad6:	f8c9 3000 	strmi.w	r3, [r9]
 8004ada:	6825      	ldr	r5, [r4, #0]
 8004adc:	f015 0506 	ands.w	r5, r5, #6
 8004ae0:	d107      	bne.n	8004af2 <_printf_common+0x52>
 8004ae2:	f104 0a19 	add.w	sl, r4, #25
 8004ae6:	68e3      	ldr	r3, [r4, #12]
 8004ae8:	f8d9 2000 	ldr.w	r2, [r9]
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	42ab      	cmp	r3, r5
 8004af0:	dc28      	bgt.n	8004b44 <_printf_common+0xa4>
 8004af2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004af6:	6822      	ldr	r2, [r4, #0]
 8004af8:	3300      	adds	r3, #0
 8004afa:	bf18      	it	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	0692      	lsls	r2, r2, #26
 8004b00:	d42d      	bmi.n	8004b5e <_printf_common+0xbe>
 8004b02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b06:	4639      	mov	r1, r7
 8004b08:	4630      	mov	r0, r6
 8004b0a:	47c0      	blx	r8
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	d020      	beq.n	8004b52 <_printf_common+0xb2>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	68e5      	ldr	r5, [r4, #12]
 8004b14:	f8d9 2000 	ldr.w	r2, [r9]
 8004b18:	f003 0306 	and.w	r3, r3, #6
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	bf08      	it	eq
 8004b20:	1aad      	subeq	r5, r5, r2
 8004b22:	68a3      	ldr	r3, [r4, #8]
 8004b24:	6922      	ldr	r2, [r4, #16]
 8004b26:	bf0c      	ite	eq
 8004b28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b2c:	2500      	movne	r5, #0
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	bfc4      	itt	gt
 8004b32:	1a9b      	subgt	r3, r3, r2
 8004b34:	18ed      	addgt	r5, r5, r3
 8004b36:	f04f 0900 	mov.w	r9, #0
 8004b3a:	341a      	adds	r4, #26
 8004b3c:	454d      	cmp	r5, r9
 8004b3e:	d11a      	bne.n	8004b76 <_printf_common+0xd6>
 8004b40:	2000      	movs	r0, #0
 8004b42:	e008      	b.n	8004b56 <_printf_common+0xb6>
 8004b44:	2301      	movs	r3, #1
 8004b46:	4652      	mov	r2, sl
 8004b48:	4639      	mov	r1, r7
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	47c0      	blx	r8
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d103      	bne.n	8004b5a <_printf_common+0xba>
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b5a:	3501      	adds	r5, #1
 8004b5c:	e7c3      	b.n	8004ae6 <_printf_common+0x46>
 8004b5e:	18e1      	adds	r1, r4, r3
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	2030      	movs	r0, #48	; 0x30
 8004b64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b68:	4422      	add	r2, r4
 8004b6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b72:	3302      	adds	r3, #2
 8004b74:	e7c5      	b.n	8004b02 <_printf_common+0x62>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4622      	mov	r2, r4
 8004b7a:	4639      	mov	r1, r7
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	47c0      	blx	r8
 8004b80:	3001      	adds	r0, #1
 8004b82:	d0e6      	beq.n	8004b52 <_printf_common+0xb2>
 8004b84:	f109 0901 	add.w	r9, r9, #1
 8004b88:	e7d8      	b.n	8004b3c <_printf_common+0x9c>
	...

08004b8c <_printf_i>:
 8004b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b90:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b94:	460c      	mov	r4, r1
 8004b96:	7e09      	ldrb	r1, [r1, #24]
 8004b98:	b085      	sub	sp, #20
 8004b9a:	296e      	cmp	r1, #110	; 0x6e
 8004b9c:	4617      	mov	r7, r2
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	4698      	mov	r8, r3
 8004ba2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ba4:	f000 80b3 	beq.w	8004d0e <_printf_i+0x182>
 8004ba8:	d822      	bhi.n	8004bf0 <_printf_i+0x64>
 8004baa:	2963      	cmp	r1, #99	; 0x63
 8004bac:	d036      	beq.n	8004c1c <_printf_i+0x90>
 8004bae:	d80a      	bhi.n	8004bc6 <_printf_i+0x3a>
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	f000 80b9 	beq.w	8004d28 <_printf_i+0x19c>
 8004bb6:	2958      	cmp	r1, #88	; 0x58
 8004bb8:	f000 8083 	beq.w	8004cc2 <_printf_i+0x136>
 8004bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004bc4:	e032      	b.n	8004c2c <_printf_i+0xa0>
 8004bc6:	2964      	cmp	r1, #100	; 0x64
 8004bc8:	d001      	beq.n	8004bce <_printf_i+0x42>
 8004bca:	2969      	cmp	r1, #105	; 0x69
 8004bcc:	d1f6      	bne.n	8004bbc <_printf_i+0x30>
 8004bce:	6820      	ldr	r0, [r4, #0]
 8004bd0:	6813      	ldr	r3, [r2, #0]
 8004bd2:	0605      	lsls	r5, r0, #24
 8004bd4:	f103 0104 	add.w	r1, r3, #4
 8004bd8:	d52a      	bpl.n	8004c30 <_printf_i+0xa4>
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6011      	str	r1, [r2, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	da03      	bge.n	8004bea <_printf_i+0x5e>
 8004be2:	222d      	movs	r2, #45	; 0x2d
 8004be4:	425b      	negs	r3, r3
 8004be6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004bea:	486f      	ldr	r0, [pc, #444]	; (8004da8 <_printf_i+0x21c>)
 8004bec:	220a      	movs	r2, #10
 8004bee:	e039      	b.n	8004c64 <_printf_i+0xd8>
 8004bf0:	2973      	cmp	r1, #115	; 0x73
 8004bf2:	f000 809d 	beq.w	8004d30 <_printf_i+0x1a4>
 8004bf6:	d808      	bhi.n	8004c0a <_printf_i+0x7e>
 8004bf8:	296f      	cmp	r1, #111	; 0x6f
 8004bfa:	d020      	beq.n	8004c3e <_printf_i+0xb2>
 8004bfc:	2970      	cmp	r1, #112	; 0x70
 8004bfe:	d1dd      	bne.n	8004bbc <_printf_i+0x30>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	f043 0320 	orr.w	r3, r3, #32
 8004c06:	6023      	str	r3, [r4, #0]
 8004c08:	e003      	b.n	8004c12 <_printf_i+0x86>
 8004c0a:	2975      	cmp	r1, #117	; 0x75
 8004c0c:	d017      	beq.n	8004c3e <_printf_i+0xb2>
 8004c0e:	2978      	cmp	r1, #120	; 0x78
 8004c10:	d1d4      	bne.n	8004bbc <_printf_i+0x30>
 8004c12:	2378      	movs	r3, #120	; 0x78
 8004c14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c18:	4864      	ldr	r0, [pc, #400]	; (8004dac <_printf_i+0x220>)
 8004c1a:	e055      	b.n	8004cc8 <_printf_i+0x13c>
 8004c1c:	6813      	ldr	r3, [r2, #0]
 8004c1e:	1d19      	adds	r1, r3, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6011      	str	r1, [r2, #0]
 8004c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e08c      	b.n	8004d4a <_printf_i+0x1be>
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6011      	str	r1, [r2, #0]
 8004c34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c38:	bf18      	it	ne
 8004c3a:	b21b      	sxthne	r3, r3
 8004c3c:	e7cf      	b.n	8004bde <_printf_i+0x52>
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	6825      	ldr	r5, [r4, #0]
 8004c42:	1d18      	adds	r0, r3, #4
 8004c44:	6010      	str	r0, [r2, #0]
 8004c46:	0628      	lsls	r0, r5, #24
 8004c48:	d501      	bpl.n	8004c4e <_printf_i+0xc2>
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	e002      	b.n	8004c54 <_printf_i+0xc8>
 8004c4e:	0668      	lsls	r0, r5, #25
 8004c50:	d5fb      	bpl.n	8004c4a <_printf_i+0xbe>
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	4854      	ldr	r0, [pc, #336]	; (8004da8 <_printf_i+0x21c>)
 8004c56:	296f      	cmp	r1, #111	; 0x6f
 8004c58:	bf14      	ite	ne
 8004c5a:	220a      	movne	r2, #10
 8004c5c:	2208      	moveq	r2, #8
 8004c5e:	2100      	movs	r1, #0
 8004c60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c64:	6865      	ldr	r5, [r4, #4]
 8004c66:	60a5      	str	r5, [r4, #8]
 8004c68:	2d00      	cmp	r5, #0
 8004c6a:	f2c0 8095 	blt.w	8004d98 <_printf_i+0x20c>
 8004c6e:	6821      	ldr	r1, [r4, #0]
 8004c70:	f021 0104 	bic.w	r1, r1, #4
 8004c74:	6021      	str	r1, [r4, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d13d      	bne.n	8004cf6 <_printf_i+0x16a>
 8004c7a:	2d00      	cmp	r5, #0
 8004c7c:	f040 808e 	bne.w	8004d9c <_printf_i+0x210>
 8004c80:	4665      	mov	r5, ip
 8004c82:	2a08      	cmp	r2, #8
 8004c84:	d10b      	bne.n	8004c9e <_printf_i+0x112>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	07db      	lsls	r3, r3, #31
 8004c8a:	d508      	bpl.n	8004c9e <_printf_i+0x112>
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	6862      	ldr	r2, [r4, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	bfde      	ittt	le
 8004c94:	2330      	movle	r3, #48	; 0x30
 8004c96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c9e:	ebac 0305 	sub.w	r3, ip, r5
 8004ca2:	6123      	str	r3, [r4, #16]
 8004ca4:	f8cd 8000 	str.w	r8, [sp]
 8004ca8:	463b      	mov	r3, r7
 8004caa:	aa03      	add	r2, sp, #12
 8004cac:	4621      	mov	r1, r4
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f7ff fef6 	bl	8004aa0 <_printf_common>
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	d14d      	bne.n	8004d54 <_printf_i+0x1c8>
 8004cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbc:	b005      	add	sp, #20
 8004cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cc2:	4839      	ldr	r0, [pc, #228]	; (8004da8 <_printf_i+0x21c>)
 8004cc4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004cc8:	6813      	ldr	r3, [r2, #0]
 8004cca:	6821      	ldr	r1, [r4, #0]
 8004ccc:	1d1d      	adds	r5, r3, #4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6015      	str	r5, [r2, #0]
 8004cd2:	060a      	lsls	r2, r1, #24
 8004cd4:	d50b      	bpl.n	8004cee <_printf_i+0x162>
 8004cd6:	07ca      	lsls	r2, r1, #31
 8004cd8:	bf44      	itt	mi
 8004cda:	f041 0120 	orrmi.w	r1, r1, #32
 8004cde:	6021      	strmi	r1, [r4, #0]
 8004ce0:	b91b      	cbnz	r3, 8004cea <_printf_i+0x15e>
 8004ce2:	6822      	ldr	r2, [r4, #0]
 8004ce4:	f022 0220 	bic.w	r2, r2, #32
 8004ce8:	6022      	str	r2, [r4, #0]
 8004cea:	2210      	movs	r2, #16
 8004cec:	e7b7      	b.n	8004c5e <_printf_i+0xd2>
 8004cee:	064d      	lsls	r5, r1, #25
 8004cf0:	bf48      	it	mi
 8004cf2:	b29b      	uxthmi	r3, r3
 8004cf4:	e7ef      	b.n	8004cd6 <_printf_i+0x14a>
 8004cf6:	4665      	mov	r5, ip
 8004cf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004cfc:	fb02 3311 	mls	r3, r2, r1, r3
 8004d00:	5cc3      	ldrb	r3, [r0, r3]
 8004d02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d06:	460b      	mov	r3, r1
 8004d08:	2900      	cmp	r1, #0
 8004d0a:	d1f5      	bne.n	8004cf8 <_printf_i+0x16c>
 8004d0c:	e7b9      	b.n	8004c82 <_printf_i+0xf6>
 8004d0e:	6813      	ldr	r3, [r2, #0]
 8004d10:	6825      	ldr	r5, [r4, #0]
 8004d12:	6961      	ldr	r1, [r4, #20]
 8004d14:	1d18      	adds	r0, r3, #4
 8004d16:	6010      	str	r0, [r2, #0]
 8004d18:	0628      	lsls	r0, r5, #24
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	d501      	bpl.n	8004d22 <_printf_i+0x196>
 8004d1e:	6019      	str	r1, [r3, #0]
 8004d20:	e002      	b.n	8004d28 <_printf_i+0x19c>
 8004d22:	066a      	lsls	r2, r5, #25
 8004d24:	d5fb      	bpl.n	8004d1e <_printf_i+0x192>
 8004d26:	8019      	strh	r1, [r3, #0]
 8004d28:	2300      	movs	r3, #0
 8004d2a:	6123      	str	r3, [r4, #16]
 8004d2c:	4665      	mov	r5, ip
 8004d2e:	e7b9      	b.n	8004ca4 <_printf_i+0x118>
 8004d30:	6813      	ldr	r3, [r2, #0]
 8004d32:	1d19      	adds	r1, r3, #4
 8004d34:	6011      	str	r1, [r2, #0]
 8004d36:	681d      	ldr	r5, [r3, #0]
 8004d38:	6862      	ldr	r2, [r4, #4]
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	f7fb fa57 	bl	80001f0 <memchr>
 8004d42:	b108      	cbz	r0, 8004d48 <_printf_i+0x1bc>
 8004d44:	1b40      	subs	r0, r0, r5
 8004d46:	6060      	str	r0, [r4, #4]
 8004d48:	6863      	ldr	r3, [r4, #4]
 8004d4a:	6123      	str	r3, [r4, #16]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d52:	e7a7      	b.n	8004ca4 <_printf_i+0x118>
 8004d54:	6923      	ldr	r3, [r4, #16]
 8004d56:	462a      	mov	r2, r5
 8004d58:	4639      	mov	r1, r7
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	47c0      	blx	r8
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d0aa      	beq.n	8004cb8 <_printf_i+0x12c>
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	079b      	lsls	r3, r3, #30
 8004d66:	d413      	bmi.n	8004d90 <_printf_i+0x204>
 8004d68:	68e0      	ldr	r0, [r4, #12]
 8004d6a:	9b03      	ldr	r3, [sp, #12]
 8004d6c:	4298      	cmp	r0, r3
 8004d6e:	bfb8      	it	lt
 8004d70:	4618      	movlt	r0, r3
 8004d72:	e7a3      	b.n	8004cbc <_printf_i+0x130>
 8004d74:	2301      	movs	r3, #1
 8004d76:	464a      	mov	r2, r9
 8004d78:	4639      	mov	r1, r7
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	47c0      	blx	r8
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d09a      	beq.n	8004cb8 <_printf_i+0x12c>
 8004d82:	3501      	adds	r5, #1
 8004d84:	68e3      	ldr	r3, [r4, #12]
 8004d86:	9a03      	ldr	r2, [sp, #12]
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	42ab      	cmp	r3, r5
 8004d8c:	dcf2      	bgt.n	8004d74 <_printf_i+0x1e8>
 8004d8e:	e7eb      	b.n	8004d68 <_printf_i+0x1dc>
 8004d90:	2500      	movs	r5, #0
 8004d92:	f104 0919 	add.w	r9, r4, #25
 8004d96:	e7f5      	b.n	8004d84 <_printf_i+0x1f8>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1ac      	bne.n	8004cf6 <_printf_i+0x16a>
 8004d9c:	7803      	ldrb	r3, [r0, #0]
 8004d9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004da2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da6:	e76c      	b.n	8004c82 <_printf_i+0xf6>
 8004da8:	08004ef1 	.word	0x08004ef1
 8004dac:	08004f02 	.word	0x08004f02

08004db0 <memcpy>:
 8004db0:	b510      	push	{r4, lr}
 8004db2:	1e43      	subs	r3, r0, #1
 8004db4:	440a      	add	r2, r1
 8004db6:	4291      	cmp	r1, r2
 8004db8:	d100      	bne.n	8004dbc <memcpy+0xc>
 8004dba:	bd10      	pop	{r4, pc}
 8004dbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dc4:	e7f7      	b.n	8004db6 <memcpy+0x6>

08004dc6 <memmove>:
 8004dc6:	4288      	cmp	r0, r1
 8004dc8:	b510      	push	{r4, lr}
 8004dca:	eb01 0302 	add.w	r3, r1, r2
 8004dce:	d807      	bhi.n	8004de0 <memmove+0x1a>
 8004dd0:	1e42      	subs	r2, r0, #1
 8004dd2:	4299      	cmp	r1, r3
 8004dd4:	d00a      	beq.n	8004dec <memmove+0x26>
 8004dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dda:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004dde:	e7f8      	b.n	8004dd2 <memmove+0xc>
 8004de0:	4283      	cmp	r3, r0
 8004de2:	d9f5      	bls.n	8004dd0 <memmove+0xa>
 8004de4:	1881      	adds	r1, r0, r2
 8004de6:	1ad2      	subs	r2, r2, r3
 8004de8:	42d3      	cmn	r3, r2
 8004dea:	d100      	bne.n	8004dee <memmove+0x28>
 8004dec:	bd10      	pop	{r4, pc}
 8004dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004df2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004df6:	e7f7      	b.n	8004de8 <memmove+0x22>

08004df8 <_realloc_r>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	4607      	mov	r7, r0
 8004dfc:	4614      	mov	r4, r2
 8004dfe:	460e      	mov	r6, r1
 8004e00:	b921      	cbnz	r1, 8004e0c <_realloc_r+0x14>
 8004e02:	4611      	mov	r1, r2
 8004e04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e08:	f7ff bc6c 	b.w	80046e4 <_malloc_r>
 8004e0c:	b922      	cbnz	r2, 8004e18 <_realloc_r+0x20>
 8004e0e:	f7ff fc1b 	bl	8004648 <_free_r>
 8004e12:	4625      	mov	r5, r4
 8004e14:	4628      	mov	r0, r5
 8004e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e18:	f000 f814 	bl	8004e44 <_malloc_usable_size_r>
 8004e1c:	42a0      	cmp	r0, r4
 8004e1e:	d20f      	bcs.n	8004e40 <_realloc_r+0x48>
 8004e20:	4621      	mov	r1, r4
 8004e22:	4638      	mov	r0, r7
 8004e24:	f7ff fc5e 	bl	80046e4 <_malloc_r>
 8004e28:	4605      	mov	r5, r0
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d0f2      	beq.n	8004e14 <_realloc_r+0x1c>
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4622      	mov	r2, r4
 8004e32:	f7ff ffbd 	bl	8004db0 <memcpy>
 8004e36:	4631      	mov	r1, r6
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f7ff fc05 	bl	8004648 <_free_r>
 8004e3e:	e7e9      	b.n	8004e14 <_realloc_r+0x1c>
 8004e40:	4635      	mov	r5, r6
 8004e42:	e7e7      	b.n	8004e14 <_realloc_r+0x1c>

08004e44 <_malloc_usable_size_r>:
 8004e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e48:	1f18      	subs	r0, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bfbc      	itt	lt
 8004e4e:	580b      	ldrlt	r3, [r1, r0]
 8004e50:	18c0      	addlt	r0, r0, r3
 8004e52:	4770      	bx	lr

08004e54 <_init>:
 8004e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e56:	bf00      	nop
 8004e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5a:	bc08      	pop	{r3}
 8004e5c:	469e      	mov	lr, r3
 8004e5e:	4770      	bx	lr

08004e60 <_fini>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	bf00      	nop
 8004e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e66:	bc08      	pop	{r3}
 8004e68:	469e      	mov	lr, r3
 8004e6a:	4770      	bx	lr
