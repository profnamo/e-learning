
7_uart_sw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003250  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003400  08003400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003454  08003454  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003454  08003454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800345c  0800345c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000070  080034d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080034d4  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ec6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a11  00000000  00000000  00028f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000828  00000000  00000000  0002a978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000740  00000000  00000000  0002b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022b9c  00000000  00000000  0002b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b14  00000000  00000000  0004e47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d67b8  00000000  00000000  00055f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c748  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f0  00000000  00000000  0012c7c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080033e8 	.word	0x080033e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080033e8 	.word	0x080033e8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f94d 	bl	8000858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f002 f986 	bl	80028d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f965 	bl	80008c2 <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295
 8000610:	f000 f92d 	bl	800086e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	20000098 	.word	0x20000098

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000098 	.word	0x20000098

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff ffee 	bl	800065c <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_Delay+0x40>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffde 	bl	800065c <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8f7      	bhi.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000004 	.word	0x20000004

080006b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	; (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	db0b      	blt.n	8000746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	f003 021f 	and.w	r2, r3, #31
 8000734:	4907      	ldr	r1, [pc, #28]	; (8000754 <__NVIC_EnableIRQ+0x38>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	095b      	lsrs	r3, r3, #5
 800073c:	2001      	movs	r0, #1
 800073e:	fa00 f202 	lsl.w	r2, r0, r2
 8000742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	; (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	; (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	; 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000824:	d301      	bcc.n	800082a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000826:	2301      	movs	r3, #1
 8000828:	e00f      	b.n	800084a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <SysTick_Config+0x40>)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000832:	210f      	movs	r1, #15
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f7ff ff8e 	bl	8000758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <SysTick_Config+0x40>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <SysTick_Config+0x40>)
 8000844:	2207      	movs	r2, #7
 8000846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	e000e010 	.word	0xe000e010

08000858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ff29 	bl	80006b8 <__NVIC_SetPriorityGrouping>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000880:	f7ff ff3e 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	68b9      	ldr	r1, [r7, #8]
 800088a:	6978      	ldr	r0, [r7, #20]
 800088c:	f7ff ff8e 	bl	80007ac <NVIC_EncodePriority>
 8000890:	4602      	mov	r2, r0
 8000892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff5d 	bl	8000758 <__NVIC_SetPriority>
}
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff31 	bl	800071c <__NVIC_EnableIRQ>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ffa2 	bl	8000814 <SysTick_Config>
 80008d0:	4603      	mov	r3, r0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d004      	beq.n	80008f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e00c      	b.n	8000912 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2205      	movs	r2, #5
 80008fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f022 0201 	bic.w	r2, r2, #1
 800090e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
	...

08000920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000920:	b480      	push	{r7}
 8000922:	b089      	sub	sp, #36	; 0x24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	e177      	b.n	8000c2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800093c:	2201      	movs	r2, #1
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	4013      	ands	r3, r2
 800094e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	429a      	cmp	r2, r3
 8000956:	f040 8166 	bne.w	8000c26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2b02      	cmp	r3, #2
 8000960:	d003      	beq.n	800096a <HAL_GPIO_Init+0x4a>
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2b12      	cmp	r3, #18
 8000968:	d123      	bne.n	80009b2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	08da      	lsrs	r2, r3, #3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3208      	adds	r2, #8
 8000972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	220f      	movs	r2, #15
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	43db      	mvns	r3, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4013      	ands	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	691a      	ldr	r2, [r3, #16]
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	f003 0307 	and.w	r3, r3, #7
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	08da      	lsrs	r2, r3, #3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3208      	adds	r2, #8
 80009ac:	69b9      	ldr	r1, [r7, #24]
 80009ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	2203      	movs	r2, #3
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4013      	ands	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 0203 	and.w	r2, r3, #3
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	4313      	orrs	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	69ba      	ldr	r2, [r7, #24]
 80009e4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d00b      	beq.n	8000a06 <HAL_GPIO_Init+0xe6>
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d007      	beq.n	8000a06 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009fa:	2b11      	cmp	r3, #17
 80009fc:	d003      	beq.n	8000a06 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b12      	cmp	r3, #18
 8000a04:	d130      	bne.n	8000a68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	2203      	movs	r2, #3
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	68da      	ldr	r2, [r3, #12]
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	091b      	lsrs	r3, r3, #4
 8000a52:	f003 0201 	and.w	r2, r3, #1
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	2203      	movs	r2, #3
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	689a      	ldr	r2, [r3, #8]
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	f000 80c0 	beq.w	8000c26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b65      	ldr	r3, [pc, #404]	; (8000c40 <HAL_GPIO_Init+0x320>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a64      	ldr	r2, [pc, #400]	; (8000c40 <HAL_GPIO_Init+0x320>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b62      	ldr	r3, [pc, #392]	; (8000c40 <HAL_GPIO_Init+0x320>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ac2:	4a60      	ldr	r2, [pc, #384]	; (8000c44 <HAL_GPIO_Init+0x324>)
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	3302      	adds	r3, #2
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	220f      	movs	r2, #15
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a57      	ldr	r2, [pc, #348]	; (8000c48 <HAL_GPIO_Init+0x328>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d037      	beq.n	8000b5e <HAL_GPIO_Init+0x23e>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a56      	ldr	r2, [pc, #344]	; (8000c4c <HAL_GPIO_Init+0x32c>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d031      	beq.n	8000b5a <HAL_GPIO_Init+0x23a>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a55      	ldr	r2, [pc, #340]	; (8000c50 <HAL_GPIO_Init+0x330>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d02b      	beq.n	8000b56 <HAL_GPIO_Init+0x236>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a54      	ldr	r2, [pc, #336]	; (8000c54 <HAL_GPIO_Init+0x334>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d025      	beq.n	8000b52 <HAL_GPIO_Init+0x232>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a53      	ldr	r2, [pc, #332]	; (8000c58 <HAL_GPIO_Init+0x338>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d01f      	beq.n	8000b4e <HAL_GPIO_Init+0x22e>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a52      	ldr	r2, [pc, #328]	; (8000c5c <HAL_GPIO_Init+0x33c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d019      	beq.n	8000b4a <HAL_GPIO_Init+0x22a>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a51      	ldr	r2, [pc, #324]	; (8000c60 <HAL_GPIO_Init+0x340>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d013      	beq.n	8000b46 <HAL_GPIO_Init+0x226>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a50      	ldr	r2, [pc, #320]	; (8000c64 <HAL_GPIO_Init+0x344>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d00d      	beq.n	8000b42 <HAL_GPIO_Init+0x222>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a4f      	ldr	r2, [pc, #316]	; (8000c68 <HAL_GPIO_Init+0x348>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d007      	beq.n	8000b3e <HAL_GPIO_Init+0x21e>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a4e      	ldr	r2, [pc, #312]	; (8000c6c <HAL_GPIO_Init+0x34c>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_GPIO_Init+0x21a>
 8000b36:	2309      	movs	r3, #9
 8000b38:	e012      	b.n	8000b60 <HAL_GPIO_Init+0x240>
 8000b3a:	230a      	movs	r3, #10
 8000b3c:	e010      	b.n	8000b60 <HAL_GPIO_Init+0x240>
 8000b3e:	2308      	movs	r3, #8
 8000b40:	e00e      	b.n	8000b60 <HAL_GPIO_Init+0x240>
 8000b42:	2307      	movs	r3, #7
 8000b44:	e00c      	b.n	8000b60 <HAL_GPIO_Init+0x240>
 8000b46:	2306      	movs	r3, #6
 8000b48:	e00a      	b.n	8000b60 <HAL_GPIO_Init+0x240>
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	e008      	b.n	8000b60 <HAL_GPIO_Init+0x240>
 8000b4e:	2304      	movs	r3, #4
 8000b50:	e006      	b.n	8000b60 <HAL_GPIO_Init+0x240>
 8000b52:	2303      	movs	r3, #3
 8000b54:	e004      	b.n	8000b60 <HAL_GPIO_Init+0x240>
 8000b56:	2302      	movs	r3, #2
 8000b58:	e002      	b.n	8000b60 <HAL_GPIO_Init+0x240>
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e000      	b.n	8000b60 <HAL_GPIO_Init+0x240>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	69fa      	ldr	r2, [r7, #28]
 8000b62:	f002 0203 	and.w	r2, r2, #3
 8000b66:	0092      	lsls	r2, r2, #2
 8000b68:	4093      	lsls	r3, r2
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b70:	4934      	ldr	r1, [pc, #208]	; (8000c44 <HAL_GPIO_Init+0x324>)
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	089b      	lsrs	r3, r3, #2
 8000b76:	3302      	adds	r3, #2
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b7e:	4b3c      	ldr	r3, [pc, #240]	; (8000c70 <HAL_GPIO_Init+0x350>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	43db      	mvns	r3, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ba2:	4a33      	ldr	r2, [pc, #204]	; (8000c70 <HAL_GPIO_Init+0x350>)
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ba8:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <HAL_GPIO_Init+0x350>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d003      	beq.n	8000bcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bcc:	4a28      	ldr	r2, [pc, #160]	; (8000c70 <HAL_GPIO_Init+0x350>)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <HAL_GPIO_Init+0x350>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	4013      	ands	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <HAL_GPIO_Init+0x350>)
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <HAL_GPIO_Init+0x350>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c20:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <HAL_GPIO_Init+0x350>)
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	2b0f      	cmp	r3, #15
 8000c30:	f67f ae84 	bls.w	800093c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c34:	bf00      	nop
 8000c36:	3724      	adds	r7, #36	; 0x24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40013800 	.word	0x40013800
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40020800 	.word	0x40020800
 8000c54:	40020c00 	.word	0x40020c00
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40021400 	.word	0x40021400
 8000c60:	40021800 	.word	0x40021800
 8000c64:	40021c00 	.word	0x40021c00
 8000c68:	40022000 	.word	0x40022000
 8000c6c:	40022400 	.word	0x40022400
 8000c70:	40013c00 	.word	0x40013c00

08000c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
 8000c80:	4613      	mov	r3, r2
 8000c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c84:	787b      	ldrb	r3, [r7, #1]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c90:	e003      	b.n	8000c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c92:	887b      	ldrh	r3, [r7, #2]
 8000c94:	041a      	lsls	r2, r3, #16
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	619a      	str	r2, [r3, #24]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <HAL_PWREx_EnableOverDrive+0x90>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <HAL_PWREx_EnableOverDrive+0x90>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <HAL_PWREx_EnableOverDrive+0x90>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <HAL_PWREx_EnableOverDrive+0x94>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd4:	f7ff fcc2 	bl	800065c <HAL_GetTick>
 8000cd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cda:	e009      	b.n	8000cf0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000cdc:	f7ff fcbe 	bl	800065c <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cea:	d901      	bls.n	8000cf0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e01f      	b.n	8000d30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfc:	d1ee      	bne.n	8000cdc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d04:	f7ff fcaa 	bl	800065c <HAL_GetTick>
 8000d08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d0a:	e009      	b.n	8000d20 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d0c:	f7ff fca6 	bl	800065c <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d1a:	d901      	bls.n	8000d20 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e007      	b.n	8000d30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <HAL_PWREx_EnableOverDrive+0x98>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d2c:	d1ee      	bne.n	8000d0c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	420e0040 	.word	0x420e0040
 8000d40:	40007000 	.word	0x40007000
 8000d44:	420e0044 	.word	0x420e0044

08000d48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e22d      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d075      	beq.n	8000e52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d66:	4ba3      	ldr	r3, [pc, #652]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d00c      	beq.n	8000d8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d72:	4ba0      	ldr	r3, [pc, #640]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d112      	bne.n	8000da4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d7e:	4b9d      	ldr	r3, [pc, #628]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d8a:	d10b      	bne.n	8000da4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8c:	4b99      	ldr	r3, [pc, #612]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d05b      	beq.n	8000e50 <HAL_RCC_OscConfig+0x108>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d157      	bne.n	8000e50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e208      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dac:	d106      	bne.n	8000dbc <HAL_RCC_OscConfig+0x74>
 8000dae:	4b91      	ldr	r3, [pc, #580]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a90      	ldr	r2, [pc, #576]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e01d      	b.n	8000df8 <HAL_RCC_OscConfig+0xb0>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dc4:	d10c      	bne.n	8000de0 <HAL_RCC_OscConfig+0x98>
 8000dc6:	4b8b      	ldr	r3, [pc, #556]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a8a      	ldr	r2, [pc, #552]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	4b88      	ldr	r3, [pc, #544]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a87      	ldr	r2, [pc, #540]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e00b      	b.n	8000df8 <HAL_RCC_OscConfig+0xb0>
 8000de0:	4b84      	ldr	r3, [pc, #528]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a83      	ldr	r2, [pc, #524]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	4b81      	ldr	r3, [pc, #516]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a80      	ldr	r2, [pc, #512]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d013      	beq.n	8000e28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e00:	f7ff fc2c 	bl	800065c <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e08:	f7ff fc28 	bl	800065c <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b64      	cmp	r3, #100	; 0x64
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e1cd      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e1a:	4b76      	ldr	r3, [pc, #472]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f0      	beq.n	8000e08 <HAL_RCC_OscConfig+0xc0>
 8000e26:	e014      	b.n	8000e52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fc18 	bl	800065c <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e30:	f7ff fc14 	bl	800065c <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b64      	cmp	r3, #100	; 0x64
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e1b9      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e42:	4b6c      	ldr	r3, [pc, #432]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f0      	bne.n	8000e30 <HAL_RCC_OscConfig+0xe8>
 8000e4e:	e000      	b.n	8000e52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d063      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e5e:	4b65      	ldr	r3, [pc, #404]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00b      	beq.n	8000e82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e6a:	4b62      	ldr	r3, [pc, #392]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e72:	2b08      	cmp	r3, #8
 8000e74:	d11c      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e76:	4b5f      	ldr	r3, [pc, #380]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d116      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e82:	4b5c      	ldr	r3, [pc, #368]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d005      	beq.n	8000e9a <HAL_RCC_OscConfig+0x152>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d001      	beq.n	8000e9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e18d      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e9a:	4b56      	ldr	r3, [pc, #344]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	691b      	ldr	r3, [r3, #16]
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	4952      	ldr	r1, [pc, #328]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eae:	e03a      	b.n	8000f26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d020      	beq.n	8000efa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eb8:	4b4f      	ldr	r3, [pc, #316]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fbcd 	bl	800065c <HAL_GetTick>
 8000ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec4:	e008      	b.n	8000ed8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec6:	f7ff fbc9 	bl	800065c <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e16e      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ed8:	4b46      	ldr	r3, [pc, #280]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f0      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee4:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	4940      	ldr	r1, [pc, #256]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	600b      	str	r3, [r1, #0]
 8000ef8:	e015      	b.n	8000f26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000efa:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_RCC_OscConfig+0x2b0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f00:	f7ff fbac 	bl	800065c <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f08:	f7ff fba8 	bl	800065c <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e14d      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f1a:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f0      	bne.n	8000f08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d030      	beq.n	8000f94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d016      	beq.n	8000f68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f3a:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <HAL_RCC_OscConfig+0x2b4>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f40:	f7ff fb8c 	bl	800065c <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f48:	f7ff fb88 	bl	800065c <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e12d      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f0      	beq.n	8000f48 <HAL_RCC_OscConfig+0x200>
 8000f66:	e015      	b.n	8000f94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f68:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <HAL_RCC_OscConfig+0x2b4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6e:	f7ff fb75 	bl	800065c <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f76:	f7ff fb71 	bl	800065c <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e116      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d1f0      	bne.n	8000f76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80a0 	beq.w	80010e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10f      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_RCC_OscConfig+0x2ac>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_RCC_OscConfig+0x2b8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d121      	bne.n	8001022 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_RCC_OscConfig+0x2b8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_RCC_OscConfig+0x2b8>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fea:	f7ff fb37 	bl	800065c <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff0:	e011      	b.n	8001016 <HAL_RCC_OscConfig+0x2ce>
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	42470000 	.word	0x42470000
 8000ffc:	42470e80 	.word	0x42470e80
 8001000:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001004:	f7ff fb2a 	bl	800065c <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e0cf      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001016:	4b6a      	ldr	r3, [pc, #424]	; (80011c0 <HAL_RCC_OscConfig+0x478>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d106      	bne.n	8001038 <HAL_RCC_OscConfig+0x2f0>
 800102a:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 800102c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800102e:	4a65      	ldr	r2, [pc, #404]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6713      	str	r3, [r2, #112]	; 0x70
 8001036:	e01c      	b.n	8001072 <HAL_RCC_OscConfig+0x32a>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	2b05      	cmp	r3, #5
 800103e:	d10c      	bne.n	800105a <HAL_RCC_OscConfig+0x312>
 8001040:	4b60      	ldr	r3, [pc, #384]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 8001042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001044:	4a5f      	ldr	r2, [pc, #380]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 8001046:	f043 0304 	orr.w	r3, r3, #4
 800104a:	6713      	str	r3, [r2, #112]	; 0x70
 800104c:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 800104e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001050:	4a5c      	ldr	r2, [pc, #368]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6713      	str	r3, [r2, #112]	; 0x70
 8001058:	e00b      	b.n	8001072 <HAL_RCC_OscConfig+0x32a>
 800105a:	4b5a      	ldr	r3, [pc, #360]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 800105c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800105e:	4a59      	ldr	r2, [pc, #356]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 8001060:	f023 0301 	bic.w	r3, r3, #1
 8001064:	6713      	str	r3, [r2, #112]	; 0x70
 8001066:	4b57      	ldr	r3, [pc, #348]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 8001068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800106a:	4a56      	ldr	r2, [pc, #344]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 800106c:	f023 0304 	bic.w	r3, r3, #4
 8001070:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d015      	beq.n	80010a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800107a:	f7ff faef 	bl	800065c <HAL_GetTick>
 800107e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001080:	e00a      	b.n	8001098 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001082:	f7ff faeb 	bl	800065c <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001090:	4293      	cmp	r3, r2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e08e      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001098:	4b4a      	ldr	r3, [pc, #296]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 800109a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0ee      	beq.n	8001082 <HAL_RCC_OscConfig+0x33a>
 80010a4:	e014      	b.n	80010d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a6:	f7ff fad9 	bl	800065c <HAL_GetTick>
 80010aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ac:	e00a      	b.n	80010c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ae:	f7ff fad5 	bl	800065c <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010bc:	4293      	cmp	r3, r2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e078      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c4:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 80010c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1ee      	bne.n	80010ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d105      	bne.n	80010e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a3a      	ldr	r2, [pc, #232]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 80010dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	699b      	ldr	r3, [r3, #24]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d064      	beq.n	80011b4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d05c      	beq.n	80011b0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d141      	bne.n	8001182 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <HAL_RCC_OscConfig+0x480>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff faaa 	bl	800065c <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800110c:	f7ff faa6 	bl	800065c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e04b      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69da      	ldr	r2, [r3, #28]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	431a      	orrs	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	019b      	lsls	r3, r3, #6
 800113a:	431a      	orrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001140:	085b      	lsrs	r3, r3, #1
 8001142:	3b01      	subs	r3, #1
 8001144:	041b      	lsls	r3, r3, #16
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	061b      	lsls	r3, r3, #24
 800114e:	491d      	ldr	r1, [pc, #116]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_RCC_OscConfig+0x480>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff fa7f 	bl	800065c <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001162:	f7ff fa7b 	bl	800065c <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e020      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x41a>
 8001180:	e018      	b.n	80011b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_RCC_OscConfig+0x480>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fa68 	bl	800065c <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001190:	f7ff fa64 	bl	800065c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e009      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_RCC_OscConfig+0x47c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x448>
 80011ae:	e001      	b.n	80011b4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40007000 	.word	0x40007000
 80011c4:	40023800 	.word	0x40023800
 80011c8:	42470060 	.word	0x42470060

080011cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d101      	bne.n	80011e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e0ca      	b.n	8001376 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011e0:	4b67      	ldr	r3, [pc, #412]	; (8001380 <HAL_RCC_ClockConfig+0x1b4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d90c      	bls.n	8001208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4b64      	ldr	r3, [pc, #400]	; (8001380 <HAL_RCC_ClockConfig+0x1b4>)
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b62      	ldr	r3, [pc, #392]	; (8001380 <HAL_RCC_ClockConfig+0x1b4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0b6      	b.n	8001376 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001220:	4b58      	ldr	r3, [pc, #352]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	4a57      	ldr	r2, [pc, #348]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 8001226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800122a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0308 	and.w	r3, r3, #8
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001238:	4b52      	ldr	r3, [pc, #328]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 800123e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001244:	4b4f      	ldr	r3, [pc, #316]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	494c      	ldr	r1, [pc, #304]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 8001252:	4313      	orrs	r3, r2
 8001254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d044      	beq.n	80012ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b46      	ldr	r3, [pc, #280]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d119      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e07d      	b.n	8001376 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d003      	beq.n	800128a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001286:	2b03      	cmp	r3, #3
 8001288:	d107      	bne.n	800129a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128a:	4b3e      	ldr	r3, [pc, #248]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e06d      	b.n	8001376 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129a:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d101      	bne.n	80012aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e065      	b.n	8001376 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f023 0203 	bic.w	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4933      	ldr	r1, [pc, #204]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012bc:	f7ff f9ce 	bl	800065c <HAL_GetTick>
 80012c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c2:	e00a      	b.n	80012da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c4:	f7ff f9ca 	bl	800065c <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e04d      	b.n	8001376 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 020c 	and.w	r2, r3, #12
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d1eb      	bne.n	80012c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012ec:	4b24      	ldr	r3, [pc, #144]	; (8001380 <HAL_RCC_ClockConfig+0x1b4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d20c      	bcs.n	8001314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_RCC_ClockConfig+0x1b4>)
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_RCC_ClockConfig+0x1b4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d001      	beq.n	8001314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e030      	b.n	8001376 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	4915      	ldr	r1, [pc, #84]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 800132e:	4313      	orrs	r3, r2
 8001330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	490d      	ldr	r1, [pc, #52]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 800134e:	4313      	orrs	r3, r2
 8001350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001352:	f000 f81d 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 8001356:	4601      	mov	r1, r0
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_RCC_ClockConfig+0x1b8>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	5cd3      	ldrb	r3, [r2, r3]
 8001366:	fa21 f303 	lsr.w	r3, r1, r3
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff f930 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00
 8001384:	40023800 	.word	0x40023800
 8001388:	08003408 	.word	0x08003408
 800138c:	20000008 	.word	0x20000008

08001390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d007      	beq.n	80013c2 <HAL_RCC_GetSysClockFreq+0x32>
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d008      	beq.n	80013c8 <HAL_RCC_GetSysClockFreq+0x38>
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f040 80b4 	bne.w	8001524 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013be:	60bb      	str	r3, [r7, #8]
       break;
 80013c0:	e0b3      	b.n	800152a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013c2:	4b5e      	ldr	r3, [pc, #376]	; (800153c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80013c4:	60bb      	str	r3, [r7, #8]
      break;
 80013c6:	e0b0      	b.n	800152a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013c8:	4b5a      	ldr	r3, [pc, #360]	; (8001534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013d2:	4b58      	ldr	r3, [pc, #352]	; (8001534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d04a      	beq.n	8001474 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013de:	4b55      	ldr	r3, [pc, #340]	; (8001534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	099b      	lsrs	r3, r3, #6
 80013e4:	f04f 0400 	mov.w	r4, #0
 80013e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	ea03 0501 	and.w	r5, r3, r1
 80013f4:	ea04 0602 	and.w	r6, r4, r2
 80013f8:	4629      	mov	r1, r5
 80013fa:	4632      	mov	r2, r6
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	f04f 0400 	mov.w	r4, #0
 8001404:	0154      	lsls	r4, r2, #5
 8001406:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800140a:	014b      	lsls	r3, r1, #5
 800140c:	4619      	mov	r1, r3
 800140e:	4622      	mov	r2, r4
 8001410:	1b49      	subs	r1, r1, r5
 8001412:	eb62 0206 	sbc.w	r2, r2, r6
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f04f 0400 	mov.w	r4, #0
 800141e:	0194      	lsls	r4, r2, #6
 8001420:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001424:	018b      	lsls	r3, r1, #6
 8001426:	1a5b      	subs	r3, r3, r1
 8001428:	eb64 0402 	sbc.w	r4, r4, r2
 800142c:	f04f 0100 	mov.w	r1, #0
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	00e2      	lsls	r2, r4, #3
 8001436:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800143a:	00d9      	lsls	r1, r3, #3
 800143c:	460b      	mov	r3, r1
 800143e:	4614      	mov	r4, r2
 8001440:	195b      	adds	r3, r3, r5
 8001442:	eb44 0406 	adc.w	r4, r4, r6
 8001446:	f04f 0100 	mov.w	r1, #0
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	0262      	lsls	r2, r4, #9
 8001450:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001454:	0259      	lsls	r1, r3, #9
 8001456:	460b      	mov	r3, r1
 8001458:	4614      	mov	r4, r2
 800145a:	4618      	mov	r0, r3
 800145c:	4621      	mov	r1, r4
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f04f 0400 	mov.w	r4, #0
 8001464:	461a      	mov	r2, r3
 8001466:	4623      	mov	r3, r4
 8001468:	f7fe ff12 	bl	8000290 <__aeabi_uldivmod>
 800146c:	4603      	mov	r3, r0
 800146e:	460c      	mov	r4, r1
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	e049      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	099b      	lsrs	r3, r3, #6
 800147a:	f04f 0400 	mov.w	r4, #0
 800147e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	ea03 0501 	and.w	r5, r3, r1
 800148a:	ea04 0602 	and.w	r6, r4, r2
 800148e:	4629      	mov	r1, r5
 8001490:	4632      	mov	r2, r6
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	f04f 0400 	mov.w	r4, #0
 800149a:	0154      	lsls	r4, r2, #5
 800149c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014a0:	014b      	lsls	r3, r1, #5
 80014a2:	4619      	mov	r1, r3
 80014a4:	4622      	mov	r2, r4
 80014a6:	1b49      	subs	r1, r1, r5
 80014a8:	eb62 0206 	sbc.w	r2, r2, r6
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	f04f 0400 	mov.w	r4, #0
 80014b4:	0194      	lsls	r4, r2, #6
 80014b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014ba:	018b      	lsls	r3, r1, #6
 80014bc:	1a5b      	subs	r3, r3, r1
 80014be:	eb64 0402 	sbc.w	r4, r4, r2
 80014c2:	f04f 0100 	mov.w	r1, #0
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	00e2      	lsls	r2, r4, #3
 80014cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014d0:	00d9      	lsls	r1, r3, #3
 80014d2:	460b      	mov	r3, r1
 80014d4:	4614      	mov	r4, r2
 80014d6:	195b      	adds	r3, r3, r5
 80014d8:	eb44 0406 	adc.w	r4, r4, r6
 80014dc:	f04f 0100 	mov.w	r1, #0
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	02a2      	lsls	r2, r4, #10
 80014e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80014ea:	0299      	lsls	r1, r3, #10
 80014ec:	460b      	mov	r3, r1
 80014ee:	4614      	mov	r4, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	4621      	mov	r1, r4
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f04f 0400 	mov.w	r4, #0
 80014fa:	461a      	mov	r2, r3
 80014fc:	4623      	mov	r3, r4
 80014fe:	f7fe fec7 	bl	8000290 <__aeabi_uldivmod>
 8001502:	4603      	mov	r3, r0
 8001504:	460c      	mov	r4, r1
 8001506:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	0c1b      	lsrs	r3, r3, #16
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	3301      	adds	r3, #1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001520:	60bb      	str	r3, [r7, #8]
      break;
 8001522:	e002      	b.n	800152a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001526:	60bb      	str	r3, [r7, #8]
      break;
 8001528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800152a:	68bb      	ldr	r3, [r7, #8]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001534:	40023800 	.word	0x40023800
 8001538:	00f42400 	.word	0x00f42400
 800153c:	007a1200 	.word	0x007a1200

08001540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_RCC_GetHCLKFreq+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008

08001558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800155c:	f7ff fff0 	bl	8001540 <HAL_RCC_GetHCLKFreq>
 8001560:	4601      	mov	r1, r0
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	0a9b      	lsrs	r3, r3, #10
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	4a03      	ldr	r2, [pc, #12]	; (800157c <HAL_RCC_GetPCLK1Freq+0x24>)
 800156e:	5cd3      	ldrb	r3, [r2, r3]
 8001570:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	08003418 	.word	0x08003418

08001580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001584:	f7ff ffdc 	bl	8001540 <HAL_RCC_GetHCLKFreq>
 8001588:	4601      	mov	r1, r0
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	0b5b      	lsrs	r3, r3, #13
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	4a03      	ldr	r2, [pc, #12]	; (80015a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	fa21 f303 	lsr.w	r3, r1, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	08003418 	.word	0x08003418

080015a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d105      	bne.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d061      	beq.n	8001694 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80015d0:	4ba3      	ldr	r3, [pc, #652]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80015d6:	f7ff f841 	bl	800065c <HAL_GetTick>
 80015da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80015de:	f7ff f83d 	bl	800065c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e177      	b.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80015f0:	4b9c      	ldr	r3, [pc, #624]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f0      	bne.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d009      	beq.n	800161c <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	019a      	lsls	r2, r3, #6
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	071b      	lsls	r3, r3, #28
 8001614:	4993      	ldr	r1, [pc, #588]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001616:	4313      	orrs	r3, r2
 8001618:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01f      	beq.n	8001668 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001628:	4b8e      	ldr	r3, [pc, #568]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800162a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800162e:	0f1b      	lsrs	r3, r3, #28
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	019a      	lsls	r2, r3, #6
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	061b      	lsls	r3, r3, #24
 8001642:	431a      	orrs	r2, r3
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	071b      	lsls	r3, r3, #28
 8001648:	4986      	ldr	r1, [pc, #536]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800164a:	4313      	orrs	r3, r2
 800164c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001650:	4b84      	ldr	r3, [pc, #528]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001656:	f023 021f 	bic.w	r2, r3, #31
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	3b01      	subs	r3, #1
 8001660:	4980      	ldr	r1, [pc, #512]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001662:	4313      	orrs	r3, r2
 8001664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001668:	4b7d      	ldr	r3, [pc, #500]	; (8001860 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800166e:	f7fe fff5 	bl	800065c <HAL_GetTick>
 8001672:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001676:	f7fe fff1 	bl	800065c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e12b      	b.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001688:	4b76      	ldr	r3, [pc, #472]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d105      	bne.n	80016ac <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d079      	beq.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80016ac:	4b6e      	ldr	r3, [pc, #440]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80016b2:	f7fe ffd3 	bl	800065c <HAL_GetTick>
 80016b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80016ba:	f7fe ffcf 	bl	800065c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e109      	b.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80016cc:	4b65      	ldr	r3, [pc, #404]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016d8:	d0ef      	beq.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d020      	beq.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80016e6:	4b5f      	ldr	r3, [pc, #380]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80016e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ec:	0f1b      	lsrs	r3, r3, #28
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	019a      	lsls	r2, r3, #6
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	061b      	lsls	r3, r3, #24
 8001700:	431a      	orrs	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	071b      	lsls	r3, r3, #28
 8001706:	4957      	ldr	r1, [pc, #348]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001708:	4313      	orrs	r3, r2
 800170a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800170e:	4b55      	ldr	r3, [pc, #340]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001714:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	3b01      	subs	r3, #1
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	4950      	ldr	r1, [pc, #320]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d01e      	beq.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173a:	0e1b      	lsrs	r3, r3, #24
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	019a      	lsls	r2, r3, #6
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	061b      	lsls	r3, r3, #24
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	071b      	lsls	r3, r3, #28
 8001754:	4943      	ldr	r1, [pc, #268]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001756:	4313      	orrs	r3, r2
 8001758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800175c:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800175e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001762:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	493e      	ldr	r1, [pc, #248]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800176c:	4313      	orrs	r3, r2
 800176e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001778:	f7fe ff70 	bl	800065c <HAL_GetTick>
 800177c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001780:	f7fe ff6c 	bl	800065c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0a6      	b.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800179a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800179e:	d1ef      	bne.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f000 808d 	beq.w	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a2b      	ldr	r2, [pc, #172]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b29      	ldr	r3, [pc, #164]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a27      	ldr	r2, [pc, #156]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017d6:	f7fe ff41 	bl	800065c <HAL_GetTick>
 80017da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80017de:	f7fe ff3d 	bl	800065c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e077      	b.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80017fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001804:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d039      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	429a      	cmp	r2, r3
 8001818:	d032      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001822:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001830:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b01      	cmp	r3, #1
 8001840:	d11e      	bne.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001842:	f7fe ff0b 	bl	800065c <HAL_GetTick>
 8001846:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001848:	e014      	b.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f7fe ff07 	bl	800065c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f241 3288 	movw	r2, #5000	; 0x1388
 8001858:	4293      	cmp	r3, r2
 800185a:	d90b      	bls.n	8001874 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e03f      	b.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8001860:	42470068 	.word	0x42470068
 8001864:	40023800 	.word	0x40023800
 8001868:	42470070 	.word	0x42470070
 800186c:	40007000 	.word	0x40007000
 8001870:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0e4      	beq.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800188c:	d10d      	bne.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x302>
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800189e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018a2:	4911      	ldr	r1, [pc, #68]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]
 80018a8:	e005      	b.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80018b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80018b4:	6093      	str	r3, [r2, #8]
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80018b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c2:	4909      	ldr	r1, [pc, #36]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80018dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	424711e0 	.word	0x424711e0

080018f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e083      	b.n	8001a0a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7f5b      	ldrb	r3, [r3, #29]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f001 f806 	bl	8002924 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	22ca      	movs	r2, #202	; 0xca
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2253      	movs	r2, #83	; 0x53
 800192c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f897 	bl	8001a62 <RTC_EnterInitMode>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d008      	beq.n	800194c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	22ff      	movs	r2, #255	; 0xff
 8001940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2204      	movs	r2, #4
 8001946:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e05e      	b.n	8001a0a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800195a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800195e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6899      	ldr	r1, [r3, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68d2      	ldr	r2, [r2, #12]
 8001986:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6919      	ldr	r1, [r3, #16]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	041a      	lsls	r2, r3, #16
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019aa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10e      	bne.n	80019d8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f829 	bl	8001a12 <HAL_RTC_WaitForSynchro>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	22ff      	movs	r2, #255	; 0xff
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2204      	movs	r2, #4
 80019d2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e018      	b.n	8001a0a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	22ff      	movs	r2, #255	; 0xff
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001a08:	2300      	movs	r3, #0
  }
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a2c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a2e:	f7fe fe15 	bl	800065c <HAL_GetTick>
 8001a32:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001a34:	e009      	b.n	8001a4a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001a36:	f7fe fe11 	bl	800065c <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a44:	d901      	bls.n	8001a4a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e007      	b.n	8001a5a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f003 0320 	and.w	r3, r3, #32
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ee      	beq.n	8001a36 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d119      	bne.n	8001ab0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a86:	f7fe fde9 	bl	800065c <HAL_GetTick>
 8001a8a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001a8c:	e009      	b.n	8001aa2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001a8e:	f7fe fde5 	bl	800065c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a9c:	d901      	bls.n	8001aa2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e007      	b.n	8001ab2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0ee      	beq.n	8001a8e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e03f      	b.n	8001b4c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d106      	bne.n	8001ae6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 ff35 	bl	8002950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2224      	movs	r2, #36	; 0x24
 8001aea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001afc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 faaa 	bl	8002058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d130      	bne.n	8001bd0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_UART_Transmit_IT+0x26>
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e029      	b.n	8001bd2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_UART_Transmit_IT+0x38>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e022      	b.n	8001bd2 <HAL_UART_Transmit_IT+0x7e>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	88fa      	ldrh	r2, [r7, #6]
 8001b9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2221      	movs	r2, #33	; 0x21
 8001bb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bca:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e000      	b.n	8001bd2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001bd0:	2302      	movs	r3, #2
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10d      	bne.n	8001c32 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_UART_IRQHandler+0x52>
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f992 	bl	8001f54 <UART_Receive_IT>
      return;
 8001c30:	e0cc      	b.n	8001dcc <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 80ab 	beq.w	8001d90 <HAL_UART_IRQHandler+0x1b0>
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_UART_IRQHandler+0x70>
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80a0 	beq.w	8001d90 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00a      	beq.n	8001c70 <HAL_UART_IRQHandler+0x90>
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00a      	beq.n	8001c90 <HAL_UART_IRQHandler+0xb0>
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	f043 0202 	orr.w	r2, r3, #2
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00a      	beq.n	8001cb0 <HAL_UART_IRQHandler+0xd0>
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca8:	f043 0204 	orr.w	r2, r3, #4
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00a      	beq.n	8001cd0 <HAL_UART_IRQHandler+0xf0>
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc8:	f043 0208 	orr.w	r2, r3, #8
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d078      	beq.n	8001dca <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d007      	beq.n	8001cf2 <HAL_UART_IRQHandler+0x112>
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d002      	beq.n	8001cf2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f931 	bl	8001f54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfc:	2b40      	cmp	r3, #64	; 0x40
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <HAL_UART_IRQHandler+0x13a>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d031      	beq.n	8001d7e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f87a 	bl	8001e14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	2b40      	cmp	r3, #64	; 0x40
 8001d2c:	d123      	bne.n	8001d76 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d3c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d013      	beq.n	8001d6e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <HAL_UART_IRQHandler+0x1f4>)
 8001d4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fdc1 	bl	80008da <HAL_DMA_Abort_IT>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d016      	beq.n	8001d8c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d6c:	e00e      	b.n	8001d8c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f846 	bl	8001e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d74:	e00a      	b.n	8001d8c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f842 	bl	8001e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d7c:	e006      	b.n	8001d8c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f83e 	bl	8001e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001d8a:	e01e      	b.n	8001dca <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d8c:	bf00      	nop
    return;
 8001d8e:	e01c      	b.n	8001dca <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d008      	beq.n	8001dac <HAL_UART_IRQHandler+0x1cc>
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f867 	bl	8001e78 <UART_Transmit_IT>
    return;
 8001daa:	e00f      	b.n	8001dcc <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_UART_IRQHandler+0x1ec>
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f8af 	bl	8001f24 <UART_EndTransmit_IT>
    return;
 8001dc6:	bf00      	nop
 8001dc8:	e000      	b.n	8001dcc <HAL_UART_IRQHandler+0x1ec>
    return;
 8001dca:	bf00      	nop
  }
}
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	08001e51 	.word	0x08001e51

08001dd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff ffc8 	bl	8001e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b21      	cmp	r3, #33	; 0x21
 8001e8a:	d144      	bne.n	8001f16 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e94:	d11a      	bne.n	8001ecc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eaa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	1c9a      	adds	r2, r3, #2
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	621a      	str	r2, [r3, #32]
 8001ebe:	e00e      	b.n	8001ede <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	621a      	str	r2, [r3, #32]
 8001eca:	e008      	b.n	8001ede <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	1c59      	adds	r1, r3, #1
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6211      	str	r1, [r2, #32]
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4619      	mov	r1, r3
 8001eec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10f      	bne.n	8001f12 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
  }
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff47 	bl	8001dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b22      	cmp	r3, #34	; 0x22
 8001f66:	d171      	bne.n	800204c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f70:	d123      	bne.n	8001fba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10e      	bne.n	8001f9e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	1c9a      	adds	r2, r3, #2
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f9c:	e029      	b.n	8001ff2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
 8001fb8:	e01b      	b.n	8001ff2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10a      	bne.n	8001fd8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6858      	ldr	r0, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	1c59      	adds	r1, r3, #1
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6291      	str	r1, [r2, #40]	; 0x28
 8001fd2:	b2c2      	uxtb	r2, r0
 8001fd4:	701a      	strb	r2, [r3, #0]
 8001fd6:	e00c      	b.n	8001ff2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	1c58      	adds	r0, r3, #1
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	6288      	str	r0, [r1, #40]	; 0x28
 8001fea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4619      	mov	r1, r3
 8002000:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002002:	2b00      	cmp	r3, #0
 8002004:	d120      	bne.n	8002048 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0220 	bic.w	r2, r2, #32
 8002014:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002024:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0201 	bic.w	r2, r2, #1
 8002034:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2220      	movs	r2, #32
 800203a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff fed4 	bl	8001dec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	e002      	b.n	800204e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800204c:	2302      	movs	r3, #2
  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002098:	f023 030c 	bic.w	r3, r3, #12
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	68f9      	ldr	r1, [r7, #12]
 80020a2:	430b      	orrs	r3, r1
 80020a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699a      	ldr	r2, [r3, #24]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c4:	f040 80e4 	bne.w	8002290 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4aab      	ldr	r2, [pc, #684]	; (800237c <UART_SetConfig+0x324>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d004      	beq.n	80020dc <UART_SetConfig+0x84>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4aaa      	ldr	r2, [pc, #680]	; (8002380 <UART_SetConfig+0x328>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d16c      	bne.n	80021b6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020dc:	f7ff fa50 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	009a      	lsls	r2, r3, #2
 80020ea:	441a      	add	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f6:	4aa3      	ldr	r2, [pc, #652]	; (8002384 <UART_SetConfig+0x32c>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	095b      	lsrs	r3, r3, #5
 80020fe:	011c      	lsls	r4, r3, #4
 8002100:	f7ff fa3e 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 8002104:	4602      	mov	r2, r0
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	009a      	lsls	r2, r3, #2
 800210e:	441a      	add	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fbb2 f5f3 	udiv	r5, r2, r3
 800211a:	f7ff fa31 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 800211e:	4602      	mov	r2, r0
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	009a      	lsls	r2, r3, #2
 8002128:	441a      	add	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	4a93      	ldr	r2, [pc, #588]	; (8002384 <UART_SetConfig+0x32c>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2264      	movs	r2, #100	; 0x64
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	1aeb      	subs	r3, r5, r3
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	3332      	adds	r3, #50	; 0x32
 8002148:	4a8e      	ldr	r2, [pc, #568]	; (8002384 <UART_SetConfig+0x32c>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002156:	441c      	add	r4, r3
 8002158:	f7ff fa12 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 800215c:	4602      	mov	r2, r0
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	009a      	lsls	r2, r3, #2
 8002166:	441a      	add	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002172:	f7ff fa05 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 8002176:	4602      	mov	r2, r0
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	009a      	lsls	r2, r3, #2
 8002180:	441a      	add	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	4a7d      	ldr	r2, [pc, #500]	; (8002384 <UART_SetConfig+0x32c>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2264      	movs	r2, #100	; 0x64
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	1aeb      	subs	r3, r5, r3
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	3332      	adds	r3, #50	; 0x32
 80021a0:	4a78      	ldr	r2, [pc, #480]	; (8002384 <UART_SetConfig+0x32c>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	f003 0207 	and.w	r2, r3, #7
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4422      	add	r2, r4
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	e154      	b.n	8002460 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021b6:	f7ff f9cf 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009a      	lsls	r2, r3, #2
 80021c4:	441a      	add	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	4a6c      	ldr	r2, [pc, #432]	; (8002384 <UART_SetConfig+0x32c>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	011c      	lsls	r4, r3, #4
 80021da:	f7ff f9bd 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 80021de:	4602      	mov	r2, r0
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	009a      	lsls	r2, r3, #2
 80021e8:	441a      	add	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80021f4:	f7ff f9b0 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	009a      	lsls	r2, r3, #2
 8002202:	441a      	add	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	4a5d      	ldr	r2, [pc, #372]	; (8002384 <UART_SetConfig+0x32c>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	2264      	movs	r2, #100	; 0x64
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	1aeb      	subs	r3, r5, r3
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	3332      	adds	r3, #50	; 0x32
 8002222:	4a58      	ldr	r2, [pc, #352]	; (8002384 <UART_SetConfig+0x32c>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002230:	441c      	add	r4, r3
 8002232:	f7ff f991 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 8002236:	4602      	mov	r2, r0
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	009a      	lsls	r2, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fbb2 f5f3 	udiv	r5, r2, r3
 800224c:	f7ff f984 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 8002250:	4602      	mov	r2, r0
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	009a      	lsls	r2, r3, #2
 800225a:	441a      	add	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	4a47      	ldr	r2, [pc, #284]	; (8002384 <UART_SetConfig+0x32c>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	2264      	movs	r2, #100	; 0x64
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	1aeb      	subs	r3, r5, r3
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	3332      	adds	r3, #50	; 0x32
 800227a:	4a42      	ldr	r2, [pc, #264]	; (8002384 <UART_SetConfig+0x32c>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	f003 0207 	and.w	r2, r3, #7
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4422      	add	r2, r4
 800228c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800228e:	e0e7      	b.n	8002460 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a39      	ldr	r2, [pc, #228]	; (800237c <UART_SetConfig+0x324>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d004      	beq.n	80022a4 <UART_SetConfig+0x24c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a38      	ldr	r2, [pc, #224]	; (8002380 <UART_SetConfig+0x328>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d171      	bne.n	8002388 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022a4:	f7ff f96c 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	009a      	lsls	r2, r3, #2
 80022b2:	441a      	add	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	4a31      	ldr	r2, [pc, #196]	; (8002384 <UART_SetConfig+0x32c>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	011c      	lsls	r4, r3, #4
 80022c8:	f7ff f95a 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	009a      	lsls	r2, r3, #2
 80022d6:	441a      	add	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	fbb2 f5f3 	udiv	r5, r2, r3
 80022e2:	f7ff f94d 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 80022e6:	4602      	mov	r2, r0
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	009a      	lsls	r2, r3, #2
 80022f0:	441a      	add	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	4a21      	ldr	r2, [pc, #132]	; (8002384 <UART_SetConfig+0x32c>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2264      	movs	r2, #100	; 0x64
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	1aeb      	subs	r3, r5, r3
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	3332      	adds	r3, #50	; 0x32
 8002310:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <UART_SetConfig+0x32c>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800231c:	441c      	add	r4, r3
 800231e:	f7ff f92f 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 8002322:	4602      	mov	r2, r0
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	009a      	lsls	r2, r3, #2
 800232c:	441a      	add	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fbb2 f5f3 	udiv	r5, r2, r3
 8002338:	f7ff f922 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 800233c:	4602      	mov	r2, r0
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	009a      	lsls	r2, r3, #2
 8002346:	441a      	add	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002352:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <UART_SetConfig+0x32c>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	2264      	movs	r2, #100	; 0x64
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	1aeb      	subs	r3, r5, r3
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	3332      	adds	r3, #50	; 0x32
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <UART_SetConfig+0x32c>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	095b      	lsrs	r3, r3, #5
 800236e:	f003 020f 	and.w	r2, r3, #15
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4422      	add	r2, r4
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	e071      	b.n	8002460 <UART_SetConfig+0x408>
 800237c:	40011000 	.word	0x40011000
 8002380:	40011400 	.word	0x40011400
 8002384:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002388:	f7ff f8e6 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 800238c:	4602      	mov	r2, r0
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	009a      	lsls	r2, r3, #2
 8002396:	441a      	add	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	4a31      	ldr	r2, [pc, #196]	; (8002468 <UART_SetConfig+0x410>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	011c      	lsls	r4, r3, #4
 80023ac:	f7ff f8d4 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	009a      	lsls	r2, r3, #2
 80023ba:	441a      	add	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	fbb2 f5f3 	udiv	r5, r2, r3
 80023c6:	f7ff f8c7 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 80023ca:	4602      	mov	r2, r0
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	009a      	lsls	r2, r3, #2
 80023d4:	441a      	add	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	4a21      	ldr	r2, [pc, #132]	; (8002468 <UART_SetConfig+0x410>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2264      	movs	r2, #100	; 0x64
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	1aeb      	subs	r3, r5, r3
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	3332      	adds	r3, #50	; 0x32
 80023f4:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <UART_SetConfig+0x410>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002400:	441c      	add	r4, r3
 8002402:	f7ff f8a9 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 8002406:	4602      	mov	r2, r0
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	009a      	lsls	r2, r3, #2
 8002410:	441a      	add	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	fbb2 f5f3 	udiv	r5, r2, r3
 800241c:	f7ff f89c 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 8002420:	4602      	mov	r2, r0
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	009a      	lsls	r2, r3, #2
 800242a:	441a      	add	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	fbb2 f3f3 	udiv	r3, r2, r3
 8002436:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <UART_SetConfig+0x410>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	2264      	movs	r2, #100	; 0x64
 8002440:	fb02 f303 	mul.w	r3, r2, r3
 8002444:	1aeb      	subs	r3, r5, r3
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	3332      	adds	r3, #50	; 0x32
 800244a:	4a07      	ldr	r2, [pc, #28]	; (8002468 <UART_SetConfig+0x410>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	f003 020f 	and.w	r2, r3, #15
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4422      	add	r2, r4
 800245c:	609a      	str	r2, [r3, #8]
}
 800245e:	e7ff      	b.n	8002460 <UART_SetConfig+0x408>
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bdb0      	pop	{r4, r5, r7, pc}
 8002468:	51eb851f 	.word	0x51eb851f

0800246c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char uart_buf[30];
  int count=0;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002476:	f7fe f88b 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800247a:	f000 f825 	bl	80024c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800247e:	f000 f8fb 	bl	8002678 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002482:	f000 f8cf 	bl	8002624 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8002486:	f000 f8a7 	bl	80025d8 <MX_RTC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    memset(uart_buf,0,30);
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	221e      	movs	r2, #30
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fb9b 	bl	8002bcc <memset>
    sprintf(uart_buf,"%d\r\n",count);
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249a:	4909      	ldr	r1, [pc, #36]	; (80024c0 <main+0x54>)
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fb9d 	bl	8002bdc <siprintf>
    HAL_UART_Transmit_IT(&huart3,uart_buf,sizeof(uart_buf));
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	221e      	movs	r2, #30
 80024a6:	4619      	mov	r1, r3
 80024a8:	4806      	ldr	r0, [pc, #24]	; (80024c4 <main+0x58>)
 80024aa:	f7ff fb53 	bl	8001b54 <HAL_UART_Transmit_IT>
    count++;
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	3301      	adds	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_Delay(1000);
 80024b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024b8:	f7fe f8dc 	bl	8000674 <HAL_Delay>
  {
 80024bc:	e7e5      	b.n	800248a <main+0x1e>
 80024be:	bf00      	nop
 80024c0:	08003400 	.word	0x08003400
 80024c4:	2000009c 	.word	0x2000009c

080024c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b0a0      	sub	sp, #128	; 0x80
 80024cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024d2:	2230      	movs	r2, #48	; 0x30
 80024d4:	2100      	movs	r1, #0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fb78 	bl	8002bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	2230      	movs	r2, #48	; 0x30
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fb69 	bl	8002bcc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <SystemClock_Config+0x108>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a33      	ldr	r2, [pc, #204]	; (80025d0 <SystemClock_Config+0x108>)
 8002504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <SystemClock_Config+0x108>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	4b2e      	ldr	r3, [pc, #184]	; (80025d4 <SystemClock_Config+0x10c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a2d      	ldr	r2, [pc, #180]	; (80025d4 <SystemClock_Config+0x10c>)
 8002520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <SystemClock_Config+0x10c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800252e:	607b      	str	r3, [r7, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002532:	2306      	movs	r3, #6
 8002534:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002536:	2301      	movs	r3, #1
 8002538:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800253a:	2301      	movs	r3, #1
 800253c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800253e:	2310      	movs	r3, #16
 8002540:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002542:	2302      	movs	r3, #2
 8002544:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002546:	2300      	movs	r3, #0
 8002548:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800254a:	2308      	movs	r3, #8
 800254c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800254e:	23b4      	movs	r3, #180	; 0xb4
 8002550:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002552:	2302      	movs	r3, #2
 8002554:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002556:	2307      	movs	r3, #7
 8002558:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800255a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fbf2 	bl	8000d48 <HAL_RCC_OscConfig>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800256a:	f000 f9ab 	bl	80028c4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800256e:	f7fe fb9b 	bl	8000ca8 <HAL_PWREx_EnableOverDrive>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002578:	f000 f9a4 	bl	80028c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800257c:	230f      	movs	r3, #15
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002580:	2302      	movs	r3, #2
 8002582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002584:	2300      	movs	r3, #0
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002588:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800258c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800258e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002592:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002594:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002598:	2105      	movs	r1, #5
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fe16 	bl	80011cc <HAL_RCC_ClockConfig>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80025a6:	f000 f98d 	bl	80028c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025aa:	2320      	movs	r3, #32
 80025ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b4:	f107 030c 	add.w	r3, r7, #12
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fff5 	bl	80015a8 <HAL_RCCEx_PeriphCLKConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80025c4:	f000 f97e 	bl	80028c4 <Error_Handler>
  }
}
 80025c8:	bf00      	nop
 80025ca:	3780      	adds	r7, #128	; 0x80
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40007000 	.word	0x40007000

080025d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <MX_RTC_Init+0x44>)
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <MX_RTC_Init+0x48>)
 80025e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <MX_RTC_Init+0x44>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <MX_RTC_Init+0x44>)
 80025ea:	227f      	movs	r2, #127	; 0x7f
 80025ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <MX_RTC_Init+0x44>)
 80025f0:	22ff      	movs	r2, #255	; 0xff
 80025f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025f4:	4b09      	ldr	r3, [pc, #36]	; (800261c <MX_RTC_Init+0x44>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <MX_RTC_Init+0x44>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_RTC_Init+0x44>)
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <MX_RTC_Init+0x44>)
 8002608:	f7ff f972 	bl	80018f0 <HAL_RTC_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002612:	f000 f957 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	200000dc 	.word	0x200000dc
 8002620:	40002800 	.word	0x40002800

08002624 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002628:	4b11      	ldr	r3, [pc, #68]	; (8002670 <MX_USART3_UART_Init+0x4c>)
 800262a:	4a12      	ldr	r2, [pc, #72]	; (8002674 <MX_USART3_UART_Init+0x50>)
 800262c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800262e:	4b10      	ldr	r3, [pc, #64]	; (8002670 <MX_USART3_UART_Init+0x4c>)
 8002630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002634:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <MX_USART3_UART_Init+0x4c>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <MX_USART3_UART_Init+0x4c>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <MX_USART3_UART_Init+0x4c>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <MX_USART3_UART_Init+0x4c>)
 800264a:	220c      	movs	r2, #12
 800264c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <MX_USART3_UART_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <MX_USART3_UART_Init+0x4c>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <MX_USART3_UART_Init+0x4c>)
 800265c:	f7ff fa2d 	bl	8001aba <HAL_UART_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002666:	f000 f92d 	bl	80028c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000009c 	.word	0x2000009c
 8002674:	40004800 	.word	0x40004800

08002678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	; 0x30
 800267c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267e:	f107 031c 	add.w	r3, r7, #28
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	4b86      	ldr	r3, [pc, #536]	; (80028ac <MX_GPIO_Init+0x234>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a85      	ldr	r2, [pc, #532]	; (80028ac <MX_GPIO_Init+0x234>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b83      	ldr	r3, [pc, #524]	; (80028ac <MX_GPIO_Init+0x234>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	4b7f      	ldr	r3, [pc, #508]	; (80028ac <MX_GPIO_Init+0x234>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	4a7e      	ldr	r2, [pc, #504]	; (80028ac <MX_GPIO_Init+0x234>)
 80026b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ba:	4b7c      	ldr	r3, [pc, #496]	; (80028ac <MX_GPIO_Init+0x234>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	4b78      	ldr	r3, [pc, #480]	; (80028ac <MX_GPIO_Init+0x234>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a77      	ldr	r2, [pc, #476]	; (80028ac <MX_GPIO_Init+0x234>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b75      	ldr	r3, [pc, #468]	; (80028ac <MX_GPIO_Init+0x234>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b71      	ldr	r3, [pc, #452]	; (80028ac <MX_GPIO_Init+0x234>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a70      	ldr	r2, [pc, #448]	; (80028ac <MX_GPIO_Init+0x234>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b6e      	ldr	r3, [pc, #440]	; (80028ac <MX_GPIO_Init+0x234>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <MX_GPIO_Init+0x234>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a69      	ldr	r2, [pc, #420]	; (80028ac <MX_GPIO_Init+0x234>)
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b67      	ldr	r3, [pc, #412]	; (80028ac <MX_GPIO_Init+0x234>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	4b63      	ldr	r3, [pc, #396]	; (80028ac <MX_GPIO_Init+0x234>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a62      	ldr	r2, [pc, #392]	; (80028ac <MX_GPIO_Init+0x234>)
 8002724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b60      	ldr	r3, [pc, #384]	; (80028ac <MX_GPIO_Init+0x234>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002736:	2200      	movs	r2, #0
 8002738:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800273c:	485c      	ldr	r0, [pc, #368]	; (80028b0 <MX_GPIO_Init+0x238>)
 800273e:	f7fe fa99 	bl	8000c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	2140      	movs	r1, #64	; 0x40
 8002746:	485b      	ldr	r0, [pc, #364]	; (80028b4 <MX_GPIO_Init+0x23c>)
 8002748:	f7fe fa94 	bl	8000c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800274c:	2200      	movs	r2, #0
 800274e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002752:	4859      	ldr	r0, [pc, #356]	; (80028b8 <MX_GPIO_Init+0x240>)
 8002754:	f7fe fa8e 	bl	8000c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800275e:	4b57      	ldr	r3, [pc, #348]	; (80028bc <MX_GPIO_Init+0x244>)
 8002760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	4852      	ldr	r0, [pc, #328]	; (80028b8 <MX_GPIO_Init+0x240>)
 800276e:	f7fe f8d7 	bl	8000920 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002772:	2332      	movs	r3, #50	; 0x32
 8002774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002782:	230b      	movs	r3, #11
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002786:	f107 031c 	add.w	r3, r7, #28
 800278a:	4619      	mov	r1, r3
 800278c:	484a      	ldr	r0, [pc, #296]	; (80028b8 <MX_GPIO_Init+0x240>)
 800278e:	f7fe f8c7 	bl	8000920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_7;
 8002792:	2386      	movs	r3, #134	; 0x86
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027a2:	230b      	movs	r3, #11
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	f107 031c 	add.w	r3, r7, #28
 80027aa:	4619      	mov	r1, r3
 80027ac:	4844      	ldr	r0, [pc, #272]	; (80028c0 <MX_GPIO_Init+0x248>)
 80027ae:	f7fe f8b7 	bl	8000920 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80027b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c0:	2303      	movs	r3, #3
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80027c4:	230b      	movs	r3, #11
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	4619      	mov	r1, r3
 80027ce:	4838      	ldr	r0, [pc, #224]	; (80028b0 <MX_GPIO_Init+0x238>)
 80027d0:	f7fe f8a6 	bl	8000920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80027d4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80027d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027da:	2301      	movs	r3, #1
 80027dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e6:	f107 031c 	add.w	r3, r7, #28
 80027ea:	4619      	mov	r1, r3
 80027ec:	4830      	ldr	r0, [pc, #192]	; (80028b0 <MX_GPIO_Init+0x238>)
 80027ee:	f7fe f897 	bl	8000920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80027f2:	2340      	movs	r3, #64	; 0x40
 80027f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f6:	2301      	movs	r3, #1
 80027f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	4619      	mov	r1, r3
 8002808:	482a      	ldr	r0, [pc, #168]	; (80028b4 <MX_GPIO_Init+0x23c>)
 800280a:	f7fe f889 	bl	8000920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800281a:	f107 031c 	add.w	r3, r7, #28
 800281e:	4619      	mov	r1, r3
 8002820:	4824      	ldr	r0, [pc, #144]	; (80028b4 <MX_GPIO_Init+0x23c>)
 8002822:	f7fe f87d 	bl	8000920 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8002826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800282a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282c:	2301      	movs	r3, #1
 800282e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002834:	2300      	movs	r3, #0
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	4619      	mov	r1, r3
 800283e:	481e      	ldr	r0, [pc, #120]	; (80028b8 <MX_GPIO_Init+0x240>)
 8002840:	f7fe f86e 	bl	8000920 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002844:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002856:	230a      	movs	r3, #10
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285a:	f107 031c 	add.w	r3, r7, #28
 800285e:	4619      	mov	r1, r3
 8002860:	4817      	ldr	r0, [pc, #92]	; (80028c0 <MX_GPIO_Init+0x248>)
 8002862:	f7fe f85d 	bl	8000920 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800286a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286c:	2300      	movs	r3, #0
 800286e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	4619      	mov	r1, r3
 800287a:	4811      	ldr	r0, [pc, #68]	; (80028c0 <MX_GPIO_Init+0x248>)
 800287c:	f7fe f850 	bl	8000920 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002880:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002892:	230b      	movs	r3, #11
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_GPIO_Init+0x23c>)
 800289e:	f7fe f83f 	bl	8000920 <HAL_GPIO_Init>

}
 80028a2:	bf00      	nop
 80028a4:	3730      	adds	r7, #48	; 0x30
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40020400 	.word	0x40020400
 80028b4:	40021800 	.word	0x40021800
 80028b8:	40020800 	.word	0x40020800
 80028bc:	10110000 	.word	0x10110000
 80028c0:	40020000 	.word	0x40020000

080028c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_MspInit+0x4c>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a0f      	ldr	r2, [pc, #60]	; (8002920 <HAL_MspInit+0x4c>)
 80028e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_MspInit+0x4c>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	603b      	str	r3, [r7, #0]
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_MspInit+0x4c>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a08      	ldr	r2, [pc, #32]	; (8002920 <HAL_MspInit+0x4c>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_MspInit+0x4c>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800

08002924 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a05      	ldr	r2, [pc, #20]	; (8002948 <HAL_RTC_MspInit+0x24>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d102      	bne.n	800293c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RTC_MspInit+0x28>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40002800 	.word	0x40002800
 800294c:	42470e3c 	.word	0x42470e3c

08002950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1d      	ldr	r2, [pc, #116]	; (80029e4 <HAL_UART_MspInit+0x94>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d134      	bne.n	80029dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_UART_MspInit+0x98>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <HAL_UART_MspInit+0x98>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
 8002982:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <HAL_UART_MspInit+0x98>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_UART_MspInit+0x98>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a14      	ldr	r2, [pc, #80]	; (80029e8 <HAL_UART_MspInit+0x98>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_UART_MspInit+0x98>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80029aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029b4:	2301      	movs	r3, #1
 80029b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029bc:	2307      	movs	r3, #7
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	4619      	mov	r1, r3
 80029c6:	4809      	ldr	r0, [pc, #36]	; (80029ec <HAL_UART_MspInit+0x9c>)
 80029c8:	f7fd ffaa 	bl	8000920 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2100      	movs	r1, #0
 80029d0:	2027      	movs	r0, #39	; 0x27
 80029d2:	f7fd ff4c 	bl	800086e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029d6:	2027      	movs	r0, #39	; 0x27
 80029d8:	f7fd ff65 	bl	80008a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029dc:	bf00      	nop
 80029de:	3728      	adds	r7, #40	; 0x28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40004800 	.word	0x40004800
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020c00 	.word	0x40020c00

080029f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <HardFault_Handler+0x4>

08002a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <MemManage_Handler+0x4>

08002a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a0e:	e7fe      	b.n	8002a0e <BusFault_Handler+0x4>

08002a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <UsageFault_Handler+0x4>

08002a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a44:	f7fd fdf6 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a50:	4802      	ldr	r0, [pc, #8]	; (8002a5c <USART3_IRQHandler+0x10>)
 8002a52:	f7ff f8c5 	bl	8001be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000009c 	.word	0x2000009c

08002a60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <_sbrk+0x50>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d102      	bne.n	8002a76 <_sbrk+0x16>
		heap_end = &end;
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <_sbrk+0x50>)
 8002a72:	4a10      	ldr	r2, [pc, #64]	; (8002ab4 <_sbrk+0x54>)
 8002a74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <_sbrk+0x50>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <_sbrk+0x50>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	466a      	mov	r2, sp
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d907      	bls.n	8002a9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002a8a:	f000 f875 	bl	8002b78 <__errno>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	230c      	movs	r3, #12
 8002a92:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
 8002a98:	e006      	b.n	8002aa8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <_sbrk+0x50>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	4a03      	ldr	r2, [pc, #12]	; (8002ab0 <_sbrk+0x50>)
 8002aa4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	2000008c 	.word	0x2000008c
 8002ab4:	20000100 	.word	0x20000100

08002ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <SystemInit+0x60>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <SystemInit+0x60>)
 8002ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002acc:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <SystemInit+0x64>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <SystemInit+0x64>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <SystemInit+0x64>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <SystemInit+0x64>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <SystemInit+0x64>)
 8002ae4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <SystemInit+0x64>)
 8002af0:	4a0b      	ldr	r2, [pc, #44]	; (8002b20 <SystemInit+0x68>)
 8002af2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <SystemInit+0x64>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a08      	ldr	r2, [pc, #32]	; (8002b1c <SystemInit+0x64>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <SystemInit+0x64>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b06:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <SystemInit+0x60>)
 8002b08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b0c:	609a      	str	r2, [r3, #8]
#endif
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	24003010 	.word	0x24003010

08002b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b5c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b2a:	e003      	b.n	8002b34 <LoopCopyDataInit>

08002b2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b32:	3104      	adds	r1, #4

08002b34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b34:	480b      	ldr	r0, [pc, #44]	; (8002b64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b3c:	d3f6      	bcc.n	8002b2c <CopyDataInit>
  ldr  r2, =_sbss
 8002b3e:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b40:	e002      	b.n	8002b48 <LoopFillZerobss>

08002b42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b44:	f842 3b04 	str.w	r3, [r2], #4

08002b48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b4c:	d3f9      	bcc.n	8002b42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b4e:	f7ff ffb3 	bl	8002ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b52:	f000 f817 	bl	8002b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b56:	f7ff fc89 	bl	800246c <main>
  bx  lr    
 8002b5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b5c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002b60:	08003464 	.word	0x08003464
  ldr  r0, =_sdata
 8002b64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b68:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002b6c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002b70:	20000100 	.word	0x20000100

08002b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b74:	e7fe      	b.n	8002b74 <ADC_IRQHandler>
	...

08002b78 <__errno>:
 8002b78:	4b01      	ldr	r3, [pc, #4]	; (8002b80 <__errno+0x8>)
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	2000000c 	.word	0x2000000c

08002b84 <__libc_init_array>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	4e0d      	ldr	r6, [pc, #52]	; (8002bbc <__libc_init_array+0x38>)
 8002b88:	4c0d      	ldr	r4, [pc, #52]	; (8002bc0 <__libc_init_array+0x3c>)
 8002b8a:	1ba4      	subs	r4, r4, r6
 8002b8c:	10a4      	asrs	r4, r4, #2
 8002b8e:	2500      	movs	r5, #0
 8002b90:	42a5      	cmp	r5, r4
 8002b92:	d109      	bne.n	8002ba8 <__libc_init_array+0x24>
 8002b94:	4e0b      	ldr	r6, [pc, #44]	; (8002bc4 <__libc_init_array+0x40>)
 8002b96:	4c0c      	ldr	r4, [pc, #48]	; (8002bc8 <__libc_init_array+0x44>)
 8002b98:	f000 fc26 	bl	80033e8 <_init>
 8002b9c:	1ba4      	subs	r4, r4, r6
 8002b9e:	10a4      	asrs	r4, r4, #2
 8002ba0:	2500      	movs	r5, #0
 8002ba2:	42a5      	cmp	r5, r4
 8002ba4:	d105      	bne.n	8002bb2 <__libc_init_array+0x2e>
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bac:	4798      	blx	r3
 8002bae:	3501      	adds	r5, #1
 8002bb0:	e7ee      	b.n	8002b90 <__libc_init_array+0xc>
 8002bb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bb6:	4798      	blx	r3
 8002bb8:	3501      	adds	r5, #1
 8002bba:	e7f2      	b.n	8002ba2 <__libc_init_array+0x1e>
 8002bbc:	0800345c 	.word	0x0800345c
 8002bc0:	0800345c 	.word	0x0800345c
 8002bc4:	0800345c 	.word	0x0800345c
 8002bc8:	08003460 	.word	0x08003460

08002bcc <memset>:
 8002bcc:	4402      	add	r2, r0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d100      	bne.n	8002bd6 <memset+0xa>
 8002bd4:	4770      	bx	lr
 8002bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bda:	e7f9      	b.n	8002bd0 <memset+0x4>

08002bdc <siprintf>:
 8002bdc:	b40e      	push	{r1, r2, r3}
 8002bde:	b500      	push	{lr}
 8002be0:	b09c      	sub	sp, #112	; 0x70
 8002be2:	ab1d      	add	r3, sp, #116	; 0x74
 8002be4:	9002      	str	r0, [sp, #8]
 8002be6:	9006      	str	r0, [sp, #24]
 8002be8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002bec:	4809      	ldr	r0, [pc, #36]	; (8002c14 <siprintf+0x38>)
 8002bee:	9107      	str	r1, [sp, #28]
 8002bf0:	9104      	str	r1, [sp, #16]
 8002bf2:	4909      	ldr	r1, [pc, #36]	; (8002c18 <siprintf+0x3c>)
 8002bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bf8:	9105      	str	r1, [sp, #20]
 8002bfa:	6800      	ldr	r0, [r0, #0]
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	a902      	add	r1, sp, #8
 8002c00:	f000 f866 	bl	8002cd0 <_svfiprintf_r>
 8002c04:	9b02      	ldr	r3, [sp, #8]
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	b01c      	add	sp, #112	; 0x70
 8002c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c10:	b003      	add	sp, #12
 8002c12:	4770      	bx	lr
 8002c14:	2000000c 	.word	0x2000000c
 8002c18:	ffff0208 	.word	0xffff0208

08002c1c <__ssputs_r>:
 8002c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c20:	688e      	ldr	r6, [r1, #8]
 8002c22:	429e      	cmp	r6, r3
 8002c24:	4682      	mov	sl, r0
 8002c26:	460c      	mov	r4, r1
 8002c28:	4690      	mov	r8, r2
 8002c2a:	4699      	mov	r9, r3
 8002c2c:	d837      	bhi.n	8002c9e <__ssputs_r+0x82>
 8002c2e:	898a      	ldrh	r2, [r1, #12]
 8002c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c34:	d031      	beq.n	8002c9a <__ssputs_r+0x7e>
 8002c36:	6825      	ldr	r5, [r4, #0]
 8002c38:	6909      	ldr	r1, [r1, #16]
 8002c3a:	1a6f      	subs	r7, r5, r1
 8002c3c:	6965      	ldr	r5, [r4, #20]
 8002c3e:	2302      	movs	r3, #2
 8002c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c44:	fb95 f5f3 	sdiv	r5, r5, r3
 8002c48:	f109 0301 	add.w	r3, r9, #1
 8002c4c:	443b      	add	r3, r7
 8002c4e:	429d      	cmp	r5, r3
 8002c50:	bf38      	it	cc
 8002c52:	461d      	movcc	r5, r3
 8002c54:	0553      	lsls	r3, r2, #21
 8002c56:	d530      	bpl.n	8002cba <__ssputs_r+0x9e>
 8002c58:	4629      	mov	r1, r5
 8002c5a:	f000 fb2b 	bl	80032b4 <_malloc_r>
 8002c5e:	4606      	mov	r6, r0
 8002c60:	b950      	cbnz	r0, 8002c78 <__ssputs_r+0x5c>
 8002c62:	230c      	movs	r3, #12
 8002c64:	f8ca 3000 	str.w	r3, [sl]
 8002c68:	89a3      	ldrh	r3, [r4, #12]
 8002c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c6e:	81a3      	strh	r3, [r4, #12]
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c78:	463a      	mov	r2, r7
 8002c7a:	6921      	ldr	r1, [r4, #16]
 8002c7c:	f000 faa8 	bl	80031d0 <memcpy>
 8002c80:	89a3      	ldrh	r3, [r4, #12]
 8002c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8a:	81a3      	strh	r3, [r4, #12]
 8002c8c:	6126      	str	r6, [r4, #16]
 8002c8e:	6165      	str	r5, [r4, #20]
 8002c90:	443e      	add	r6, r7
 8002c92:	1bed      	subs	r5, r5, r7
 8002c94:	6026      	str	r6, [r4, #0]
 8002c96:	60a5      	str	r5, [r4, #8]
 8002c98:	464e      	mov	r6, r9
 8002c9a:	454e      	cmp	r6, r9
 8002c9c:	d900      	bls.n	8002ca0 <__ssputs_r+0x84>
 8002c9e:	464e      	mov	r6, r9
 8002ca0:	4632      	mov	r2, r6
 8002ca2:	4641      	mov	r1, r8
 8002ca4:	6820      	ldr	r0, [r4, #0]
 8002ca6:	f000 fa9e 	bl	80031e6 <memmove>
 8002caa:	68a3      	ldr	r3, [r4, #8]
 8002cac:	1b9b      	subs	r3, r3, r6
 8002cae:	60a3      	str	r3, [r4, #8]
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	441e      	add	r6, r3
 8002cb4:	6026      	str	r6, [r4, #0]
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	e7dc      	b.n	8002c74 <__ssputs_r+0x58>
 8002cba:	462a      	mov	r2, r5
 8002cbc:	f000 fb54 	bl	8003368 <_realloc_r>
 8002cc0:	4606      	mov	r6, r0
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d1e2      	bne.n	8002c8c <__ssputs_r+0x70>
 8002cc6:	6921      	ldr	r1, [r4, #16]
 8002cc8:	4650      	mov	r0, sl
 8002cca:	f000 faa5 	bl	8003218 <_free_r>
 8002cce:	e7c8      	b.n	8002c62 <__ssputs_r+0x46>

08002cd0 <_svfiprintf_r>:
 8002cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cd4:	461d      	mov	r5, r3
 8002cd6:	898b      	ldrh	r3, [r1, #12]
 8002cd8:	061f      	lsls	r7, r3, #24
 8002cda:	b09d      	sub	sp, #116	; 0x74
 8002cdc:	4680      	mov	r8, r0
 8002cde:	460c      	mov	r4, r1
 8002ce0:	4616      	mov	r6, r2
 8002ce2:	d50f      	bpl.n	8002d04 <_svfiprintf_r+0x34>
 8002ce4:	690b      	ldr	r3, [r1, #16]
 8002ce6:	b96b      	cbnz	r3, 8002d04 <_svfiprintf_r+0x34>
 8002ce8:	2140      	movs	r1, #64	; 0x40
 8002cea:	f000 fae3 	bl	80032b4 <_malloc_r>
 8002cee:	6020      	str	r0, [r4, #0]
 8002cf0:	6120      	str	r0, [r4, #16]
 8002cf2:	b928      	cbnz	r0, 8002d00 <_svfiprintf_r+0x30>
 8002cf4:	230c      	movs	r3, #12
 8002cf6:	f8c8 3000 	str.w	r3, [r8]
 8002cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfe:	e0c8      	b.n	8002e92 <_svfiprintf_r+0x1c2>
 8002d00:	2340      	movs	r3, #64	; 0x40
 8002d02:	6163      	str	r3, [r4, #20]
 8002d04:	2300      	movs	r3, #0
 8002d06:	9309      	str	r3, [sp, #36]	; 0x24
 8002d08:	2320      	movs	r3, #32
 8002d0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d0e:	2330      	movs	r3, #48	; 0x30
 8002d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d14:	9503      	str	r5, [sp, #12]
 8002d16:	f04f 0b01 	mov.w	fp, #1
 8002d1a:	4637      	mov	r7, r6
 8002d1c:	463d      	mov	r5, r7
 8002d1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002d22:	b10b      	cbz	r3, 8002d28 <_svfiprintf_r+0x58>
 8002d24:	2b25      	cmp	r3, #37	; 0x25
 8002d26:	d13e      	bne.n	8002da6 <_svfiprintf_r+0xd6>
 8002d28:	ebb7 0a06 	subs.w	sl, r7, r6
 8002d2c:	d00b      	beq.n	8002d46 <_svfiprintf_r+0x76>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	4632      	mov	r2, r6
 8002d32:	4621      	mov	r1, r4
 8002d34:	4640      	mov	r0, r8
 8002d36:	f7ff ff71 	bl	8002c1c <__ssputs_r>
 8002d3a:	3001      	adds	r0, #1
 8002d3c:	f000 80a4 	beq.w	8002e88 <_svfiprintf_r+0x1b8>
 8002d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d42:	4453      	add	r3, sl
 8002d44:	9309      	str	r3, [sp, #36]	; 0x24
 8002d46:	783b      	ldrb	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 809d 	beq.w	8002e88 <_svfiprintf_r+0x1b8>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d58:	9304      	str	r3, [sp, #16]
 8002d5a:	9307      	str	r3, [sp, #28]
 8002d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d60:	931a      	str	r3, [sp, #104]	; 0x68
 8002d62:	462f      	mov	r7, r5
 8002d64:	2205      	movs	r2, #5
 8002d66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002d6a:	4850      	ldr	r0, [pc, #320]	; (8002eac <_svfiprintf_r+0x1dc>)
 8002d6c:	f7fd fa40 	bl	80001f0 <memchr>
 8002d70:	9b04      	ldr	r3, [sp, #16]
 8002d72:	b9d0      	cbnz	r0, 8002daa <_svfiprintf_r+0xda>
 8002d74:	06d9      	lsls	r1, r3, #27
 8002d76:	bf44      	itt	mi
 8002d78:	2220      	movmi	r2, #32
 8002d7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d7e:	071a      	lsls	r2, r3, #28
 8002d80:	bf44      	itt	mi
 8002d82:	222b      	movmi	r2, #43	; 0x2b
 8002d84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d88:	782a      	ldrb	r2, [r5, #0]
 8002d8a:	2a2a      	cmp	r2, #42	; 0x2a
 8002d8c:	d015      	beq.n	8002dba <_svfiprintf_r+0xea>
 8002d8e:	9a07      	ldr	r2, [sp, #28]
 8002d90:	462f      	mov	r7, r5
 8002d92:	2000      	movs	r0, #0
 8002d94:	250a      	movs	r5, #10
 8002d96:	4639      	mov	r1, r7
 8002d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d9c:	3b30      	subs	r3, #48	; 0x30
 8002d9e:	2b09      	cmp	r3, #9
 8002da0:	d94d      	bls.n	8002e3e <_svfiprintf_r+0x16e>
 8002da2:	b1b8      	cbz	r0, 8002dd4 <_svfiprintf_r+0x104>
 8002da4:	e00f      	b.n	8002dc6 <_svfiprintf_r+0xf6>
 8002da6:	462f      	mov	r7, r5
 8002da8:	e7b8      	b.n	8002d1c <_svfiprintf_r+0x4c>
 8002daa:	4a40      	ldr	r2, [pc, #256]	; (8002eac <_svfiprintf_r+0x1dc>)
 8002dac:	1a80      	subs	r0, r0, r2
 8002dae:	fa0b f000 	lsl.w	r0, fp, r0
 8002db2:	4318      	orrs	r0, r3
 8002db4:	9004      	str	r0, [sp, #16]
 8002db6:	463d      	mov	r5, r7
 8002db8:	e7d3      	b.n	8002d62 <_svfiprintf_r+0x92>
 8002dba:	9a03      	ldr	r2, [sp, #12]
 8002dbc:	1d11      	adds	r1, r2, #4
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	9103      	str	r1, [sp, #12]
 8002dc2:	2a00      	cmp	r2, #0
 8002dc4:	db01      	blt.n	8002dca <_svfiprintf_r+0xfa>
 8002dc6:	9207      	str	r2, [sp, #28]
 8002dc8:	e004      	b.n	8002dd4 <_svfiprintf_r+0x104>
 8002dca:	4252      	negs	r2, r2
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	9207      	str	r2, [sp, #28]
 8002dd2:	9304      	str	r3, [sp, #16]
 8002dd4:	783b      	ldrb	r3, [r7, #0]
 8002dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8002dd8:	d10c      	bne.n	8002df4 <_svfiprintf_r+0x124>
 8002dda:	787b      	ldrb	r3, [r7, #1]
 8002ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8002dde:	d133      	bne.n	8002e48 <_svfiprintf_r+0x178>
 8002de0:	9b03      	ldr	r3, [sp, #12]
 8002de2:	1d1a      	adds	r2, r3, #4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	9203      	str	r2, [sp, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bfb8      	it	lt
 8002dec:	f04f 33ff 	movlt.w	r3, #4294967295
 8002df0:	3702      	adds	r7, #2
 8002df2:	9305      	str	r3, [sp, #20]
 8002df4:	4d2e      	ldr	r5, [pc, #184]	; (8002eb0 <_svfiprintf_r+0x1e0>)
 8002df6:	7839      	ldrb	r1, [r7, #0]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	f7fd f9f8 	bl	80001f0 <memchr>
 8002e00:	b138      	cbz	r0, 8002e12 <_svfiprintf_r+0x142>
 8002e02:	2340      	movs	r3, #64	; 0x40
 8002e04:	1b40      	subs	r0, r0, r5
 8002e06:	fa03 f000 	lsl.w	r0, r3, r0
 8002e0a:	9b04      	ldr	r3, [sp, #16]
 8002e0c:	4303      	orrs	r3, r0
 8002e0e:	3701      	adds	r7, #1
 8002e10:	9304      	str	r3, [sp, #16]
 8002e12:	7839      	ldrb	r1, [r7, #0]
 8002e14:	4827      	ldr	r0, [pc, #156]	; (8002eb4 <_svfiprintf_r+0x1e4>)
 8002e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e1a:	2206      	movs	r2, #6
 8002e1c:	1c7e      	adds	r6, r7, #1
 8002e1e:	f7fd f9e7 	bl	80001f0 <memchr>
 8002e22:	2800      	cmp	r0, #0
 8002e24:	d038      	beq.n	8002e98 <_svfiprintf_r+0x1c8>
 8002e26:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <_svfiprintf_r+0x1e8>)
 8002e28:	bb13      	cbnz	r3, 8002e70 <_svfiprintf_r+0x1a0>
 8002e2a:	9b03      	ldr	r3, [sp, #12]
 8002e2c:	3307      	adds	r3, #7
 8002e2e:	f023 0307 	bic.w	r3, r3, #7
 8002e32:	3308      	adds	r3, #8
 8002e34:	9303      	str	r3, [sp, #12]
 8002e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e38:	444b      	add	r3, r9
 8002e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e3c:	e76d      	b.n	8002d1a <_svfiprintf_r+0x4a>
 8002e3e:	fb05 3202 	mla	r2, r5, r2, r3
 8002e42:	2001      	movs	r0, #1
 8002e44:	460f      	mov	r7, r1
 8002e46:	e7a6      	b.n	8002d96 <_svfiprintf_r+0xc6>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	3701      	adds	r7, #1
 8002e4c:	9305      	str	r3, [sp, #20]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	250a      	movs	r5, #10
 8002e52:	4638      	mov	r0, r7
 8002e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e58:	3a30      	subs	r2, #48	; 0x30
 8002e5a:	2a09      	cmp	r2, #9
 8002e5c:	d903      	bls.n	8002e66 <_svfiprintf_r+0x196>
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0c8      	beq.n	8002df4 <_svfiprintf_r+0x124>
 8002e62:	9105      	str	r1, [sp, #20]
 8002e64:	e7c6      	b.n	8002df4 <_svfiprintf_r+0x124>
 8002e66:	fb05 2101 	mla	r1, r5, r1, r2
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	4607      	mov	r7, r0
 8002e6e:	e7f0      	b.n	8002e52 <_svfiprintf_r+0x182>
 8002e70:	ab03      	add	r3, sp, #12
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	4622      	mov	r2, r4
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <_svfiprintf_r+0x1ec>)
 8002e78:	a904      	add	r1, sp, #16
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	f3af 8000 	nop.w
 8002e80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002e84:	4681      	mov	r9, r0
 8002e86:	d1d6      	bne.n	8002e36 <_svfiprintf_r+0x166>
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	065b      	lsls	r3, r3, #25
 8002e8c:	f53f af35 	bmi.w	8002cfa <_svfiprintf_r+0x2a>
 8002e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e92:	b01d      	add	sp, #116	; 0x74
 8002e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e98:	ab03      	add	r3, sp, #12
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	4622      	mov	r2, r4
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <_svfiprintf_r+0x1ec>)
 8002ea0:	a904      	add	r1, sp, #16
 8002ea2:	4640      	mov	r0, r8
 8002ea4:	f000 f882 	bl	8002fac <_printf_i>
 8002ea8:	e7ea      	b.n	8002e80 <_svfiprintf_r+0x1b0>
 8002eaa:	bf00      	nop
 8002eac:	08003420 	.word	0x08003420
 8002eb0:	08003426 	.word	0x08003426
 8002eb4:	0800342a 	.word	0x0800342a
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	08002c1d 	.word	0x08002c1d

08002ec0 <_printf_common>:
 8002ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec4:	4691      	mov	r9, r2
 8002ec6:	461f      	mov	r7, r3
 8002ec8:	688a      	ldr	r2, [r1, #8]
 8002eca:	690b      	ldr	r3, [r1, #16]
 8002ecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	bfb8      	it	lt
 8002ed4:	4613      	movlt	r3, r2
 8002ed6:	f8c9 3000 	str.w	r3, [r9]
 8002eda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ede:	4606      	mov	r6, r0
 8002ee0:	460c      	mov	r4, r1
 8002ee2:	b112      	cbz	r2, 8002eea <_printf_common+0x2a>
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f8c9 3000 	str.w	r3, [r9]
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	0699      	lsls	r1, r3, #26
 8002eee:	bf42      	ittt	mi
 8002ef0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002ef4:	3302      	addmi	r3, #2
 8002ef6:	f8c9 3000 	strmi.w	r3, [r9]
 8002efa:	6825      	ldr	r5, [r4, #0]
 8002efc:	f015 0506 	ands.w	r5, r5, #6
 8002f00:	d107      	bne.n	8002f12 <_printf_common+0x52>
 8002f02:	f104 0a19 	add.w	sl, r4, #25
 8002f06:	68e3      	ldr	r3, [r4, #12]
 8002f08:	f8d9 2000 	ldr.w	r2, [r9]
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	42ab      	cmp	r3, r5
 8002f10:	dc28      	bgt.n	8002f64 <_printf_common+0xa4>
 8002f12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f16:	6822      	ldr	r2, [r4, #0]
 8002f18:	3300      	adds	r3, #0
 8002f1a:	bf18      	it	ne
 8002f1c:	2301      	movne	r3, #1
 8002f1e:	0692      	lsls	r2, r2, #26
 8002f20:	d42d      	bmi.n	8002f7e <_printf_common+0xbe>
 8002f22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f26:	4639      	mov	r1, r7
 8002f28:	4630      	mov	r0, r6
 8002f2a:	47c0      	blx	r8
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d020      	beq.n	8002f72 <_printf_common+0xb2>
 8002f30:	6823      	ldr	r3, [r4, #0]
 8002f32:	68e5      	ldr	r5, [r4, #12]
 8002f34:	f8d9 2000 	ldr.w	r2, [r9]
 8002f38:	f003 0306 	and.w	r3, r3, #6
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	bf08      	it	eq
 8002f40:	1aad      	subeq	r5, r5, r2
 8002f42:	68a3      	ldr	r3, [r4, #8]
 8002f44:	6922      	ldr	r2, [r4, #16]
 8002f46:	bf0c      	ite	eq
 8002f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f4c:	2500      	movne	r5, #0
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	bfc4      	itt	gt
 8002f52:	1a9b      	subgt	r3, r3, r2
 8002f54:	18ed      	addgt	r5, r5, r3
 8002f56:	f04f 0900 	mov.w	r9, #0
 8002f5a:	341a      	adds	r4, #26
 8002f5c:	454d      	cmp	r5, r9
 8002f5e:	d11a      	bne.n	8002f96 <_printf_common+0xd6>
 8002f60:	2000      	movs	r0, #0
 8002f62:	e008      	b.n	8002f76 <_printf_common+0xb6>
 8002f64:	2301      	movs	r3, #1
 8002f66:	4652      	mov	r2, sl
 8002f68:	4639      	mov	r1, r7
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	47c0      	blx	r8
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d103      	bne.n	8002f7a <_printf_common+0xba>
 8002f72:	f04f 30ff 	mov.w	r0, #4294967295
 8002f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f7a:	3501      	adds	r5, #1
 8002f7c:	e7c3      	b.n	8002f06 <_printf_common+0x46>
 8002f7e:	18e1      	adds	r1, r4, r3
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	2030      	movs	r0, #48	; 0x30
 8002f84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f88:	4422      	add	r2, r4
 8002f8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f92:	3302      	adds	r3, #2
 8002f94:	e7c5      	b.n	8002f22 <_printf_common+0x62>
 8002f96:	2301      	movs	r3, #1
 8002f98:	4622      	mov	r2, r4
 8002f9a:	4639      	mov	r1, r7
 8002f9c:	4630      	mov	r0, r6
 8002f9e:	47c0      	blx	r8
 8002fa0:	3001      	adds	r0, #1
 8002fa2:	d0e6      	beq.n	8002f72 <_printf_common+0xb2>
 8002fa4:	f109 0901 	add.w	r9, r9, #1
 8002fa8:	e7d8      	b.n	8002f5c <_printf_common+0x9c>
	...

08002fac <_printf_i>:
 8002fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	7e09      	ldrb	r1, [r1, #24]
 8002fb8:	b085      	sub	sp, #20
 8002fba:	296e      	cmp	r1, #110	; 0x6e
 8002fbc:	4617      	mov	r7, r2
 8002fbe:	4606      	mov	r6, r0
 8002fc0:	4698      	mov	r8, r3
 8002fc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002fc4:	f000 80b3 	beq.w	800312e <_printf_i+0x182>
 8002fc8:	d822      	bhi.n	8003010 <_printf_i+0x64>
 8002fca:	2963      	cmp	r1, #99	; 0x63
 8002fcc:	d036      	beq.n	800303c <_printf_i+0x90>
 8002fce:	d80a      	bhi.n	8002fe6 <_printf_i+0x3a>
 8002fd0:	2900      	cmp	r1, #0
 8002fd2:	f000 80b9 	beq.w	8003148 <_printf_i+0x19c>
 8002fd6:	2958      	cmp	r1, #88	; 0x58
 8002fd8:	f000 8083 	beq.w	80030e2 <_printf_i+0x136>
 8002fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fe0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002fe4:	e032      	b.n	800304c <_printf_i+0xa0>
 8002fe6:	2964      	cmp	r1, #100	; 0x64
 8002fe8:	d001      	beq.n	8002fee <_printf_i+0x42>
 8002fea:	2969      	cmp	r1, #105	; 0x69
 8002fec:	d1f6      	bne.n	8002fdc <_printf_i+0x30>
 8002fee:	6820      	ldr	r0, [r4, #0]
 8002ff0:	6813      	ldr	r3, [r2, #0]
 8002ff2:	0605      	lsls	r5, r0, #24
 8002ff4:	f103 0104 	add.w	r1, r3, #4
 8002ff8:	d52a      	bpl.n	8003050 <_printf_i+0xa4>
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6011      	str	r1, [r2, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	da03      	bge.n	800300a <_printf_i+0x5e>
 8003002:	222d      	movs	r2, #45	; 0x2d
 8003004:	425b      	negs	r3, r3
 8003006:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800300a:	486f      	ldr	r0, [pc, #444]	; (80031c8 <_printf_i+0x21c>)
 800300c:	220a      	movs	r2, #10
 800300e:	e039      	b.n	8003084 <_printf_i+0xd8>
 8003010:	2973      	cmp	r1, #115	; 0x73
 8003012:	f000 809d 	beq.w	8003150 <_printf_i+0x1a4>
 8003016:	d808      	bhi.n	800302a <_printf_i+0x7e>
 8003018:	296f      	cmp	r1, #111	; 0x6f
 800301a:	d020      	beq.n	800305e <_printf_i+0xb2>
 800301c:	2970      	cmp	r1, #112	; 0x70
 800301e:	d1dd      	bne.n	8002fdc <_printf_i+0x30>
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	f043 0320 	orr.w	r3, r3, #32
 8003026:	6023      	str	r3, [r4, #0]
 8003028:	e003      	b.n	8003032 <_printf_i+0x86>
 800302a:	2975      	cmp	r1, #117	; 0x75
 800302c:	d017      	beq.n	800305e <_printf_i+0xb2>
 800302e:	2978      	cmp	r1, #120	; 0x78
 8003030:	d1d4      	bne.n	8002fdc <_printf_i+0x30>
 8003032:	2378      	movs	r3, #120	; 0x78
 8003034:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003038:	4864      	ldr	r0, [pc, #400]	; (80031cc <_printf_i+0x220>)
 800303a:	e055      	b.n	80030e8 <_printf_i+0x13c>
 800303c:	6813      	ldr	r3, [r2, #0]
 800303e:	1d19      	adds	r1, r3, #4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6011      	str	r1, [r2, #0]
 8003044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800304c:	2301      	movs	r3, #1
 800304e:	e08c      	b.n	800316a <_printf_i+0x1be>
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6011      	str	r1, [r2, #0]
 8003054:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003058:	bf18      	it	ne
 800305a:	b21b      	sxthne	r3, r3
 800305c:	e7cf      	b.n	8002ffe <_printf_i+0x52>
 800305e:	6813      	ldr	r3, [r2, #0]
 8003060:	6825      	ldr	r5, [r4, #0]
 8003062:	1d18      	adds	r0, r3, #4
 8003064:	6010      	str	r0, [r2, #0]
 8003066:	0628      	lsls	r0, r5, #24
 8003068:	d501      	bpl.n	800306e <_printf_i+0xc2>
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	e002      	b.n	8003074 <_printf_i+0xc8>
 800306e:	0668      	lsls	r0, r5, #25
 8003070:	d5fb      	bpl.n	800306a <_printf_i+0xbe>
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	4854      	ldr	r0, [pc, #336]	; (80031c8 <_printf_i+0x21c>)
 8003076:	296f      	cmp	r1, #111	; 0x6f
 8003078:	bf14      	ite	ne
 800307a:	220a      	movne	r2, #10
 800307c:	2208      	moveq	r2, #8
 800307e:	2100      	movs	r1, #0
 8003080:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003084:	6865      	ldr	r5, [r4, #4]
 8003086:	60a5      	str	r5, [r4, #8]
 8003088:	2d00      	cmp	r5, #0
 800308a:	f2c0 8095 	blt.w	80031b8 <_printf_i+0x20c>
 800308e:	6821      	ldr	r1, [r4, #0]
 8003090:	f021 0104 	bic.w	r1, r1, #4
 8003094:	6021      	str	r1, [r4, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d13d      	bne.n	8003116 <_printf_i+0x16a>
 800309a:	2d00      	cmp	r5, #0
 800309c:	f040 808e 	bne.w	80031bc <_printf_i+0x210>
 80030a0:	4665      	mov	r5, ip
 80030a2:	2a08      	cmp	r2, #8
 80030a4:	d10b      	bne.n	80030be <_printf_i+0x112>
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	07db      	lsls	r3, r3, #31
 80030aa:	d508      	bpl.n	80030be <_printf_i+0x112>
 80030ac:	6923      	ldr	r3, [r4, #16]
 80030ae:	6862      	ldr	r2, [r4, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	bfde      	ittt	le
 80030b4:	2330      	movle	r3, #48	; 0x30
 80030b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030be:	ebac 0305 	sub.w	r3, ip, r5
 80030c2:	6123      	str	r3, [r4, #16]
 80030c4:	f8cd 8000 	str.w	r8, [sp]
 80030c8:	463b      	mov	r3, r7
 80030ca:	aa03      	add	r2, sp, #12
 80030cc:	4621      	mov	r1, r4
 80030ce:	4630      	mov	r0, r6
 80030d0:	f7ff fef6 	bl	8002ec0 <_printf_common>
 80030d4:	3001      	adds	r0, #1
 80030d6:	d14d      	bne.n	8003174 <_printf_i+0x1c8>
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295
 80030dc:	b005      	add	sp, #20
 80030de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030e2:	4839      	ldr	r0, [pc, #228]	; (80031c8 <_printf_i+0x21c>)
 80030e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80030e8:	6813      	ldr	r3, [r2, #0]
 80030ea:	6821      	ldr	r1, [r4, #0]
 80030ec:	1d1d      	adds	r5, r3, #4
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6015      	str	r5, [r2, #0]
 80030f2:	060a      	lsls	r2, r1, #24
 80030f4:	d50b      	bpl.n	800310e <_printf_i+0x162>
 80030f6:	07ca      	lsls	r2, r1, #31
 80030f8:	bf44      	itt	mi
 80030fa:	f041 0120 	orrmi.w	r1, r1, #32
 80030fe:	6021      	strmi	r1, [r4, #0]
 8003100:	b91b      	cbnz	r3, 800310a <_printf_i+0x15e>
 8003102:	6822      	ldr	r2, [r4, #0]
 8003104:	f022 0220 	bic.w	r2, r2, #32
 8003108:	6022      	str	r2, [r4, #0]
 800310a:	2210      	movs	r2, #16
 800310c:	e7b7      	b.n	800307e <_printf_i+0xd2>
 800310e:	064d      	lsls	r5, r1, #25
 8003110:	bf48      	it	mi
 8003112:	b29b      	uxthmi	r3, r3
 8003114:	e7ef      	b.n	80030f6 <_printf_i+0x14a>
 8003116:	4665      	mov	r5, ip
 8003118:	fbb3 f1f2 	udiv	r1, r3, r2
 800311c:	fb02 3311 	mls	r3, r2, r1, r3
 8003120:	5cc3      	ldrb	r3, [r0, r3]
 8003122:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003126:	460b      	mov	r3, r1
 8003128:	2900      	cmp	r1, #0
 800312a:	d1f5      	bne.n	8003118 <_printf_i+0x16c>
 800312c:	e7b9      	b.n	80030a2 <_printf_i+0xf6>
 800312e:	6813      	ldr	r3, [r2, #0]
 8003130:	6825      	ldr	r5, [r4, #0]
 8003132:	6961      	ldr	r1, [r4, #20]
 8003134:	1d18      	adds	r0, r3, #4
 8003136:	6010      	str	r0, [r2, #0]
 8003138:	0628      	lsls	r0, r5, #24
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	d501      	bpl.n	8003142 <_printf_i+0x196>
 800313e:	6019      	str	r1, [r3, #0]
 8003140:	e002      	b.n	8003148 <_printf_i+0x19c>
 8003142:	066a      	lsls	r2, r5, #25
 8003144:	d5fb      	bpl.n	800313e <_printf_i+0x192>
 8003146:	8019      	strh	r1, [r3, #0]
 8003148:	2300      	movs	r3, #0
 800314a:	6123      	str	r3, [r4, #16]
 800314c:	4665      	mov	r5, ip
 800314e:	e7b9      	b.n	80030c4 <_printf_i+0x118>
 8003150:	6813      	ldr	r3, [r2, #0]
 8003152:	1d19      	adds	r1, r3, #4
 8003154:	6011      	str	r1, [r2, #0]
 8003156:	681d      	ldr	r5, [r3, #0]
 8003158:	6862      	ldr	r2, [r4, #4]
 800315a:	2100      	movs	r1, #0
 800315c:	4628      	mov	r0, r5
 800315e:	f7fd f847 	bl	80001f0 <memchr>
 8003162:	b108      	cbz	r0, 8003168 <_printf_i+0x1bc>
 8003164:	1b40      	subs	r0, r0, r5
 8003166:	6060      	str	r0, [r4, #4]
 8003168:	6863      	ldr	r3, [r4, #4]
 800316a:	6123      	str	r3, [r4, #16]
 800316c:	2300      	movs	r3, #0
 800316e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003172:	e7a7      	b.n	80030c4 <_printf_i+0x118>
 8003174:	6923      	ldr	r3, [r4, #16]
 8003176:	462a      	mov	r2, r5
 8003178:	4639      	mov	r1, r7
 800317a:	4630      	mov	r0, r6
 800317c:	47c0      	blx	r8
 800317e:	3001      	adds	r0, #1
 8003180:	d0aa      	beq.n	80030d8 <_printf_i+0x12c>
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	079b      	lsls	r3, r3, #30
 8003186:	d413      	bmi.n	80031b0 <_printf_i+0x204>
 8003188:	68e0      	ldr	r0, [r4, #12]
 800318a:	9b03      	ldr	r3, [sp, #12]
 800318c:	4298      	cmp	r0, r3
 800318e:	bfb8      	it	lt
 8003190:	4618      	movlt	r0, r3
 8003192:	e7a3      	b.n	80030dc <_printf_i+0x130>
 8003194:	2301      	movs	r3, #1
 8003196:	464a      	mov	r2, r9
 8003198:	4639      	mov	r1, r7
 800319a:	4630      	mov	r0, r6
 800319c:	47c0      	blx	r8
 800319e:	3001      	adds	r0, #1
 80031a0:	d09a      	beq.n	80030d8 <_printf_i+0x12c>
 80031a2:	3501      	adds	r5, #1
 80031a4:	68e3      	ldr	r3, [r4, #12]
 80031a6:	9a03      	ldr	r2, [sp, #12]
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	42ab      	cmp	r3, r5
 80031ac:	dcf2      	bgt.n	8003194 <_printf_i+0x1e8>
 80031ae:	e7eb      	b.n	8003188 <_printf_i+0x1dc>
 80031b0:	2500      	movs	r5, #0
 80031b2:	f104 0919 	add.w	r9, r4, #25
 80031b6:	e7f5      	b.n	80031a4 <_printf_i+0x1f8>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1ac      	bne.n	8003116 <_printf_i+0x16a>
 80031bc:	7803      	ldrb	r3, [r0, #0]
 80031be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031c6:	e76c      	b.n	80030a2 <_printf_i+0xf6>
 80031c8:	08003431 	.word	0x08003431
 80031cc:	08003442 	.word	0x08003442

080031d0 <memcpy>:
 80031d0:	b510      	push	{r4, lr}
 80031d2:	1e43      	subs	r3, r0, #1
 80031d4:	440a      	add	r2, r1
 80031d6:	4291      	cmp	r1, r2
 80031d8:	d100      	bne.n	80031dc <memcpy+0xc>
 80031da:	bd10      	pop	{r4, pc}
 80031dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031e4:	e7f7      	b.n	80031d6 <memcpy+0x6>

080031e6 <memmove>:
 80031e6:	4288      	cmp	r0, r1
 80031e8:	b510      	push	{r4, lr}
 80031ea:	eb01 0302 	add.w	r3, r1, r2
 80031ee:	d807      	bhi.n	8003200 <memmove+0x1a>
 80031f0:	1e42      	subs	r2, r0, #1
 80031f2:	4299      	cmp	r1, r3
 80031f4:	d00a      	beq.n	800320c <memmove+0x26>
 80031f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80031fe:	e7f8      	b.n	80031f2 <memmove+0xc>
 8003200:	4283      	cmp	r3, r0
 8003202:	d9f5      	bls.n	80031f0 <memmove+0xa>
 8003204:	1881      	adds	r1, r0, r2
 8003206:	1ad2      	subs	r2, r2, r3
 8003208:	42d3      	cmn	r3, r2
 800320a:	d100      	bne.n	800320e <memmove+0x28>
 800320c:	bd10      	pop	{r4, pc}
 800320e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003212:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003216:	e7f7      	b.n	8003208 <memmove+0x22>

08003218 <_free_r>:
 8003218:	b538      	push	{r3, r4, r5, lr}
 800321a:	4605      	mov	r5, r0
 800321c:	2900      	cmp	r1, #0
 800321e:	d045      	beq.n	80032ac <_free_r+0x94>
 8003220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003224:	1f0c      	subs	r4, r1, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	bfb8      	it	lt
 800322a:	18e4      	addlt	r4, r4, r3
 800322c:	f000 f8d2 	bl	80033d4 <__malloc_lock>
 8003230:	4a1f      	ldr	r2, [pc, #124]	; (80032b0 <_free_r+0x98>)
 8003232:	6813      	ldr	r3, [r2, #0]
 8003234:	4610      	mov	r0, r2
 8003236:	b933      	cbnz	r3, 8003246 <_free_r+0x2e>
 8003238:	6063      	str	r3, [r4, #4]
 800323a:	6014      	str	r4, [r2, #0]
 800323c:	4628      	mov	r0, r5
 800323e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003242:	f000 b8c8 	b.w	80033d6 <__malloc_unlock>
 8003246:	42a3      	cmp	r3, r4
 8003248:	d90c      	bls.n	8003264 <_free_r+0x4c>
 800324a:	6821      	ldr	r1, [r4, #0]
 800324c:	1862      	adds	r2, r4, r1
 800324e:	4293      	cmp	r3, r2
 8003250:	bf04      	itt	eq
 8003252:	681a      	ldreq	r2, [r3, #0]
 8003254:	685b      	ldreq	r3, [r3, #4]
 8003256:	6063      	str	r3, [r4, #4]
 8003258:	bf04      	itt	eq
 800325a:	1852      	addeq	r2, r2, r1
 800325c:	6022      	streq	r2, [r4, #0]
 800325e:	6004      	str	r4, [r0, #0]
 8003260:	e7ec      	b.n	800323c <_free_r+0x24>
 8003262:	4613      	mov	r3, r2
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	b10a      	cbz	r2, 800326c <_free_r+0x54>
 8003268:	42a2      	cmp	r2, r4
 800326a:	d9fa      	bls.n	8003262 <_free_r+0x4a>
 800326c:	6819      	ldr	r1, [r3, #0]
 800326e:	1858      	adds	r0, r3, r1
 8003270:	42a0      	cmp	r0, r4
 8003272:	d10b      	bne.n	800328c <_free_r+0x74>
 8003274:	6820      	ldr	r0, [r4, #0]
 8003276:	4401      	add	r1, r0
 8003278:	1858      	adds	r0, r3, r1
 800327a:	4282      	cmp	r2, r0
 800327c:	6019      	str	r1, [r3, #0]
 800327e:	d1dd      	bne.n	800323c <_free_r+0x24>
 8003280:	6810      	ldr	r0, [r2, #0]
 8003282:	6852      	ldr	r2, [r2, #4]
 8003284:	605a      	str	r2, [r3, #4]
 8003286:	4401      	add	r1, r0
 8003288:	6019      	str	r1, [r3, #0]
 800328a:	e7d7      	b.n	800323c <_free_r+0x24>
 800328c:	d902      	bls.n	8003294 <_free_r+0x7c>
 800328e:	230c      	movs	r3, #12
 8003290:	602b      	str	r3, [r5, #0]
 8003292:	e7d3      	b.n	800323c <_free_r+0x24>
 8003294:	6820      	ldr	r0, [r4, #0]
 8003296:	1821      	adds	r1, r4, r0
 8003298:	428a      	cmp	r2, r1
 800329a:	bf04      	itt	eq
 800329c:	6811      	ldreq	r1, [r2, #0]
 800329e:	6852      	ldreq	r2, [r2, #4]
 80032a0:	6062      	str	r2, [r4, #4]
 80032a2:	bf04      	itt	eq
 80032a4:	1809      	addeq	r1, r1, r0
 80032a6:	6021      	streq	r1, [r4, #0]
 80032a8:	605c      	str	r4, [r3, #4]
 80032aa:	e7c7      	b.n	800323c <_free_r+0x24>
 80032ac:	bd38      	pop	{r3, r4, r5, pc}
 80032ae:	bf00      	nop
 80032b0:	20000090 	.word	0x20000090

080032b4 <_malloc_r>:
 80032b4:	b570      	push	{r4, r5, r6, lr}
 80032b6:	1ccd      	adds	r5, r1, #3
 80032b8:	f025 0503 	bic.w	r5, r5, #3
 80032bc:	3508      	adds	r5, #8
 80032be:	2d0c      	cmp	r5, #12
 80032c0:	bf38      	it	cc
 80032c2:	250c      	movcc	r5, #12
 80032c4:	2d00      	cmp	r5, #0
 80032c6:	4606      	mov	r6, r0
 80032c8:	db01      	blt.n	80032ce <_malloc_r+0x1a>
 80032ca:	42a9      	cmp	r1, r5
 80032cc:	d903      	bls.n	80032d6 <_malloc_r+0x22>
 80032ce:	230c      	movs	r3, #12
 80032d0:	6033      	str	r3, [r6, #0]
 80032d2:	2000      	movs	r0, #0
 80032d4:	bd70      	pop	{r4, r5, r6, pc}
 80032d6:	f000 f87d 	bl	80033d4 <__malloc_lock>
 80032da:	4a21      	ldr	r2, [pc, #132]	; (8003360 <_malloc_r+0xac>)
 80032dc:	6814      	ldr	r4, [r2, #0]
 80032de:	4621      	mov	r1, r4
 80032e0:	b991      	cbnz	r1, 8003308 <_malloc_r+0x54>
 80032e2:	4c20      	ldr	r4, [pc, #128]	; (8003364 <_malloc_r+0xb0>)
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	b91b      	cbnz	r3, 80032f0 <_malloc_r+0x3c>
 80032e8:	4630      	mov	r0, r6
 80032ea:	f000 f863 	bl	80033b4 <_sbrk_r>
 80032ee:	6020      	str	r0, [r4, #0]
 80032f0:	4629      	mov	r1, r5
 80032f2:	4630      	mov	r0, r6
 80032f4:	f000 f85e 	bl	80033b4 <_sbrk_r>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d124      	bne.n	8003346 <_malloc_r+0x92>
 80032fc:	230c      	movs	r3, #12
 80032fe:	6033      	str	r3, [r6, #0]
 8003300:	4630      	mov	r0, r6
 8003302:	f000 f868 	bl	80033d6 <__malloc_unlock>
 8003306:	e7e4      	b.n	80032d2 <_malloc_r+0x1e>
 8003308:	680b      	ldr	r3, [r1, #0]
 800330a:	1b5b      	subs	r3, r3, r5
 800330c:	d418      	bmi.n	8003340 <_malloc_r+0x8c>
 800330e:	2b0b      	cmp	r3, #11
 8003310:	d90f      	bls.n	8003332 <_malloc_r+0x7e>
 8003312:	600b      	str	r3, [r1, #0]
 8003314:	50cd      	str	r5, [r1, r3]
 8003316:	18cc      	adds	r4, r1, r3
 8003318:	4630      	mov	r0, r6
 800331a:	f000 f85c 	bl	80033d6 <__malloc_unlock>
 800331e:	f104 000b 	add.w	r0, r4, #11
 8003322:	1d23      	adds	r3, r4, #4
 8003324:	f020 0007 	bic.w	r0, r0, #7
 8003328:	1ac3      	subs	r3, r0, r3
 800332a:	d0d3      	beq.n	80032d4 <_malloc_r+0x20>
 800332c:	425a      	negs	r2, r3
 800332e:	50e2      	str	r2, [r4, r3]
 8003330:	e7d0      	b.n	80032d4 <_malloc_r+0x20>
 8003332:	428c      	cmp	r4, r1
 8003334:	684b      	ldr	r3, [r1, #4]
 8003336:	bf16      	itet	ne
 8003338:	6063      	strne	r3, [r4, #4]
 800333a:	6013      	streq	r3, [r2, #0]
 800333c:	460c      	movne	r4, r1
 800333e:	e7eb      	b.n	8003318 <_malloc_r+0x64>
 8003340:	460c      	mov	r4, r1
 8003342:	6849      	ldr	r1, [r1, #4]
 8003344:	e7cc      	b.n	80032e0 <_malloc_r+0x2c>
 8003346:	1cc4      	adds	r4, r0, #3
 8003348:	f024 0403 	bic.w	r4, r4, #3
 800334c:	42a0      	cmp	r0, r4
 800334e:	d005      	beq.n	800335c <_malloc_r+0xa8>
 8003350:	1a21      	subs	r1, r4, r0
 8003352:	4630      	mov	r0, r6
 8003354:	f000 f82e 	bl	80033b4 <_sbrk_r>
 8003358:	3001      	adds	r0, #1
 800335a:	d0cf      	beq.n	80032fc <_malloc_r+0x48>
 800335c:	6025      	str	r5, [r4, #0]
 800335e:	e7db      	b.n	8003318 <_malloc_r+0x64>
 8003360:	20000090 	.word	0x20000090
 8003364:	20000094 	.word	0x20000094

08003368 <_realloc_r>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	4607      	mov	r7, r0
 800336c:	4614      	mov	r4, r2
 800336e:	460e      	mov	r6, r1
 8003370:	b921      	cbnz	r1, 800337c <_realloc_r+0x14>
 8003372:	4611      	mov	r1, r2
 8003374:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003378:	f7ff bf9c 	b.w	80032b4 <_malloc_r>
 800337c:	b922      	cbnz	r2, 8003388 <_realloc_r+0x20>
 800337e:	f7ff ff4b 	bl	8003218 <_free_r>
 8003382:	4625      	mov	r5, r4
 8003384:	4628      	mov	r0, r5
 8003386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003388:	f000 f826 	bl	80033d8 <_malloc_usable_size_r>
 800338c:	42a0      	cmp	r0, r4
 800338e:	d20f      	bcs.n	80033b0 <_realloc_r+0x48>
 8003390:	4621      	mov	r1, r4
 8003392:	4638      	mov	r0, r7
 8003394:	f7ff ff8e 	bl	80032b4 <_malloc_r>
 8003398:	4605      	mov	r5, r0
 800339a:	2800      	cmp	r0, #0
 800339c:	d0f2      	beq.n	8003384 <_realloc_r+0x1c>
 800339e:	4631      	mov	r1, r6
 80033a0:	4622      	mov	r2, r4
 80033a2:	f7ff ff15 	bl	80031d0 <memcpy>
 80033a6:	4631      	mov	r1, r6
 80033a8:	4638      	mov	r0, r7
 80033aa:	f7ff ff35 	bl	8003218 <_free_r>
 80033ae:	e7e9      	b.n	8003384 <_realloc_r+0x1c>
 80033b0:	4635      	mov	r5, r6
 80033b2:	e7e7      	b.n	8003384 <_realloc_r+0x1c>

080033b4 <_sbrk_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4c06      	ldr	r4, [pc, #24]	; (80033d0 <_sbrk_r+0x1c>)
 80033b8:	2300      	movs	r3, #0
 80033ba:	4605      	mov	r5, r0
 80033bc:	4608      	mov	r0, r1
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	f7ff fb4e 	bl	8002a60 <_sbrk>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_sbrk_r+0x1a>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_sbrk_r+0x1a>
 80033cc:	602b      	str	r3, [r5, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	200000fc 	.word	0x200000fc

080033d4 <__malloc_lock>:
 80033d4:	4770      	bx	lr

080033d6 <__malloc_unlock>:
 80033d6:	4770      	bx	lr

080033d8 <_malloc_usable_size_r>:
 80033d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033dc:	1f18      	subs	r0, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bfbc      	itt	lt
 80033e2:	580b      	ldrlt	r3, [r1, r0]
 80033e4:	18c0      	addlt	r0, r0, r3
 80033e6:	4770      	bx	lr

080033e8 <_init>:
 80033e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ea:	bf00      	nop
 80033ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ee:	bc08      	pop	{r3}
 80033f0:	469e      	mov	lr, r3
 80033f2:	4770      	bx	lr

080033f4 <_fini>:
 80033f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f6:	bf00      	nop
 80033f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fa:	bc08      	pop	{r3}
 80033fc:	469e      	mov	lr, r3
 80033fe:	4770      	bx	lr
